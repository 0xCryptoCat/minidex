{
    "sourceFile": "scripts/fetch-gt-data.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755454765548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755454775108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import fs from 'fs/promises';\n import path from 'path';\n \n // Rate limiting to respect GT API limits (typically 100 requests/minute)\n-const RATE_LIMIT_MS = 1000; // 1 request per second to be safe\n+const RATE_LIMIT_MS = 2000; // 1 request per second to be safe\n \n interface GTNetwork {\n   id: string;\n   name: string;\n"
                },
                {
                    "date": 1755454781622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n import fs from 'fs/promises';\n import path from 'path';\n \n-// Rate limiting to respect GT API limits (typically 100 requests/minute)\n+// Rate limiting to respect GT API limits (typically 30 requests/minute)\n const RATE_LIMIT_MS = 2000; // 1 request per second to be safe\n \n interface GTNetwork {\n   id: string;\n"
                },
                {
                    "date": 1755454788226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import fs from 'fs/promises';\n import path from 'path';\n \n // Rate limiting to respect GT API limits (typically 30 requests/minute)\n-const RATE_LIMIT_MS = 2000; // 1 request per second to be safe\n+const RATE_LIMIT_MS = 2000; // 2 seconds per request\n \n interface GTNetwork {\n   id: string;\n   name: string;\n"
                }
            ],
            "date": 1755454765548,
            "name": "Commit-0",
            "content": "#!/usr/bin/env tsx\n\n/**\n * Script to fetch GeckoTerminal networks and their DEXes\n * Generates comprehensive JSON for expanding SmallDEX support\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// Rate limiting to respect GT API limits (typically 100 requests/minute)\nconst RATE_LIMIT_MS = 1000; // 1 request per second to be safe\n\ninterface GTNetwork {\n  id: string;\n  name: string;\n  coingecko_asset_platform_id: string | null;\n}\n\ninterface GTDex {\n  id: string;\n  name: string;\n}\n\ninterface NetworkWithDexes {\n  id: string;\n  name: string;\n  coingecko_asset_platform_id: string | null;\n  dexes: GTDex[];\n}\n\n// Helper to add delay between API calls\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Extract networks from gt_networks.md file\n */\nasync function extractNetworksFromDocs(): Promise<GTNetwork[]> {\n  const docPath = path.join(process.cwd(), 'docs', 'gt_networks.md');\n  const content = await fs.readFile(docPath, 'utf-8');\n  \n  const networks: GTNetwork[] = [];\n  const networkRegex = /\"id\": \"([^\"]+)\"[\\s\\S]*?\"name\": \"([^\"]+)\"[\\s\\S]*?\"coingecko_asset_platform_id\": (?:\"([^\"]+)\"|null)/g;\n  \n  let match;\n  while ((match = networkRegex.exec(content)) !== null) {\n    networks.push({\n      id: match[1],\n      name: match[2],\n      coingecko_asset_platform_id: match[3] || null\n    });\n  }\n  \n  console.log(`üìä Extracted ${networks.length} networks from documentation`);\n  return networks;\n}\n\n/**\n * Fetch DEXes for a specific network from GT API\n */\nasync function fetchDexesForNetwork(networkId: string): Promise<GTDex[]> {\n  try {\n    console.log(`üîç Fetching DEXes for network: ${networkId}`);\n    \n    const response = await fetch(`https://api.geckoterminal.com/api/v2/networks/${networkId}/dexes`);\n    \n    if (!response.ok) {\n      if (response.status === 404) {\n        console.log(`  ‚ö†Ô∏è  Network ${networkId} not found or has no DEXes`);\n        return [];\n      }\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    const dexes: GTDex[] = data.data?.map((dex: any) => ({\n      id: dex.id,\n      name: dex.attributes.name\n    })) || [];\n    \n    console.log(`  ‚úÖ Found ${dexes.length} DEXes for ${networkId}`);\n    return dexes;\n    \n  } catch (error) {\n    console.error(`  ‚ùå Error fetching DEXes for ${networkId}:`, error);\n    return [];\n  }\n}\n\n/**\n * Main function to fetch all data\n */\nasync function main() {\n  console.log('üöÄ Starting GeckoTerminal data fetching...\\n');\n  \n  try {\n    // Step 1: Extract networks from documentation\n    const networks = await extractNetworksFromDocs();\n    \n    // Step 2: Fetch DEXes for each network with rate limiting\n    const networksWithDexes: NetworkWithDexes[] = [];\n    \n    for (let i = 0; i < networks.length; i++) {\n      const network = networks[i];\n      \n      console.log(`\\nüì° Processing ${i + 1}/${networks.length}: ${network.name} (${network.id})`);\n      \n      const dexes = await fetchDexesForNetwork(network.id);\n      \n      networksWithDexes.push({\n        ...network,\n        dexes\n      });\n      \n      // Rate limiting - wait between requests\n      if (i < networks.length - 1) {\n        console.log(`  ‚è≥ Rate limiting... waiting ${RATE_LIMIT_MS}ms`);\n        await delay(RATE_LIMIT_MS);\n      }\n    }\n    \n    // Step 3: Generate comprehensive JSON\n    const outputData = {\n      generated_at: new Date().toISOString(),\n      source: 'GeckoTerminal API',\n      total_networks: networksWithDexes.length,\n      total_dexes: networksWithDexes.reduce((sum, n) => sum + n.dexes.length, 0),\n      networks: networksWithDexes\n    };\n    \n    // Step 4: Write to file\n    const outputPath = path.join(process.cwd(), 'data', 'gt-networks-dexes.json');\n    await fs.mkdir(path.dirname(outputPath), { recursive: true });\n    await fs.writeFile(outputPath, JSON.stringify(outputData, null, 2));\n    \n    console.log(`\\n‚úÖ Data fetching complete!`);\n    console.log(`üìä Summary:`);\n    console.log(`   ‚Ä¢ Total networks: ${outputData.total_networks}`);\n    console.log(`   ‚Ä¢ Total DEXes: ${outputData.total_dexes}`);\n    console.log(`   ‚Ä¢ Output file: ${outputPath}`);\n    \n    // Step 5: Generate summary statistics\n    const networksByDexCount = networksWithDexes\n      .sort((a, b) => b.dexes.length - a.dexes.length)\n      .slice(0, 10);\n    \n    console.log(`\\nüèÜ Top 10 networks by DEX count:`);\n    networksByDexCount.forEach((network, idx) => {\n      console.log(`   ${idx + 1}. ${network.name}: ${network.dexes.length} DEXes`);\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Fatal error:', error);\n    process.exit(1);\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n"
        }
    ]
}