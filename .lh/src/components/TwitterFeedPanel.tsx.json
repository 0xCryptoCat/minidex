{
    "sourceFile": "src/components/TwitterFeedPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 75,
            "patches": [
                {
                    "date": 1755635375696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755637895213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,120 +1,395 @@\n-import { useState, useEffect, useRef, useMemo } from 'react';\n-import ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n-import ChartLoader from './ChartLoader';\n+import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n \n-interface Props {\n-  chain: string;\n-  address: string;\n-  twitterUrl?: string;\n+/**\n+ * Minimal types for the API payload we observed.\n+ */\n+type TweetAuthor = {\n+  id: string;\n+  username: string;\n+  name: string;\n+  profile_image_url?: string;\n+};\n+\n+type TweetMetrics = {\n+  retweet_count?: number;\n+  reply_count?: number;\n+  like_count?: number;\n+  quote_count?: number;\n+  bookmark_count?: number;\n+  impression_count?: number;\n+};\n+\n+type TweetEntitiesUrl = {\n+  url?: string;\n+  expanded_url?: string;\n+  display_url?: string;\n+  media_key?: string;\n+};\n+\n+type Tweet = {\n+  id: string;\n+  text: string;\n+  created_at: string;\n+  author_id: string;\n+  author: TweetAuthor;\n+  public_metrics?: TweetMetrics;\n+  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n+};\n+\n+type TweetsResponse = {\n+  is_enabled: boolean;\n+  tweets: Tweet[];\n+};\n+\n+type Props = {\n+  /** Solana mint address for the token (required by the API) */\n+  tokenAddress: string;\n+\n+  /**\n+   * Chain identifier.\n+   * We treat Solana as supported and everything else as \"coming soon\".\n+   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n+   */\n+  chainId: string | number;\n+\n+  /** Optional: override panel title (default: \"Twitter Feed\") */\n+  title?: string;\n+\n+  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n+  heightPx?: number;\n+\n+  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n+  refreshMs?: number;\n+\n+  /**\n+   * Optional: className hooks to better match your repo CSS quickly.\n+   * If your Security section uses particular classes, map them here.\n+   */\n+  classNames?: {\n+    root?: string;           // wrapper of the whole panel\n+    headerRow?: string;      // clickable header row container\n+    headerLeft?: string;     // title container\n+    headerRight?: string;    // right-aligned controls\n+    expandBtn?: string;      // toggle button\n+    content?: string;        // collapsible content container\n+    card?: string;           // tweet card wrapper\n+    authorRow?: string;      // author (avatar + names) row\n+    authorName?: string;     // author display name\n+    authorHandle?: string;   // @handle\n+    metaRow?: string;        // created_at + views\n+    text?: string;           // tweet text\n+    metricsRow?: string;     // likes/replies/etc row\n+    pill?: string;           // small status pill (for unavailable/soon)\n+  };\n+};\n+\n+/**\n+ * Loose detection for Solana.\n+ * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n+ */\n+function isSolana(chainId: Props[\"chainId\"]) {\n+  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n+  const v = String(chainId).toLowerCase();\n+  return v.includes(\"solana\") || v === \"sol\";\n }\n \n-const TwitterFeedPanel: React.FC<Props> = ({ chain, address, twitterUrl }) => {\n+/**\n+ * Lazy Lottie loader using `lottie-web` at runtime.\n+ * - Expects the file to exist at `/logo_animation.json` under public/.\n+ * - If `lottie-web` is not installed, it silently falls back to a simple CSS spinner.\n+ */\n+function Loader({ message }: { message?: string }) {\n+  const ref = useRef<HTMLDivElement>(null);\n+  const [fallback, setFallback] = useState(false);\n+\n+  useEffect(() => {\n+    let anim: any;\n+    let mounted = true;\n+\n+    (async () => {\n+      try {\n+        // dynamic import so we don't bloat the main bundle if not used\n+        const lottie = await import(\"lottie-web\");\n+        if (!mounted || !ref.current) return;\n+        anim = lottie.loadAnimation({\n+          container: ref.current,\n+          renderer: \"svg\",\n+          loop: true,\n+          autoplay: true,\n+          path: \"/logo_animation.json\", // public/logo_animation.json\n+        });\n+      } catch {\n+        setFallback(true);\n+      }\n+    })();\n+\n+    return () => {\n+      mounted = false;\n+      if (anim) anim.destroy();\n+    };\n+  }, []);\n+\n+  return (\n+    <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px\", rowGap: 8 }}>\n+      {fallback ? (\n+        <div\n+          style={{\n+            width: 28,\n+            height: 28,\n+            border: \"2px solid var(--muted-border, #444)\",\n+            borderTopColor: \"var(--accent, #66f)\",\n+            borderRadius: \"50%\",\n+            animation: \"spin 0.8s linear infinite\",\n+          }}\n+        />\n+      ) : (\n+        <div ref={ref} style={{ width: 48, height: 48 }} />\n+      )}\n+      <div style={{ fontSize: 12, opacity: 0.8 }}>{message || \"Loading…\"}</div>\n+      <style>{`@keyframes spin {to { transform: rotate(360deg);} }`}</style>\n+    </div>\n+  );\n+}\n+\n+const TwitterFeedPanel: React.FC<Props> = ({\n+  tokenAddress,\n+  chainId,\n+  title = \"Twitter Feed\",\n+  heightPx = 340,\n+  refreshMs = 90_000,\n+  classNames = {},\n+}) => {\n   const [expanded, setExpanded] = useState(false);\n   const [loading, setLoading] = useState(false);\n-  const [feedError, setFeedError] = useState<null | 'comingSoon' | 'unavailable'>(null);\n-  const containerRef = useRef<HTMLDivElement>(null);\n+  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n+  const [data, setData] = useState<TweetsResponse | null>(null);\n \n-  // Derive Twitter handle from the URL (e.g. \"https://twitter.com/Project\" -> \"Project\")\n-  const twitterHandle = useMemo(() => {\n-    if (!twitterUrl) return '';\n-    const match = twitterUrl.match(/(?:twitter\\.com|x\\.com)\\/([^\\/\\?]+)/i);\n-    return match ? match[1] : '';\n-  }, [twitterUrl]);\n+  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n \n-  useEffect(() => {\n-    if (!expanded) return;\n-    // If chain is not Solana, no feed is available yet\n-    if (chain.toLowerCase() !== 'solana') {\n-      setFeedError('comingSoon');\n+  const url = useMemo(() => {\n+    const u = new URL(\"https://screener-api.assetdash.com/moby_screener/tokens/tweets\");\n+    u.searchParams.set(\"token_address\", tokenAddress || \"\");\n+    u.searchParams.set(\"compact\", \"false\");\n+    return u.toString();\n+  }, [tokenAddress]);\n+\n+  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n+    if (!canShowFeed) {\n+      setErr(\"comingSoon\");\n+      setData(null);\n       return;\n     }\n-    // If no handle available for a Solana token, treat as unavailable\n-    if (!twitterHandle) {\n-      setFeedError('unavailable');\n-      return;\n-    }\n-    // Reset error and show loader while fetching tweets\n-    setFeedError(null);\n+    setErr(null);\n     setLoading(true);\n+    try {\n+      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n+      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n+      const json: TweetsResponse = await r.json();\n \n-    // Helper to embed the Twitter timeline\n-    const embedTimeline = () => {\n-      const target = containerRef.current;\n-      if (!target) return;\n-      (window as any).twttr.widgets.createTimeline(\n-        { sourceType: 'profile', screenName: twitterHandle },\n-        target,\n-        { height: 300, theme: 'dark', chrome: 'transparent' }  // 300px tall, dark theme, no background borders\n-      ).then(() => {\n-        setLoading(false);\n-      }).catch(() => {\n-        setLoading(false);\n-        setFeedError('unavailable');\n-      });\n-    };\n+      if (!json?.is_enabled) {\n+        setErr(\"unavailable\");\n+        setData(null);\n+      } else if (!json.tweets || json.tweets.length === 0) {\n+        setErr(\"unavailable\");\n+        setData({ is_enabled: true, tweets: [] });\n+      } else {\n+        setData(json);\n+      }\n+    } catch (_e) {\n+      setErr(\"unavailable\");\n+      setData(null);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [url, canShowFeed]);\n \n-    // Ensure the Twitter widgets script is loaded, then create the timeline\n-    if (!(window as any).twttr?.widgets) {\n-      const script = document.createElement('script');\n-      script.src = 'https://platform.twitter.com/widgets.js';\n-      script.async = true;\n-      script.onload = () => {\n-        if ((window as any).twttr?.widgets) {\n-          embedTimeline();\n-        } else {\n-          setLoading(false);\n-          setFeedError('unavailable');\n-        }\n+  // Load on first expand, then poll while open (if refreshMs > 0)\n+  useEffect(() => {\n+    if (!expanded) return;\n+\n+    const ctrl = new AbortController();\n+    fetchTweets(ctrl.signal);\n+\n+    if (refreshMs > 0) {\n+      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n+      return () => {\n+        ctrl.abort();\n+        clearInterval(id);\n       };\n-      document.body.appendChild(script);\n-    } else {\n-      // Script already loaded, directly embed\n-      embedTimeline();\n     }\n-  }, [expanded, chain, twitterHandle]);\n+    return () => ctrl.abort();\n+  }, [expanded, fetchTweets, refreshMs]);\n \n+  // --- UI helpers\n+  const openTweet = (t: Tweet) =>\n+    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n+\n   return (\n-    <div className=\"security-section\">\n-      {/* Header row (collapsed view) */}\n-      <div className=\"security-row\">\n-        <div className=\"security-name\">\n-          <span>Twitter Feed</span>\n+    <div className={classNames.root ?? \"detail-panel\"}>\n+      {/* Header row (match your security section style) */}\n+      <div\n+        className={classNames.headerRow ?? \"detail-panel__row\"}\n+        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n+      >\n+        <div className={classNames.headerLeft ?? \"detail-panel__title\"} style={{ fontWeight: 600 }}>\n+          {title}\n         </div>\n-        <div className=\"security-result\">\n-          {/* Expand/collapse toggle */}\n-          <button \n-            className=\"security-expand\" \n-            onClick={() => setExpanded(prev => !prev)}\n-            aria-label=\"Toggle Twitter feed\"\n+        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n+          <button\n+            type=\"button\"\n+            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n+            onClick={() => setExpanded((v) => !v)}\n+            aria-expanded={expanded}\n+            aria-controls=\"twitter-feed-content\"\n+            title={expanded ? \"Collapse\" : \"Expand\"}\n+            style={{\n+              border: 0,\n+              background: \"transparent\",\n+              color: \"inherit\",\n+              cursor: \"pointer\",\n+              lineHeight: 0,\n+            }}\n           >\n-            <ExpandMoreIcon sx={{ fontSize: 16 }} />\n+            {/* simple chevron */}\n+            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n+              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n+            </svg>\n           </button>\n         </div>\n       </div>\n \n-      {/* Expandable content */}\n+      {/* Collapsible content */}\n       {expanded && (\n-        <div className=\"twitter-feed-content\" style={{ position: 'relative', paddingBottom: '8px' }}>\n-          {/* Loader animation while tweets load */}\n-          {loading && <ChartLoader message=\"Loading feed...\" />}\n+        <div\n+          id=\"twitter-feed-content\"\n+          className={classNames.content ?? \"detail-panel__content\"}\n+          style={{\n+            position: \"relative\",\n+            padding: \"8px 0 0\",\n+          }}\n+        >\n+          {loading && <Loader message=\"Loading feed…\" />}\n \n-          {/* \"Coming soon\" message for unsupported chains */}\n-          {feedError === 'comingSoon' && (\n-            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n-              <span className=\"security-status pending\">Feed is coming soon.</span>\n+          {/* Coming soon / unavailable states */}\n+          {!loading && err === \"comingSoon\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n             </div>\n           )}\n \n-          {/* \"Unavailable\" message for errors/no-data */}\n-          {feedError === 'unavailable' && (\n-            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n-              <span className=\"security-status pending\">Feed is unavailable.</span>\n+          {!loading && err === \"unavailable\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n             </div>\n           )}\n \n-          {/* Container for the embedded Twitter timeline */}\n-          <div ref={containerRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n+          {/* Tweets list */}\n+          {!loading && !err && data?.tweets && (\n+            <div\n+              style={{\n+                maxHeight: heightPx,\n+                overflow: \"auto\",\n+                paddingRight: 4, // room for scrollbar\n+                display: \"grid\",\n+                gap: 8,\n+              }}\n+            >\n+              {data.tweets.map((t) => (\n+                <article\n+                  key={t.id}\n+                  className={classNames.card ?? \"card\"}\n+                  style={{\n+                    border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n+                    borderRadius: 12,\n+                    padding: 12,\n+                    background: \"var(--surface, rgba(255,255,255,0.02))\",\n+                  }}\n+                >\n+                  {/* Author */}\n+                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n+                    {t.author?.profile_image_url ? (\n+                      <img\n+                        src={t.author.profile_image_url}\n+                        alt={t.author?.name || t.author?.username}\n+                        width={26}\n+                        height={26}\n+                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n+                        loading=\"lazy\"\n+                      />\n+                    ) : (\n+                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n+                    )}\n+                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n+                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n+                        {t.author?.name || \"Unknown\"}\n+                      </div>\n+                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n+                        @{t.author?.username}\n+                      </div>\n+                    </div>\n+                  </div>\n+\n+                  {/* Text */}\n+                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n+                    {t.text}\n+                  </div>\n+\n+                  {/* URLs (simple list) */}\n+                  {!!t.entities?.urls?.length && (\n+                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n+                      {t.entities.urls.map((u, i) => {\n+                        const href = u.expanded_url || u.url;\n+                        if (!href) return null;\n+                        return (\n+                          <li key={i} style={{ fontSize: 12 }}>\n+                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n+                              {u.display_url || href}\n+                            </a>\n+                          </li>\n+                        );\n+                      })}\n+                    </ul>\n+                  )}\n+\n+                  {/* Meta: time + impressions */}\n+                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n+                    <span>{new Date(t.created_at).toLocaleString()}</span>\n+                    {typeof t.public_metrics?.impression_count === \"number\" && (\n+                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n+                    )}\n+                  </div>\n+\n+                  {/* Metrics */}\n+                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n+                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n+                  </div>\n+\n+                  {/* CTA */}\n+                  <div style={{ marginTop: 10 }}>\n+                    <button\n+                      type=\"button\"\n+                      onClick={() => openTweet(t)}\n+                      style={{\n+                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n+                        background: \"transparent\",\n+                        color: \"inherit\",\n+                        borderRadius: 8,\n+                        padding: \"6px 10px\",\n+                        fontSize: 12,\n+                        cursor: \"pointer\",\n+                      }}\n+                    >\n+                      Read on X\n+                    </button>\n+                  </div>\n+                </article>\n+              ))}\n+            </div>\n+          )}\n         </div>\n       )}\n     </div>\n   );\n"
                },
                {
                    "date": 1755637957651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+import { useState, useEffect, useRef, useMemo } from 'react';\n+import ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n+import ChartLoader from './ChartLoader';\n+\n+interface Props {\n+  chain: string;\n+  address: string;\n+  twitterUrl?: string;\n+}\n+\n+const TwitterFeedPanel: React.FC<Props> = ({ chain, address, twitterUrl }) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const [loading, setLoading] = useState(false);\n+  const [feedError, setFeedError] = useState<null | 'comingSoon' | 'unavailable'>(null);\n+  const containerRef = useRef<HTMLDivElement>(null);\n+\n+  // Derive Twitter handle from the URL (e.g. \"https://twitter.com/Project\" -> \"Project\")\n+  const twitterHandle = useMemo(() => {\n+    if (!twitterUrl) return '';\n+    const match = twitterUrl.match(/(?:twitter\\.com|x\\.com)\\/([^\\/\\?]+)/i);\n+    return match ? match[1] : '';\n+  }, [twitterUrl]);\n+\n+  useEffect(() => {\n+    if (!expanded) return;\n+    // If chain is not Solana, no feed is available yet\n+    if (chain.toLowerCase() !== 'solana') {\n+      setFeedError('comingSoon');\n+      return;\n+    }\n+    // If no handle available for a Solana token, treat as unavailable\n+    if (!twitterHandle) {\n+      setFeedError('unavailable');\n+      return;\n+    }\n+    // Reset error and show loader while fetching tweets\n+    setFeedError(null);\n+    setLoading(true);\n+\n+    // Helper to embed the Twitter timeline\n+    const embedTimeline = () => {\n+      const target = containerRef.current;\n+      if (!target) return;\n+      (window as any).twttr.widgets.createTimeline(\n+        { sourceType: 'profile', screenName: twitterHandle },\n+        target,\n+        { height: 300, theme: 'dark', chrome: 'transparent' }  // 300px tall, dark theme, no background borders\n+      ).then(() => {\n+        setLoading(false);\n+      }).catch(() => {\n+        setLoading(false);\n+        setFeedError('unavailable');\n+      });\n+    };\n+\n+    // Ensure the Twitter widgets script is loaded, then create the timeline\n+    if (!(window as any).twttr?.widgets) {\n+      const script = document.createElement('script');\n+      script.src = 'https://platform.twitter.com/widgets.js';\n+      script.async = true;\n+      script.onload = () => {\n+        if ((window as any).twttr?.widgets) {\n+          embedTimeline();\n+        } else {\n+          setLoading(false);\n+          setFeedError('unavailable');\n+        }\n+      };\n+      document.body.appendChild(script);\n+    } else {\n+      // Script already loaded, directly embed\n+      embedTimeline();\n+    }\n+  }, [expanded, chain, twitterHandle]);\n+\n+  return (\n+    <div className=\"security-section\">\n+      {/* Header row (collapsed view) */}\n+      <div className=\"security-row\">\n+        <div className=\"security-name\">\n+          <span>Twitter Feed</span>\n+        </div>\n+        <div className=\"security-result\">\n+          {/* Expand/collapse toggle */}\n+          <button \n+            className=\"security-expand\" \n+            onClick={() => setExpanded(prev => !prev)}\n+            aria-label=\"Toggle Twitter feed\"\n+          >\n+            <ExpandMoreIcon sx={{ fontSize: 16 }} />\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Expandable content */}\n+      {expanded && (\n+        <div className=\"twitter-feed-content\" style={{ position: 'relative', paddingBottom: '8px' }}>\n+          {/* Loader animation while tweets load */}\n+          {loading && <ChartLoader message=\"Loading feed...\" />}\n+\n+          {/* \"Coming soon\" message for unsupported chains */}\n+          {feedError === 'comingSoon' && (\n+            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n+              <span className=\"security-status pending\">Feed is coming soon.</span>\n+            </div>\n+          )}\n+\n+          {/* \"Unavailable\" message for errors/no-data */}\n+          {feedError === 'unavailable' && (\n+            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n+              <span className=\"security-status pending\">Feed is unavailable.</span>\n+            </div>\n+          )}\n+\n+          {/* Container for the embedded Twitter timeline */}\n+          <div ref={containerRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755637973953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,127 +1,4 @@\n-import { useState, useEffect, useRef, useMemo } from 'react';\n-import ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n-import ChartLoader from './ChartLoader';\n-\n-interface Props {\n-  chain: string;\n-  address: string;\n-  twitterUrl?: string;\n-}\n-\n-const TwitterFeedPanel: React.FC<Props> = ({ chain, address, twitterUrl }) => {\n-  const [expanded, setExpanded] = useState(false);\n-  const [loading, setLoading] = useState(false);\n-  const [feedError, setFeedError] = useState<null | 'comingSoon' | 'unavailable'>(null);\n-  const containerRef = useRef<HTMLDivElement>(null);\n-\n-  // Derive Twitter handle from the URL (e.g. \"https://twitter.com/Project\" -> \"Project\")\n-  const twitterHandle = useMemo(() => {\n-    if (!twitterUrl) return '';\n-    const match = twitterUrl.match(/(?:twitter\\.com|x\\.com)\\/([^\\/\\?]+)/i);\n-    return match ? match[1] : '';\n-  }, [twitterUrl]);\n-\n-  useEffect(() => {\n-    if (!expanded) return;\n-    // If chain is not Solana, no feed is available yet\n-    if (chain.toLowerCase() !== 'solana') {\n-      setFeedError('comingSoon');\n-      return;\n-    }\n-    // If no handle available for a Solana token, treat as unavailable\n-    if (!twitterHandle) {\n-      setFeedError('unavailable');\n-      return;\n-    }\n-    // Reset error and show loader while fetching tweets\n-    setFeedError(null);\n-    setLoading(true);\n-\n-    // Helper to embed the Twitter timeline\n-    const embedTimeline = () => {\n-      const target = containerRef.current;\n-      if (!target) return;\n-      (window as any).twttr.widgets.createTimeline(\n-        { sourceType: 'profile', screenName: twitterHandle },\n-        target,\n-        { height: 300, theme: 'dark', chrome: 'transparent' }  // 300px tall, dark theme, no background borders\n-      ).then(() => {\n-        setLoading(false);\n-      }).catch(() => {\n-        setLoading(false);\n-        setFeedError('unavailable');\n-      });\n-    };\n-\n-    // Ensure the Twitter widgets script is loaded, then create the timeline\n-    if (!(window as any).twttr?.widgets) {\n-      const script = document.createElement('script');\n-      script.src = 'https://platform.twitter.com/widgets.js';\n-      script.async = true;\n-      script.onload = () => {\n-        if ((window as any).twttr?.widgets) {\n-          embedTimeline();\n-        } else {\n-          setLoading(false);\n-          setFeedError('unavailable');\n-        }\n-      };\n-      document.body.appendChild(script);\n-    } else {\n-      // Script already loaded, directly embed\n-      embedTimeline();\n-    }\n-  }, [expanded, chain, twitterHandle]);\n-\n-  return (\n-    <div className=\"security-section\">\n-      {/* Header row (collapsed view) */}\n-      <div className=\"security-row\">\n-        <div className=\"security-name\">\n-          <span>Twitter Feed</span>\n-        </div>\n-        <div className=\"security-result\">\n-          {/* Expand/collapse toggle */}\n-          <button \n-            className=\"security-expand\" \n-            onClick={() => setExpanded(prev => !prev)}\n-            aria-label=\"Toggle Twitter feed\"\n-          >\n-            <ExpandMoreIcon sx={{ fontSize: 16 }} />\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Expandable content */}\n-      {expanded && (\n-        <div className=\"twitter-feed-content\" style={{ position: 'relative', paddingBottom: '8px' }}>\n-          {/* Loader animation while tweets load */}\n-          {loading && <ChartLoader message=\"Loading feed...\" />}\n-\n-          {/* \"Coming soon\" message for unsupported chains */}\n-          {feedError === 'comingSoon' && (\n-            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n-              <span className=\"security-status pending\">Feed is coming soon.</span>\n-            </div>\n-          )}\n-\n-          {/* \"Unavailable\" message for errors/no-data */}\n-          {feedError === 'unavailable' && (\n-            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n-              <span className=\"security-status pending\">Feed is unavailable.</span>\n-            </div>\n-          )}\n-\n-          {/* Container for the embedded Twitter timeline */}\n-          <div ref={containerRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default TwitterFeedPanel;\n import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n \n /**\n  * Minimal types for the API payload we observed.\n"
                },
                {
                    "date": 1755638001489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,25 +105,10 @@\n   useEffect(() => {\n     let anim: any;\n     let mounted = true;\n \n-    (async () => {\n-      try {\n-        // dynamic import so we don't bloat the main bundle if not used\n-        const lottie = await import(\"lottie-web\");\n-        if (!mounted || !ref.current) return;\n-        anim = lottie.loadAnimation({\n-          container: ref.current,\n-          renderer: \"svg\",\n-          loop: true,\n-          autoplay: true,\n-          path: \"/logo_animation.json\", // public/logo_animation.json\n-        });\n-      } catch {\n-        setFallback(true);\n-      }\n-    })();\n \n+\n     return () => {\n       mounted = false;\n       if (anim) anim.destroy();\n     };\n"
                },
                {
                    "date": 1755638009327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,20 +101,8 @@\n function Loader({ message }: { message?: string }) {\n   const ref = useRef<HTMLDivElement>(null);\n   const [fallback, setFallback] = useState(false);\n \n-  useEffect(() => {\n-    let anim: any;\n-    let mounted = true;\n-\n-\n-\n-    return () => {\n-      mounted = false;\n-      if (anim) anim.destroy();\n-    };\n-  }, []);\n-\n   return (\n     <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px\", rowGap: 8 }}>\n       {fallback ? (\n         <div\n"
                },
                {
                    "date": 1755638066258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n+\n+/**\n+ * Minimal types for the API payload we observed.\n+ */\n+type TweetAuthor = {\n+  id: string;\n+  username: string;\n+  name: string;\n+  profile_image_url?: string;\n+};\n+\n+type TweetMetrics = {\n+  retweet_count?: number;\n+  reply_count?: number;\n+  like_count?: number;\n+  quote_count?: number;\n+  bookmark_count?: number;\n+  impression_count?: number;\n+};\n+\n+type TweetEntitiesUrl = {\n+  url?: string;\n+  expanded_url?: string;\n+  display_url?: string;\n+  media_key?: string;\n+};\n+\n+type Tweet = {\n+  id: string;\n+  text: string;\n+  created_at: string;\n+  author_id: string;\n+  author: TweetAuthor;\n+  public_metrics?: TweetMetrics;\n+  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n+};\n+\n+type TweetsResponse = {\n+  is_enabled: boolean;\n+  tweets: Tweet[];\n+};\n+\n+type Props = {\n+  /** Solana mint address for the token (required by the API) */\n+  tokenAddress: string;\n+\n+  /**\n+   * Chain identifier.\n+   * We treat Solana as supported and everything else as \"coming soon\".\n+   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n+   */\n+  chainId: string | number;\n+\n+  /** Optional: override panel title (default: \"Twitter Feed\") */\n+  title?: string;\n+\n+  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n+  heightPx?: number;\n+\n+  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n+  refreshMs?: number;\n+\n+  /**\n+   * Optional: className hooks to better match your repo CSS quickly.\n+   * If your Security section uses particular classes, map them here.\n+   */\n+  classNames?: {\n+    root?: string;           // wrapper of the whole panel\n+    headerRow?: string;      // clickable header row container\n+    headerLeft?: string;     // title container\n+    headerRight?: string;    // right-aligned controls\n+    expandBtn?: string;      // toggle button\n+    content?: string;        // collapsible content container\n+    card?: string;           // tweet card wrapper\n+    authorRow?: string;      // author (avatar + names) row\n+    authorName?: string;     // author display name\n+    authorHandle?: string;   // @handle\n+    metaRow?: string;        // created_at + views\n+    text?: string;           // tweet text\n+    metricsRow?: string;     // likes/replies/etc row\n+    pill?: string;           // small status pill (for unavailable/soon)\n+  };\n+};\n+\n+/**\n+ * Loose detection for Solana.\n+ * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n+ */\n+function isSolana(chainId: Props[\"chainId\"]) {\n+  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n+  const v = String(chainId).toLowerCase();\n+  return v.includes(\"solana\") || v === \"sol\";\n+}\n+\n+const TwitterFeedPanel: React.FC<Props> = ({\n+  tokenAddress,\n+  chainId,\n+  title = \"Twitter Feed\",\n+  heightPx = 340,\n+  refreshMs = 90_000,\n+  classNames = {},\n+}) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const [loading, setLoading] = useState(false);\n+  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n+  const [data, setData] = useState<TweetsResponse | null>(null);\n+\n+  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n+\n+  const url = useMemo(() => {\n+    const u = new URL(\"https://screener-api.assetdash.com/moby_screener/tokens/tweets\");\n+    u.searchParams.set(\"token_address\", tokenAddress || \"\");\n+    u.searchParams.set(\"compact\", \"false\");\n+    return u.toString();\n+  }, [tokenAddress]);\n+\n+  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n+    if (!canShowFeed) {\n+      setErr(\"comingSoon\");\n+      setData(null);\n+      return;\n+    }\n+    setErr(null);\n+    setLoading(true);\n+    try {\n+      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n+      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n+      const json: TweetsResponse = await r.json();\n+\n+      if (!json?.is_enabled) {\n+        setErr(\"unavailable\");\n+        setData(null);\n+      } else if (!json.tweets || json.tweets.length === 0) {\n+        setErr(\"unavailable\");\n+        setData({ is_enabled: true, tweets: [] });\n+      } else {\n+        setData(json);\n+      }\n+    } catch (_e) {\n+      setErr(\"unavailable\");\n+      setData(null);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [url, canShowFeed]);\n+\n+  // Load on first expand, then poll while open (if refreshMs > 0)\n+  useEffect(() => {\n+    if (!expanded) return;\n+\n+    const ctrl = new AbortController();\n+    fetchTweets(ctrl.signal);\n+\n+    if (refreshMs > 0) {\n+      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n+      return () => {\n+        ctrl.abort();\n+        clearInterval(id);\n+      };\n+    }\n+    return () => ctrl.abort();\n+  }, [expanded, fetchTweets, refreshMs]);\n+\n+  // --- UI helpers\n+  const openTweet = (t: Tweet) =>\n+    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n+\n+  return (\n+    <div className={classNames.root ?? \"detail-panel\"}>\n+      {/* Header row (match your security section style) */}\n+      <div\n+        className={classNames.headerRow ?? \"detail-panel__row\"}\n+        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n+      >\n+        <div className={classNames.headerLeft ?? \"detail-panel__title\"} style={{ fontWeight: 600 }}>\n+          {title}\n+        </div>\n+        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n+          <button\n+            type=\"button\"\n+            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n+            onClick={() => setExpanded((v) => !v)}\n+            aria-expanded={expanded}\n+            aria-controls=\"twitter-feed-content\"\n+            title={expanded ? \"Collapse\" : \"Expand\"}\n+            style={{\n+              border: 0,\n+              background: \"transparent\",\n+              color: \"inherit\",\n+              cursor: \"pointer\",\n+              lineHeight: 0,\n+            }}\n+          >\n+            {/* simple chevron */}\n+            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n+              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n+            </svg>\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Collapsible content */}\n+      {expanded && (\n+        <div\n+          id=\"twitter-feed-content\"\n+          className={classNames.content ?? \"detail-panel__content\"}\n+          style={{\n+            position: \"relative\",\n+            padding: \"8px 0 0\",\n+          }}\n+        >\n+          {loading && <Loader message=\"Loading feed…\" />}\n+\n+          {/* Coming soon / unavailable states */}\n+          {!loading && err === \"comingSoon\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n+            </div>\n+          )}\n+\n+          {!loading && err === \"unavailable\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n+            </div>\n+          )}\n+\n+          {/* Tweets list */}\n+          {!loading && !err && data?.tweets && (\n+            <div\n+              style={{\n+                maxHeight: heightPx,\n+                overflow: \"auto\",\n+                paddingRight: 4, // room for scrollbar\n+                display: \"grid\",\n+                gap: 8,\n+              }}\n+            >\n+              {data.tweets.map((t) => (\n+                <article\n+                  key={t.id}\n+                  className={classNames.card ?? \"card\"}\n+                  style={{\n+                    border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n+                    borderRadius: 12,\n+                    padding: 12,\n+                    background: \"var(--surface, rgba(255,255,255,0.02))\",\n+                  }}\n+                >\n+                  {/* Author */}\n+                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n+                    {t.author?.profile_image_url ? (\n+                      <img\n+                        src={t.author.profile_image_url}\n+                        alt={t.author?.name || t.author?.username}\n+                        width={26}\n+                        height={26}\n+                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n+                        loading=\"lazy\"\n+                      />\n+                    ) : (\n+                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n+                    )}\n+                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n+                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n+                        {t.author?.name || \"Unknown\"}\n+                      </div>\n+                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n+                        @{t.author?.username}\n+                      </div>\n+                    </div>\n+                  </div>\n+\n+                  {/* Text */}\n+                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n+                    {t.text}\n+                  </div>\n+\n+                  {/* URLs (simple list) */}\n+                  {!!t.entities?.urls?.length && (\n+                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n+                      {t.entities.urls.map((u, i) => {\n+                        const href = u.expanded_url || u.url;\n+                        if (!href) return null;\n+                        return (\n+                          <li key={i} style={{ fontSize: 12 }}>\n+                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n+                              {u.display_url || href}\n+                            </a>\n+                          </li>\n+                        );\n+                      })}\n+                    </ul>\n+                  )}\n+\n+                  {/* Meta: time + impressions */}\n+                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n+                    <span>{new Date(t.created_at).toLocaleString()}</span>\n+                    {typeof t.public_metrics?.impression_count === \"number\" && (\n+                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n+                    )}\n+                  </div>\n+\n+                  {/* Metrics */}\n+                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n+                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n+                  </div>\n+\n+                  {/* CTA */}\n+                  <div style={{ marginTop: 10 }}>\n+                    <button\n+                      type=\"button\"\n+                      onClick={() => openTweet(t)}\n+                      style={{\n+                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n+                        background: \"transparent\",\n+                        color: \"inherit\",\n+                        borderRadius: 8,\n+                        padding: \"6px 10px\",\n+                        fontSize: 12,\n+                        cursor: \"pointer\",\n+                      }}\n+                    >\n+                      Read on X\n+                    </button>\n+                  </div>\n+                </article>\n+              ))}\n+            </div>\n+          )}\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755638079877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n             position: \"relative\",\n             padding: \"8px 0 0\",\n           }}\n         >\n-          {loading && <Loader message=\"Loading feed…\" />}\n+          {loading && <ChartLoader message=\"Loading feed…\" />}\n \n           {/* Coming soon / unavailable states */}\n           {!loading && err === \"comingSoon\" && (\n             <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n@@ -337,375 +337,4 @@\n   );\n };\n \n export default TwitterFeedPanel;\n-import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n-\n-/**\n- * Minimal types for the API payload we observed.\n- */\n-type TweetAuthor = {\n-  id: string;\n-  username: string;\n-  name: string;\n-  profile_image_url?: string;\n-};\n-\n-type TweetMetrics = {\n-  retweet_count?: number;\n-  reply_count?: number;\n-  like_count?: number;\n-  quote_count?: number;\n-  bookmark_count?: number;\n-  impression_count?: number;\n-};\n-\n-type TweetEntitiesUrl = {\n-  url?: string;\n-  expanded_url?: string;\n-  display_url?: string;\n-  media_key?: string;\n-};\n-\n-type Tweet = {\n-  id: string;\n-  text: string;\n-  created_at: string;\n-  author_id: string;\n-  author: TweetAuthor;\n-  public_metrics?: TweetMetrics;\n-  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n-};\n-\n-type TweetsResponse = {\n-  is_enabled: boolean;\n-  tweets: Tweet[];\n-};\n-\n-type Props = {\n-  /** Solana mint address for the token (required by the API) */\n-  tokenAddress: string;\n-\n-  /**\n-   * Chain identifier.\n-   * We treat Solana as supported and everything else as \"coming soon\".\n-   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n-   */\n-  chainId: string | number;\n-\n-  /** Optional: override panel title (default: \"Twitter Feed\") */\n-  title?: string;\n-\n-  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n-  heightPx?: number;\n-\n-  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n-  refreshMs?: number;\n-\n-  /**\n-   * Optional: className hooks to better match your repo CSS quickly.\n-   * If your Security section uses particular classes, map them here.\n-   */\n-  classNames?: {\n-    root?: string;           // wrapper of the whole panel\n-    headerRow?: string;      // clickable header row container\n-    headerLeft?: string;     // title container\n-    headerRight?: string;    // right-aligned controls\n-    expandBtn?: string;      // toggle button\n-    content?: string;        // collapsible content container\n-    card?: string;           // tweet card wrapper\n-    authorRow?: string;      // author (avatar + names) row\n-    authorName?: string;     // author display name\n-    authorHandle?: string;   // @handle\n-    metaRow?: string;        // created_at + views\n-    text?: string;           // tweet text\n-    metricsRow?: string;     // likes/replies/etc row\n-    pill?: string;           // small status pill (for unavailable/soon)\n-  };\n-};\n-\n-/**\n- * Loose detection for Solana.\n- * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n- */\n-function isSolana(chainId: Props[\"chainId\"]) {\n-  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n-  const v = String(chainId).toLowerCase();\n-  return v.includes(\"solana\") || v === \"sol\";\n-}\n-\n-/**\n- * Lazy Lottie loader using `lottie-web` at runtime.\n- * - Expects the file to exist at `/logo_animation.json` under public/.\n- * - If `lottie-web` is not installed, it silently falls back to a simple CSS spinner.\n- */\n-function Loader({ message }: { message?: string }) {\n-  const ref = useRef<HTMLDivElement>(null);\n-  const [fallback, setFallback] = useState(false);\n-\n-  return (\n-    <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px\", rowGap: 8 }}>\n-      {fallback ? (\n-        <div\n-          style={{\n-            width: 28,\n-            height: 28,\n-            border: \"2px solid var(--muted-border, #444)\",\n-            borderTopColor: \"var(--accent, #66f)\",\n-            borderRadius: \"50%\",\n-            animation: \"spin 0.8s linear infinite\",\n-          }}\n-        />\n-      ) : (\n-        <div ref={ref} style={{ width: 48, height: 48 }} />\n-      )}\n-      <div style={{ fontSize: 12, opacity: 0.8 }}>{message || \"Loading…\"}</div>\n-      <style>{`@keyframes spin {to { transform: rotate(360deg);} }`}</style>\n-    </div>\n-  );\n-}\n-\n-const TwitterFeedPanel: React.FC<Props> = ({\n-  tokenAddress,\n-  chainId,\n-  title = \"Twitter Feed\",\n-  heightPx = 340,\n-  refreshMs = 90_000,\n-  classNames = {},\n-}) => {\n-  const [expanded, setExpanded] = useState(false);\n-  const [loading, setLoading] = useState(false);\n-  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n-  const [data, setData] = useState<TweetsResponse | null>(null);\n-\n-  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n-\n-  const url = useMemo(() => {\n-    const u = new URL(\"https://screener-api.assetdash.com/moby_screener/tokens/tweets\");\n-    u.searchParams.set(\"token_address\", tokenAddress || \"\");\n-    u.searchParams.set(\"compact\", \"false\");\n-    return u.toString();\n-  }, [tokenAddress]);\n-\n-  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n-    if (!canShowFeed) {\n-      setErr(\"comingSoon\");\n-      setData(null);\n-      return;\n-    }\n-    setErr(null);\n-    setLoading(true);\n-    try {\n-      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n-      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n-      const json: TweetsResponse = await r.json();\n-\n-      if (!json?.is_enabled) {\n-        setErr(\"unavailable\");\n-        setData(null);\n-      } else if (!json.tweets || json.tweets.length === 0) {\n-        setErr(\"unavailable\");\n-        setData({ is_enabled: true, tweets: [] });\n-      } else {\n-        setData(json);\n-      }\n-    } catch (_e) {\n-      setErr(\"unavailable\");\n-      setData(null);\n-    } finally {\n-      setLoading(false);\n-    }\n-  }, [url, canShowFeed]);\n-\n-  // Load on first expand, then poll while open (if refreshMs > 0)\n-  useEffect(() => {\n-    if (!expanded) return;\n-\n-    const ctrl = new AbortController();\n-    fetchTweets(ctrl.signal);\n-\n-    if (refreshMs > 0) {\n-      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n-      return () => {\n-        ctrl.abort();\n-        clearInterval(id);\n-      };\n-    }\n-    return () => ctrl.abort();\n-  }, [expanded, fetchTweets, refreshMs]);\n-\n-  // --- UI helpers\n-  const openTweet = (t: Tweet) =>\n-    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n-\n-  return (\n-    <div className={classNames.root ?? \"detail-panel\"}>\n-      {/* Header row (match your security section style) */}\n-      <div\n-        className={classNames.headerRow ?? \"detail-panel__row\"}\n-        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n-      >\n-        <div className={classNames.headerLeft ?? \"detail-panel__title\"} style={{ fontWeight: 600 }}>\n-          {title}\n-        </div>\n-        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n-          <button\n-            type=\"button\"\n-            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n-            onClick={() => setExpanded((v) => !v)}\n-            aria-expanded={expanded}\n-            aria-controls=\"twitter-feed-content\"\n-            title={expanded ? \"Collapse\" : \"Expand\"}\n-            style={{\n-              border: 0,\n-              background: \"transparent\",\n-              color: \"inherit\",\n-              cursor: \"pointer\",\n-              lineHeight: 0,\n-            }}\n-          >\n-            {/* simple chevron */}\n-            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n-              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n-            </svg>\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Collapsible content */}\n-      {expanded && (\n-        <div\n-          id=\"twitter-feed-content\"\n-          className={classNames.content ?? \"detail-panel__content\"}\n-          style={{\n-            position: \"relative\",\n-            padding: \"8px 0 0\",\n-          }}\n-        >\n-          {loading && <Loader message=\"Loading feed…\" />}\n-\n-          {/* Coming soon / unavailable states */}\n-          {!loading && err === \"comingSoon\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n-            </div>\n-          )}\n-\n-          {!loading && err === \"unavailable\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n-            </div>\n-          )}\n-\n-          {/* Tweets list */}\n-          {!loading && !err && data?.tweets && (\n-            <div\n-              style={{\n-                maxHeight: heightPx,\n-                overflow: \"auto\",\n-                paddingRight: 4, // room for scrollbar\n-                display: \"grid\",\n-                gap: 8,\n-              }}\n-            >\n-              {data.tweets.map((t) => (\n-                <article\n-                  key={t.id}\n-                  className={classNames.card ?? \"card\"}\n-                  style={{\n-                    border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n-                    borderRadius: 12,\n-                    padding: 12,\n-                    background: \"var(--surface, rgba(255,255,255,0.02))\",\n-                  }}\n-                >\n-                  {/* Author */}\n-                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n-                    {t.author?.profile_image_url ? (\n-                      <img\n-                        src={t.author.profile_image_url}\n-                        alt={t.author?.name || t.author?.username}\n-                        width={26}\n-                        height={26}\n-                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n-                        loading=\"lazy\"\n-                      />\n-                    ) : (\n-                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n-                    )}\n-                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n-                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n-                        {t.author?.name || \"Unknown\"}\n-                      </div>\n-                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n-                        @{t.author?.username}\n-                      </div>\n-                    </div>\n-                  </div>\n-\n-                  {/* Text */}\n-                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n-                    {t.text}\n-                  </div>\n-\n-                  {/* URLs (simple list) */}\n-                  {!!t.entities?.urls?.length && (\n-                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n-                      {t.entities.urls.map((u, i) => {\n-                        const href = u.expanded_url || u.url;\n-                        if (!href) return null;\n-                        return (\n-                          <li key={i} style={{ fontSize: 12 }}>\n-                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n-                              {u.display_url || href}\n-                            </a>\n-                          </li>\n-                        );\n-                      })}\n-                    </ul>\n-                  )}\n-\n-                  {/* Meta: time + impressions */}\n-                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n-                    <span>{new Date(t.created_at).toLocaleString()}</span>\n-                    {typeof t.public_metrics?.impression_count === \"number\" && (\n-                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n-                    )}\n-                  </div>\n-\n-                  {/* Metrics */}\n-                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n-                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n-                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n-                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n-                  </div>\n-\n-                  {/* CTA */}\n-                  <div style={{ marginTop: 10 }}>\n-                    <button\n-                      type=\"button\"\n-                      onClick={() => openTweet(t)}\n-                      style={{\n-                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n-                        background: \"transparent\",\n-                        color: \"inherit\",\n-                        borderRadius: 8,\n-                        padding: \"6px 10px\",\n-                        fontSize: 12,\n-                        cursor: \"pointer\",\n-                      }}\n-                    >\n-                      Read on X\n-                    </button>\n-                  </div>\n-                </article>\n-              ))}\n-            </div>\n-          )}\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755638110824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n+import ChartLoader from '../../components/ChartLoader';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755638123877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n-import ChartLoader from '../../components/ChartLoader';\n+import ChartLoader from '../../components/ChartLoader.';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755638132055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n-import ChartLoader from '../../components/ChartLoader.';\n+import ChartLoader from 'ChartLoader.tsx';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755638147956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,341 @@\n+import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n+import ChartLoader from 'src/components/ChartLoader.tsx';\n+\n+/**\n+ * Minimal types for the API payload we observed.\n+ */\n+type TweetAuthor = {\n+  id: string;\n+  username: string;\n+  name: string;\n+  profile_image_url?: string;\n+};\n+\n+type TweetMetrics = {\n+  retweet_count?: number;\n+  reply_count?: number;\n+  like_count?: number;\n+  quote_count?: number;\n+  bookmark_count?: number;\n+  impression_count?: number;\n+};\n+\n+type TweetEntitiesUrl = {\n+  url?: string;\n+  expanded_url?: string;\n+  display_url?: string;\n+  media_key?: string;\n+};\n+\n+type Tweet = {\n+  id: string;\n+  text: string;\n+  created_at: string;\n+  author_id: string;\n+  author: TweetAuthor;\n+  public_metrics?: TweetMetrics;\n+  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n+};\n+\n+type TweetsResponse = {\n+  is_enabled: boolean;\n+  tweets: Tweet[];\n+};\n+\n+type Props = {\n+  /** Solana mint address for the token (required by the API) */\n+  tokenAddress: string;\n+\n+  /**\n+   * Chain identifier.\n+   * We treat Solana as supported and everything else as \"coming soon\".\n+   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n+   */\n+  chainId: string | number;\n+\n+  /** Optional: override panel title (default: \"Twitter Feed\") */\n+  title?: string;\n+\n+  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n+  heightPx?: number;\n+\n+  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n+  refreshMs?: number;\n+\n+  /**\n+   * Optional: className hooks to better match your repo CSS quickly.\n+   * If your Security section uses particular classes, map them here.\n+   */\n+  classNames?: {\n+    root?: string;           // wrapper of the whole panel\n+    headerRow?: string;      // clickable header row container\n+    headerLeft?: string;     // title container\n+    headerRight?: string;    // right-aligned controls\n+    expandBtn?: string;      // toggle button\n+    content?: string;        // collapsible content container\n+    card?: string;           // tweet card wrapper\n+    authorRow?: string;      // author (avatar + names) row\n+    authorName?: string;     // author display name\n+    authorHandle?: string;   // @handle\n+    metaRow?: string;        // created_at + views\n+    text?: string;           // tweet text\n+    metricsRow?: string;     // likes/replies/etc row\n+    pill?: string;           // small status pill (for unavailable/soon)\n+  };\n+};\n+\n+/**\n+ * Loose detection for Solana.\n+ * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n+ */\n+function isSolana(chainId: Props[\"chainId\"]) {\n+  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n+  const v = String(chainId).toLowerCase();\n+  return v.includes(\"solana\") || v === \"sol\";\n+}\n+\n+const TwitterFeedPanel: React.FC<Props> = ({\n+  tokenAddress,\n+  chainId,\n+  title = \"Twitter Feed\",\n+  heightPx = 340,\n+  refreshMs = 90_000,\n+  classNames = {},\n+}) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const [loading, setLoading] = useState(false);\n+  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n+  const [data, setData] = useState<TweetsResponse | null>(null);\n+\n+  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n+\n+  const url = useMemo(() => {\n+    const u = new URL(\"https://screener-api.assetdash.com/moby_screener/tokens/tweets\");\n+    u.searchParams.set(\"token_address\", tokenAddress || \"\");\n+    u.searchParams.set(\"compact\", \"false\");\n+    return u.toString();\n+  }, [tokenAddress]);\n+\n+  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n+    if (!canShowFeed) {\n+      setErr(\"comingSoon\");\n+      setData(null);\n+      return;\n+    }\n+    setErr(null);\n+    setLoading(true);\n+    try {\n+      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n+      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n+      const json: TweetsResponse = await r.json();\n+\n+      if (!json?.is_enabled) {\n+        setErr(\"unavailable\");\n+        setData(null);\n+      } else if (!json.tweets || json.tweets.length === 0) {\n+        setErr(\"unavailable\");\n+        setData({ is_enabled: true, tweets: [] });\n+      } else {\n+        setData(json);\n+      }\n+    } catch (_e) {\n+      setErr(\"unavailable\");\n+      setData(null);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [url, canShowFeed]);\n+\n+  // Load on first expand, then poll while open (if refreshMs > 0)\n+  useEffect(() => {\n+    if (!expanded) return;\n+\n+    const ctrl = new AbortController();\n+    fetchTweets(ctrl.signal);\n+\n+    if (refreshMs > 0) {\n+      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n+      return () => {\n+        ctrl.abort();\n+        clearInterval(id);\n+      };\n+    }\n+    return () => ctrl.abort();\n+  }, [expanded, fetchTweets, refreshMs]);\n+\n+  // --- UI helpers\n+  const openTweet = (t: Tweet) =>\n+    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n+\n+  return (\n+    <div className={classNames.root ?? \"detail-panel\"}>\n+      {/* Header row (match your security section style) */}\n+      <div\n+        className={classNames.headerRow ?? \"detail-panel__row\"}\n+        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n+      >\n+        <div className={classNames.headerLeft ?? \"detail-panel__title\"} style={{ fontWeight: 600 }}>\n+          {title}\n+        </div>\n+        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n+          <button\n+            type=\"button\"\n+            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n+            onClick={() => setExpanded((v) => !v)}\n+            aria-expanded={expanded}\n+            aria-controls=\"twitter-feed-content\"\n+            title={expanded ? \"Collapse\" : \"Expand\"}\n+            style={{\n+              border: 0,\n+              background: \"transparent\",\n+              color: \"inherit\",\n+              cursor: \"pointer\",\n+              lineHeight: 0,\n+            }}\n+          >\n+            {/* simple chevron */}\n+            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n+              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n+            </svg>\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Collapsible content */}\n+      {expanded && (\n+        <div\n+          id=\"twitter-feed-content\"\n+          className={classNames.content ?? \"detail-panel__content\"}\n+          style={{\n+            position: \"relative\",\n+            padding: \"8px 0 0\",\n+          }}\n+        >\n+          {loading && <ChartLoader message=\"Loading feed…\" />}\n+\n+          {/* Coming soon / unavailable states */}\n+          {!loading && err === \"comingSoon\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n+            </div>\n+          )}\n+\n+          {!loading && err === \"unavailable\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n+            </div>\n+          )}\n+\n+          {/* Tweets list */}\n+          {!loading && !err && data?.tweets && (\n+            <div\n+              style={{\n+                maxHeight: heightPx,\n+                overflow: \"auto\",\n+                paddingRight: 4, // room for scrollbar\n+                display: \"grid\",\n+                gap: 8,\n+              }}\n+            >\n+              {data.tweets.map((t) => (\n+                <article\n+                  key={t.id}\n+                  className={classNames.card ?? \"card\"}\n+                  style={{\n+                    border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n+                    borderRadius: 12,\n+                    padding: 12,\n+                    background: \"var(--surface, rgba(255,255,255,0.02))\",\n+                  }}\n+                >\n+                  {/* Author */}\n+                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n+                    {t.author?.profile_image_url ? (\n+                      <img\n+                        src={t.author.profile_image_url}\n+                        alt={t.author?.name || t.author?.username}\n+                        width={26}\n+                        height={26}\n+                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n+                        loading=\"lazy\"\n+                      />\n+                    ) : (\n+                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n+                    )}\n+                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n+                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n+                        {t.author?.name || \"Unknown\"}\n+                      </div>\n+                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n+                        @{t.author?.username}\n+                      </div>\n+                    </div>\n+                  </div>\n+\n+                  {/* Text */}\n+                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n+                    {t.text}\n+                  </div>\n+\n+                  {/* URLs (simple list) */}\n+                  {!!t.entities?.urls?.length && (\n+                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n+                      {t.entities.urls.map((u, i) => {\n+                        const href = u.expanded_url || u.url;\n+                        if (!href) return null;\n+                        return (\n+                          <li key={i} style={{ fontSize: 12 }}>\n+                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n+                              {u.display_url || href}\n+                            </a>\n+                          </li>\n+                        );\n+                      })}\n+                    </ul>\n+                  )}\n+\n+                  {/* Meta: time + impressions */}\n+                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n+                    <span>{new Date(t.created_at).toLocaleString()}</span>\n+                    {typeof t.public_metrics?.impression_count === \"number\" && (\n+                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n+                    )}\n+                  </div>\n+\n+                  {/* Metrics */}\n+                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n+                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n+                  </div>\n+\n+                  {/* CTA */}\n+                  <div style={{ marginTop: 10 }}>\n+                    <button\n+                      type=\"button\"\n+                      onClick={() => openTweet(t)}\n+                      style={{\n+                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n+                        background: \"transparent\",\n+                        color: \"inherit\",\n+                        borderRadius: 8,\n+                        padding: \"6px 10px\",\n+                        fontSize: 12,\n+                        cursor: \"pointer\",\n+                      }}\n+                    >\n+                      Read on X\n+                    </button>\n+                  </div>\n+                </article>\n+              ))}\n+            </div>\n+          )}\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755638154096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n-import ChartLoader from 'src/components/ChartLoader.tsx';\n+import ChartLoader from './ChartLoader.tsx';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755638161103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n-import ChartLoader from './ChartLoader.tsx';\n+import ChartLoader from \"./ChartLoader\";\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n@@ -338,345 +338,4 @@\n   );\n };\n \n export default TwitterFeedPanel;\n-import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n-import ChartLoader from 'ChartLoader.tsx';\n-\n-/**\n- * Minimal types for the API payload we observed.\n- */\n-type TweetAuthor = {\n-  id: string;\n-  username: string;\n-  name: string;\n-  profile_image_url?: string;\n-};\n-\n-type TweetMetrics = {\n-  retweet_count?: number;\n-  reply_count?: number;\n-  like_count?: number;\n-  quote_count?: number;\n-  bookmark_count?: number;\n-  impression_count?: number;\n-};\n-\n-type TweetEntitiesUrl = {\n-  url?: string;\n-  expanded_url?: string;\n-  display_url?: string;\n-  media_key?: string;\n-};\n-\n-type Tweet = {\n-  id: string;\n-  text: string;\n-  created_at: string;\n-  author_id: string;\n-  author: TweetAuthor;\n-  public_metrics?: TweetMetrics;\n-  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n-};\n-\n-type TweetsResponse = {\n-  is_enabled: boolean;\n-  tweets: Tweet[];\n-};\n-\n-type Props = {\n-  /** Solana mint address for the token (required by the API) */\n-  tokenAddress: string;\n-\n-  /**\n-   * Chain identifier.\n-   * We treat Solana as supported and everything else as \"coming soon\".\n-   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n-   */\n-  chainId: string | number;\n-\n-  /** Optional: override panel title (default: \"Twitter Feed\") */\n-  title?: string;\n-\n-  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n-  heightPx?: number;\n-\n-  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n-  refreshMs?: number;\n-\n-  /**\n-   * Optional: className hooks to better match your repo CSS quickly.\n-   * If your Security section uses particular classes, map them here.\n-   */\n-  classNames?: {\n-    root?: string;           // wrapper of the whole panel\n-    headerRow?: string;      // clickable header row container\n-    headerLeft?: string;     // title container\n-    headerRight?: string;    // right-aligned controls\n-    expandBtn?: string;      // toggle button\n-    content?: string;        // collapsible content container\n-    card?: string;           // tweet card wrapper\n-    authorRow?: string;      // author (avatar + names) row\n-    authorName?: string;     // author display name\n-    authorHandle?: string;   // @handle\n-    metaRow?: string;        // created_at + views\n-    text?: string;           // tweet text\n-    metricsRow?: string;     // likes/replies/etc row\n-    pill?: string;           // small status pill (for unavailable/soon)\n-  };\n-};\n-\n-/**\n- * Loose detection for Solana.\n- * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n- */\n-function isSolana(chainId: Props[\"chainId\"]) {\n-  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n-  const v = String(chainId).toLowerCase();\n-  return v.includes(\"solana\") || v === \"sol\";\n-}\n-\n-const TwitterFeedPanel: React.FC<Props> = ({\n-  tokenAddress,\n-  chainId,\n-  title = \"Twitter Feed\",\n-  heightPx = 340,\n-  refreshMs = 90_000,\n-  classNames = {},\n-}) => {\n-  const [expanded, setExpanded] = useState(false);\n-  const [loading, setLoading] = useState(false);\n-  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n-  const [data, setData] = useState<TweetsResponse | null>(null);\n-\n-  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n-\n-  const url = useMemo(() => {\n-    const u = new URL(\"https://screener-api.assetdash.com/moby_screener/tokens/tweets\");\n-    u.searchParams.set(\"token_address\", tokenAddress || \"\");\n-    u.searchParams.set(\"compact\", \"false\");\n-    return u.toString();\n-  }, [tokenAddress]);\n-\n-  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n-    if (!canShowFeed) {\n-      setErr(\"comingSoon\");\n-      setData(null);\n-      return;\n-    }\n-    setErr(null);\n-    setLoading(true);\n-    try {\n-      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n-      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n-      const json: TweetsResponse = await r.json();\n-\n-      if (!json?.is_enabled) {\n-        setErr(\"unavailable\");\n-        setData(null);\n-      } else if (!json.tweets || json.tweets.length === 0) {\n-        setErr(\"unavailable\");\n-        setData({ is_enabled: true, tweets: [] });\n-      } else {\n-        setData(json);\n-      }\n-    } catch (_e) {\n-      setErr(\"unavailable\");\n-      setData(null);\n-    } finally {\n-      setLoading(false);\n-    }\n-  }, [url, canShowFeed]);\n-\n-  // Load on first expand, then poll while open (if refreshMs > 0)\n-  useEffect(() => {\n-    if (!expanded) return;\n-\n-    const ctrl = new AbortController();\n-    fetchTweets(ctrl.signal);\n-\n-    if (refreshMs > 0) {\n-      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n-      return () => {\n-        ctrl.abort();\n-        clearInterval(id);\n-      };\n-    }\n-    return () => ctrl.abort();\n-  }, [expanded, fetchTweets, refreshMs]);\n-\n-  // --- UI helpers\n-  const openTweet = (t: Tweet) =>\n-    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n-\n-  return (\n-    <div className={classNames.root ?? \"detail-panel\"}>\n-      {/* Header row (match your security section style) */}\n-      <div\n-        className={classNames.headerRow ?? \"detail-panel__row\"}\n-        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n-      >\n-        <div className={classNames.headerLeft ?? \"detail-panel__title\"} style={{ fontWeight: 600 }}>\n-          {title}\n-        </div>\n-        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n-          <button\n-            type=\"button\"\n-            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n-            onClick={() => setExpanded((v) => !v)}\n-            aria-expanded={expanded}\n-            aria-controls=\"twitter-feed-content\"\n-            title={expanded ? \"Collapse\" : \"Expand\"}\n-            style={{\n-              border: 0,\n-              background: \"transparent\",\n-              color: \"inherit\",\n-              cursor: \"pointer\",\n-              lineHeight: 0,\n-            }}\n-          >\n-            {/* simple chevron */}\n-            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n-              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n-            </svg>\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Collapsible content */}\n-      {expanded && (\n-        <div\n-          id=\"twitter-feed-content\"\n-          className={classNames.content ?? \"detail-panel__content\"}\n-          style={{\n-            position: \"relative\",\n-            padding: \"8px 0 0\",\n-          }}\n-        >\n-          {loading && <ChartLoader message=\"Loading feed…\" />}\n-\n-          {/* Coming soon / unavailable states */}\n-          {!loading && err === \"comingSoon\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n-            </div>\n-          )}\n-\n-          {!loading && err === \"unavailable\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n-            </div>\n-          )}\n-\n-          {/* Tweets list */}\n-          {!loading && !err && data?.tweets && (\n-            <div\n-              style={{\n-                maxHeight: heightPx,\n-                overflow: \"auto\",\n-                paddingRight: 4, // room for scrollbar\n-                display: \"grid\",\n-                gap: 8,\n-              }}\n-            >\n-              {data.tweets.map((t) => (\n-                <article\n-                  key={t.id}\n-                  className={classNames.card ?? \"card\"}\n-                  style={{\n-                    border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n-                    borderRadius: 12,\n-                    padding: 12,\n-                    background: \"var(--surface, rgba(255,255,255,0.02))\",\n-                  }}\n-                >\n-                  {/* Author */}\n-                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n-                    {t.author?.profile_image_url ? (\n-                      <img\n-                        src={t.author.profile_image_url}\n-                        alt={t.author?.name || t.author?.username}\n-                        width={26}\n-                        height={26}\n-                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n-                        loading=\"lazy\"\n-                      />\n-                    ) : (\n-                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n-                    )}\n-                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n-                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n-                        {t.author?.name || \"Unknown\"}\n-                      </div>\n-                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n-                        @{t.author?.username}\n-                      </div>\n-                    </div>\n-                  </div>\n-\n-                  {/* Text */}\n-                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n-                    {t.text}\n-                  </div>\n-\n-                  {/* URLs (simple list) */}\n-                  {!!t.entities?.urls?.length && (\n-                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n-                      {t.entities.urls.map((u, i) => {\n-                        const href = u.expanded_url || u.url;\n-                        if (!href) return null;\n-                        return (\n-                          <li key={i} style={{ fontSize: 12 }}>\n-                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n-                              {u.display_url || href}\n-                            </a>\n-                          </li>\n-                        );\n-                      })}\n-                    </ul>\n-                  )}\n-\n-                  {/* Meta: time + impressions */}\n-                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n-                    <span>{new Date(t.created_at).toLocaleString()}</span>\n-                    {typeof t.public_metrics?.impression_count === \"number\" && (\n-                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n-                    )}\n-                  </div>\n-\n-                  {/* Metrics */}\n-                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n-                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n-                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n-                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n-                  </div>\n-\n-                  {/* CTA */}\n-                  <div style={{ marginTop: 10 }}>\n-                    <button\n-                      type=\"button\"\n-                      onClick={() => openTweet(t)}\n-                      style={{\n-                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n-                        background: \"transparent\",\n-                        color: \"inherit\",\n-                        borderRadius: 8,\n-                        padding: \"6px 10px\",\n-                        fontSize: 12,\n-                        cursor: \"pointer\",\n-                      }}\n-                    >\n-                      Read on X\n-                    </button>\n-                  </div>\n-                </article>\n-              ))}\n-            </div>\n-          )}\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755638185797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n+import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n \n /**\n  * Minimal types for the API payload we observed.\n"
                },
                {
                    "date": 1755665704073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,11 +109,11 @@\n \n   const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n \n   const url = useMemo(() => {\n-    const u = new URL(\"https://screener-api.assetdash.com/moby_screener/tokens/tweets\");\n-    u.searchParams.set(\"token_address\", tokenAddress || \"\");\n-    u.searchParams.set(\"compact\", \"false\");\n+    const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n+u.searchParams.set(\"token_address\", tokenAddress);\n+u.searchParams.set(\"compact\", \"false\");\n     return u.toString();\n   }, [tokenAddress]);\n \n   const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n"
                },
                {
                    "date": 1755666162641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,10 +110,10 @@\n   const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n \n   const url = useMemo(() => {\n     const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n-u.searchParams.set(\"token_address\", tokenAddress);\n-u.searchParams.set(\"compact\", \"false\");\n+    u.searchParams.set(\"token_address\", tokenAddress);\n+    u.searchParams.set(\"compact\", \"false\");\n     return u.toString();\n   }, [tokenAddress]);\n \n   const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n@@ -337,5 +337,7 @@\n     </div>\n   );\n };\n \n+\n+\n export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755666166224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,7 +337,52 @@\n     </div>\n   );\n };\n \n+return (\n+    <div className=\"security-section\">\n+      {/* Header row (collapsed view) */}\n+      <div className=\"security-row\">\n+        <div className=\"security-name\">\n+          <span>Twitter Feed</span>\n+        </div>\n+        <div className=\"security-result\">\n+          {/* Expand/collapse toggle */}\n+          <button \n+            className=\"security-expand\" \n+            onClick={() => setExpanded(prev => !prev)}\n+            aria-label=\"Toggle Twitter feed\"\n+          >\n+            <ExpandMoreIcon sx={{ fontSize: 16 }} />\n+          </button>\n+        </div>\n+      </div>\n \n+      {/* Expandable content */}\n+      {expanded && (\n+        <div className=\"twitter-feed-content\" style={{ position: 'relative', paddingBottom: '8px' }}>\n+          {/* Loader animation while tweets load */}\n+          {loading && <ChartLoader message=\"Loading feed...\" />}\n \n+          {/* \"Coming soon\" message for unsupported chains */}\n+          {feedError === 'comingSoon' && (\n+            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n+              <span className=\"security-status pending\">Feed is coming soon.</span>\n+            </div>\n+          )}\n+\n+          {/* \"Unavailable\" message for errors/no-data */}\n+          {feedError === 'unavailable' && (\n+            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n+              <span className=\"security-status pending\">Feed is unavailable.</span>\n+            </div>\n+          )}\n+\n+          {/* Container for the embedded Twitter timeline */}\n+          <div ref={containerRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755666195014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,52 +337,5 @@\n     </div>\n   );\n };\n \n-return (\n-    <div className=\"security-section\">\n-      {/* Header row (collapsed view) */}\n-      <div className=\"security-row\">\n-        <div className=\"security-name\">\n-          <span>Twitter Feed</span>\n-        </div>\n-        <div className=\"security-result\">\n-          {/* Expand/collapse toggle */}\n-          <button \n-            className=\"security-expand\" \n-            onClick={() => setExpanded(prev => !prev)}\n-            aria-label=\"Toggle Twitter feed\"\n-          >\n-            <ExpandMoreIcon sx={{ fontSize: 16 }} />\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Expandable content */}\n-      {expanded && (\n-        <div className=\"twitter-feed-content\" style={{ position: 'relative', paddingBottom: '8px' }}>\n-          {/* Loader animation while tweets load */}\n-          {loading && <ChartLoader message=\"Loading feed...\" />}\n-\n-          {/* \"Coming soon\" message for unsupported chains */}\n-          {feedError === 'comingSoon' && (\n-            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n-              <span className=\"security-status pending\">Feed is coming soon.</span>\n-            </div>\n-          )}\n-\n-          {/* \"Unavailable\" message for errors/no-data */}\n-          {feedError === 'unavailable' && (\n-            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n-              <span className=\"security-status pending\">Feed is unavailable.</span>\n-            </div>\n-          )}\n-\n-          {/* Container for the embedded Twitter timeline */}\n-          <div ref={containerRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755666209261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n     window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n \n   return (\n     <div className={classNames.root ?? \"detail-panel\"}>\n-      {/* Header row (match your security section style) */}\n+      {/* Header row (nned to match your security section style) */}\n       <div\n         className={classNames.headerRow ?? \"detail-panel__row\"}\n         style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n       >\n"
                },
                {
                    "date": 1755666220783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n     window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n \n   return (\n     <div className={classNames.root ?? \"detail-panel\"}>\n-      {/* Header row (nned to match your security section style) */}\n+      {/* Header row (need to match security section style) */}\n       <div\n         className={classNames.headerRow ?? \"detail-panel__row\"}\n         style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n       >\n"
                },
                {
                    "date": 1755666429461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n   const openTweet = (t: Tweet) =>\n     window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n \n   return (\n-    <div className={classNames.root ?? \"detail-panel\"}>\n+    <div className={classNames.root ?? \"security-section\"}>\n       {/* Header row (need to match security section style) */}\n       <div\n         className={classNames.headerRow ?? \"detail-panel__row\"}\n         style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n"
                },
                {
                    "date": 1755666930967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n       <div\n         className={classNames.headerRow ?? \"detail-panel__row\"}\n         style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n       >\n-        <div className={classNames.headerLeft ?? \"detail-panel__title\"} style={{ fontWeight: 600 }}>\n+        <div className={classNames.headerLeft ?? \"tweets \"} style={{ fontWeight: 600 }}>\n           {title}\n         </div>\n         <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n           <button\n"
                },
                {
                    "date": 1755666941265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n       <div\n         className={classNames.headerRow ?? \"detail-panel__row\"}\n         style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n       >\n-        <div className={classNames.headerLeft ?? \"tweets \"} style={{ fontWeight: 600 }}>\n+        <div className={classNames.headerLeft ?? \"tweets-name\"} >\n           {title}\n         </div>\n         <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n           <button\n"
                },
                {
                    "date": 1755667091977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,341 @@\n+import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n+import ChartLoader from \"./ChartLoader\";\n+\n+/**\n+ * Minimal types for the API payload we observed.\n+ */\n+type TweetAuthor = {\n+  id: string;\n+  username: string;\n+  name: string;\n+  profile_image_url?: string;\n+};\n+\n+type TweetMetrics = {\n+  retweet_count?: number;\n+  reply_count?: number;\n+  like_count?: number;\n+  quote_count?: number;\n+  bookmark_count?: number;\n+  impression_count?: number;\n+};\n+\n+type TweetEntitiesUrl = {\n+  url?: string;\n+  expanded_url?: string;\n+  display_url?: string;\n+  media_key?: string;\n+};\n+\n+type Tweet = {\n+  id: string;\n+  text: string;\n+  created_at: string;\n+  author_id: string;\n+  author: TweetAuthor;\n+  public_metrics?: TweetMetrics;\n+  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n+};\n+\n+type TweetsResponse = {\n+  is_enabled: boolean;\n+  tweets: Tweet[];\n+};\n+\n+type Props = {\n+  /** Solana mint address for the token (required by the API) */\n+  tokenAddress: string;\n+\n+  /**\n+   * Chain identifier.\n+   * We treat Solana as supported and everything else as \"coming soon\".\n+   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n+   */\n+  chainId: string | number;\n+\n+  /** Optional: override panel title (default: \"Twitter Feed\") */\n+  title?: string;\n+\n+  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n+  heightPx?: number;\n+\n+  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n+  refreshMs?: number;\n+\n+  /**\n+   * Optional: className hooks to better match your repo CSS quickly.\n+   * If your Security section uses particular classes, map them here.\n+   */\n+  classNames?: {\n+    root?: string;           // wrapper of the whole panel\n+    headerRow?: string;      // clickable header row container\n+    headerLeft?: string;     // title container\n+    headerRight?: string;    // right-aligned controls\n+    expandBtn?: string;      // toggle button\n+    content?: string;        // collapsible content container\n+    card?: string;           // tweet card wrapper\n+    authorRow?: string;      // author (avatar + names) row\n+    authorName?: string;     // author display name\n+    authorHandle?: string;   // @handle\n+    metaRow?: string;        // created_at + views\n+    text?: string;           // tweet text\n+    metricsRow?: string;     // likes/replies/etc row\n+    pill?: string;           // small status pill (for unavailable/soon)\n+  };\n+};\n+\n+/**\n+ * Loose detection for Solana.\n+ * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n+ */\n+function isSolana(chainId: Props[\"chainId\"]) {\n+  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n+  const v = String(chainId).toLowerCase();\n+  return v.includes(\"solana\") || v === \"sol\";\n+}\n+\n+const TwitterFeedPanel: React.FC<Props> = ({\n+  tokenAddress,\n+  chainId,\n+  title = \"Twitter Feed\",\n+  heightPx = 340,\n+  refreshMs = 90_000,\n+  classNames = {},\n+}) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const [loading, setLoading] = useState(false);\n+  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n+  const [data, setData] = useState<TweetsResponse | null>(null);\n+\n+  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n+\n+  const url = useMemo(() => {\n+    const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n+    u.searchParams.set(\"token_address\", tokenAddress);\n+    u.searchParams.set(\"compact\", \"false\");\n+    return u.toString();\n+  }, [tokenAddress]);\n+\n+  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n+    if (!canShowFeed) {\n+      setErr(\"comingSoon\");\n+      setData(null);\n+      return;\n+    }\n+    setErr(null);\n+    setLoading(true);\n+    try {\n+      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n+      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n+      const json: TweetsResponse = await r.json();\n+\n+      if (!json?.is_enabled) {\n+        setErr(\"unavailable\");\n+        setData(null);\n+      } else if (!json.tweets || json.tweets.length === 0) {\n+        setErr(\"unavailable\");\n+        setData({ is_enabled: true, tweets: [] });\n+      } else {\n+        setData(json);\n+      }\n+    } catch (_e) {\n+      setErr(\"unavailable\");\n+      setData(null);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [url, canShowFeed]);\n+\n+  // Load on first expand, then poll while open (if refreshMs > 0)\n+  useEffect(() => {\n+    if (!expanded) return;\n+\n+    const ctrl = new AbortController();\n+    fetchTweets(ctrl.signal);\n+\n+    if (refreshMs > 0) {\n+      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n+      return () => {\n+        ctrl.abort();\n+        clearInterval(id);\n+      };\n+    }\n+    return () => ctrl.abort();\n+  }, [expanded, fetchTweets, refreshMs]);\n+\n+  // --- UI helpers\n+  const openTweet = (t: Tweet) =>\n+    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n+\n+  return (\n+    <div className={classNames.root ?? \"security-section\"}>\n+      {/* Header row (need to match security section style) */}\n+      <div\n+        className={classNames.headerRow ?? \"detail-panel__row\"}\n+        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n+      >\n+        <div className={classNames.headerLeft ?? \"tweets-name\"}>\n+          {title}\n+        </div>\n+        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n+          <button\n+            type=\"button\"\n+            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n+            onClick={() => setExpanded((v) => !v)}\n+            aria-expanded={expanded}\n+            aria-controls=\"twitter-feed-content\"\n+            title={expanded ? \"Collapse\" : \"Expand\"}\n+            style={{\n+              border: 0,\n+              background: \"transparent\",\n+              color: \"inherit\",\n+              cursor: \"pointer\",\n+              lineHeight: 0,\n+            }}\n+          >\n+            {/* simple chevron */}\n+            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n+              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n+            </svg>\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Collapsible content */}\n+      {expanded && (\n+        <div\n+          id=\"twitter-feed-content\"\n+          className={classNames.content ?? \"detail-panel__content\"}\n+          style={{\n+            position: \"relative\",\n+            padding: \"8px 0 0\",\n+          }}\n+        >\n+          {loading && <ChartLoader message=\"Loading feed…\" />}\n+\n+          {/* Coming soon / unavailable states */}\n+          {!loading && err === \"comingSoon\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n+            </div>\n+          )}\n+\n+          {!loading && err === \"unavailable\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n+            </div>\n+          )}\n+\n+          {/* Tweets list */}\n+          {!loading && !err && data?.tweets && (\n+            <div\n+              style={{\n+                maxHeight: heightPx,\n+                overflow: \"scroll\",\n+                paddingRight: 4, // room for scrollbar\n+                display: \"grid\",\n+                gap: 8,\n+              }}\n+            >\n+              {data.tweets.map((t) => (\n+                <article\n+                  key={t.id}\n+                  className={classNames.card ?? \"card\"}\n+                  style={{\n+                    border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n+                    borderRadius: 12,\n+                    padding: 12,\n+                    background: \"var(--surface, rgba(255,255,255,0.02))\",\n+                  }}\n+                >\n+                  {/* Author */}\n+                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n+                    {t.author?.profile_image_url ? (\n+                      <img\n+                        src={t.author.profile_image_url}\n+                        alt={t.author?.name || t.author?.username}\n+                        width={26}\n+                        height={26}\n+                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n+                        loading=\"lazy\"\n+                      />\n+                    ) : (\n+                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n+                    )}\n+                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n+                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n+                        {t.author?.name || \"Unknown\"}\n+                      </div>\n+                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n+                        @{t.author?.username}\n+                      </div>\n+                    </div>\n+                  </div>\n+\n+                  {/* Text */}\n+                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n+                    {t.text}\n+                  </div>\n+\n+                  {/* URLs (simple list) */}\n+                  {!!t.entities?.urls?.length && (\n+                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n+                      {t.entities.urls.map((u, i) => {\n+                        const href = u.expanded_url || u.url;\n+                        if (!href) return null;\n+                        return (\n+                          <li key={i} style={{ fontSize: 12 }}>\n+                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n+                              {u.display_url || href}\n+                            </a>\n+                          </li>\n+                        );\n+                      })}\n+                    </ul>\n+                  )}\n+\n+                  {/* Meta: time + impressions */}\n+                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n+                    <span>{new Date(t.created_at).toLocaleString()}</span>\n+                    {typeof t.public_metrics?.impression_count === \"number\" && (\n+                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n+                    )}\n+                  </div>\n+\n+                  {/* Metrics */}\n+                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n+                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n+                  </div>\n+\n+                  {/* CTA */}\n+                  <div style={{ marginTop: 10 }}>\n+                    <button\n+                      type=\"button\"\n+                      onClick={() => openTweet(t)}\n+                      style={{\n+                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n+                        background: \"transparent\",\n+                        color: \"inherit\",\n+                        borderRadius: 8,\n+                        padding: \"6px 10px\",\n+                        fontSize: 12,\n+                        cursor: \"pointer\",\n+                      }}\n+                    >\n+                      Read on X\n+                    </button>\n+                  </div>\n+                </article>\n+              ))}\n+            </div>\n+          )}\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755667107011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,8 @@\n             <div\n               style={{\n                 maxHeight: heightPx,\n                 overflow: \"scroll\",\n-                paddingRight: 4, // room for scrollbar\n                 display: \"grid\",\n                 gap: 8,\n               }}\n             >\n@@ -338,345 +337,4 @@\n   );\n };\n \n export default TwitterFeedPanel;\n-import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n-import ChartLoader from \"./ChartLoader\";\n-\n-/**\n- * Minimal types for the API payload we observed.\n- */\n-type TweetAuthor = {\n-  id: string;\n-  username: string;\n-  name: string;\n-  profile_image_url?: string;\n-};\n-\n-type TweetMetrics = {\n-  retweet_count?: number;\n-  reply_count?: number;\n-  like_count?: number;\n-  quote_count?: number;\n-  bookmark_count?: number;\n-  impression_count?: number;\n-};\n-\n-type TweetEntitiesUrl = {\n-  url?: string;\n-  expanded_url?: string;\n-  display_url?: string;\n-  media_key?: string;\n-};\n-\n-type Tweet = {\n-  id: string;\n-  text: string;\n-  created_at: string;\n-  author_id: string;\n-  author: TweetAuthor;\n-  public_metrics?: TweetMetrics;\n-  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n-};\n-\n-type TweetsResponse = {\n-  is_enabled: boolean;\n-  tweets: Tweet[];\n-};\n-\n-type Props = {\n-  /** Solana mint address for the token (required by the API) */\n-  tokenAddress: string;\n-\n-  /**\n-   * Chain identifier.\n-   * We treat Solana as supported and everything else as \"coming soon\".\n-   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n-   */\n-  chainId: string | number;\n-\n-  /** Optional: override panel title (default: \"Twitter Feed\") */\n-  title?: string;\n-\n-  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n-  heightPx?: number;\n-\n-  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n-  refreshMs?: number;\n-\n-  /**\n-   * Optional: className hooks to better match your repo CSS quickly.\n-   * If your Security section uses particular classes, map them here.\n-   */\n-  classNames?: {\n-    root?: string;           // wrapper of the whole panel\n-    headerRow?: string;      // clickable header row container\n-    headerLeft?: string;     // title container\n-    headerRight?: string;    // right-aligned controls\n-    expandBtn?: string;      // toggle button\n-    content?: string;        // collapsible content container\n-    card?: string;           // tweet card wrapper\n-    authorRow?: string;      // author (avatar + names) row\n-    authorName?: string;     // author display name\n-    authorHandle?: string;   // @handle\n-    metaRow?: string;        // created_at + views\n-    text?: string;           // tweet text\n-    metricsRow?: string;     // likes/replies/etc row\n-    pill?: string;           // small status pill (for unavailable/soon)\n-  };\n-};\n-\n-/**\n- * Loose detection for Solana.\n- * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n- */\n-function isSolana(chainId: Props[\"chainId\"]) {\n-  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n-  const v = String(chainId).toLowerCase();\n-  return v.includes(\"solana\") || v === \"sol\";\n-}\n-\n-const TwitterFeedPanel: React.FC<Props> = ({\n-  tokenAddress,\n-  chainId,\n-  title = \"Twitter Feed\",\n-  heightPx = 340,\n-  refreshMs = 90_000,\n-  classNames = {},\n-}) => {\n-  const [expanded, setExpanded] = useState(false);\n-  const [loading, setLoading] = useState(false);\n-  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n-  const [data, setData] = useState<TweetsResponse | null>(null);\n-\n-  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n-\n-  const url = useMemo(() => {\n-    const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n-    u.searchParams.set(\"token_address\", tokenAddress);\n-    u.searchParams.set(\"compact\", \"false\");\n-    return u.toString();\n-  }, [tokenAddress]);\n-\n-  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n-    if (!canShowFeed) {\n-      setErr(\"comingSoon\");\n-      setData(null);\n-      return;\n-    }\n-    setErr(null);\n-    setLoading(true);\n-    try {\n-      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n-      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n-      const json: TweetsResponse = await r.json();\n-\n-      if (!json?.is_enabled) {\n-        setErr(\"unavailable\");\n-        setData(null);\n-      } else if (!json.tweets || json.tweets.length === 0) {\n-        setErr(\"unavailable\");\n-        setData({ is_enabled: true, tweets: [] });\n-      } else {\n-        setData(json);\n-      }\n-    } catch (_e) {\n-      setErr(\"unavailable\");\n-      setData(null);\n-    } finally {\n-      setLoading(false);\n-    }\n-  }, [url, canShowFeed]);\n-\n-  // Load on first expand, then poll while open (if refreshMs > 0)\n-  useEffect(() => {\n-    if (!expanded) return;\n-\n-    const ctrl = new AbortController();\n-    fetchTweets(ctrl.signal);\n-\n-    if (refreshMs > 0) {\n-      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n-      return () => {\n-        ctrl.abort();\n-        clearInterval(id);\n-      };\n-    }\n-    return () => ctrl.abort();\n-  }, [expanded, fetchTweets, refreshMs]);\n-\n-  // --- UI helpers\n-  const openTweet = (t: Tweet) =>\n-    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n-\n-  return (\n-    <div className={classNames.root ?? \"security-section\"}>\n-      {/* Header row (need to match security section style) */}\n-      <div\n-        className={classNames.headerRow ?? \"detail-panel__row\"}\n-        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n-      >\n-        <div className={classNames.headerLeft ?? \"tweets-name\"} >\n-          {title}\n-        </div>\n-        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n-          <button\n-            type=\"button\"\n-            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n-            onClick={() => setExpanded((v) => !v)}\n-            aria-expanded={expanded}\n-            aria-controls=\"twitter-feed-content\"\n-            title={expanded ? \"Collapse\" : \"Expand\"}\n-            style={{\n-              border: 0,\n-              background: \"transparent\",\n-              color: \"inherit\",\n-              cursor: \"pointer\",\n-              lineHeight: 0,\n-            }}\n-          >\n-            {/* simple chevron */}\n-            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n-              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n-            </svg>\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Collapsible content */}\n-      {expanded && (\n-        <div\n-          id=\"twitter-feed-content\"\n-          className={classNames.content ?? \"detail-panel__content\"}\n-          style={{\n-            position: \"relative\",\n-            padding: \"8px 0 0\",\n-          }}\n-        >\n-          {loading && <ChartLoader message=\"Loading feed…\" />}\n-\n-          {/* Coming soon / unavailable states */}\n-          {!loading && err === \"comingSoon\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n-            </div>\n-          )}\n-\n-          {!loading && err === \"unavailable\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n-            </div>\n-          )}\n-\n-          {/* Tweets list */}\n-          {!loading && !err && data?.tweets && (\n-            <div\n-              style={{\n-                maxHeight: heightPx,\n-                overflow: \"auto\",\n-                paddingRight: 4, // room for scrollbar\n-                display: \"grid\",\n-                gap: 8,\n-              }}\n-            >\n-              {data.tweets.map((t) => (\n-                <article\n-                  key={t.id}\n-                  className={classNames.card ?? \"card\"}\n-                  style={{\n-                    border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n-                    borderRadius: 12,\n-                    padding: 12,\n-                    background: \"var(--surface, rgba(255,255,255,0.02))\",\n-                  }}\n-                >\n-                  {/* Author */}\n-                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n-                    {t.author?.profile_image_url ? (\n-                      <img\n-                        src={t.author.profile_image_url}\n-                        alt={t.author?.name || t.author?.username}\n-                        width={26}\n-                        height={26}\n-                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n-                        loading=\"lazy\"\n-                      />\n-                    ) : (\n-                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n-                    )}\n-                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n-                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n-                        {t.author?.name || \"Unknown\"}\n-                      </div>\n-                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n-                        @{t.author?.username}\n-                      </div>\n-                    </div>\n-                  </div>\n-\n-                  {/* Text */}\n-                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n-                    {t.text}\n-                  </div>\n-\n-                  {/* URLs (simple list) */}\n-                  {!!t.entities?.urls?.length && (\n-                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n-                      {t.entities.urls.map((u, i) => {\n-                        const href = u.expanded_url || u.url;\n-                        if (!href) return null;\n-                        return (\n-                          <li key={i} style={{ fontSize: 12 }}>\n-                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n-                              {u.display_url || href}\n-                            </a>\n-                          </li>\n-                        );\n-                      })}\n-                    </ul>\n-                  )}\n-\n-                  {/* Meta: time + impressions */}\n-                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n-                    <span>{new Date(t.created_at).toLocaleString()}</span>\n-                    {typeof t.public_metrics?.impression_count === \"number\" && (\n-                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n-                    )}\n-                  </div>\n-\n-                  {/* Metrics */}\n-                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n-                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n-                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n-                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n-                  </div>\n-\n-                  {/* CTA */}\n-                  <div style={{ marginTop: 10 }}>\n-                    <button\n-                      type=\"button\"\n-                      onClick={() => openTweet(t)}\n-                      style={{\n-                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n-                        background: \"transparent\",\n-                        color: \"inherit\",\n-                        borderRadius: 8,\n-                        padding: \"6px 10px\",\n-                        fontSize: 12,\n-                        cursor: \"pointer\",\n-                      }}\n-                    >\n-                      Read on X\n-                    </button>\n-                  </div>\n-                </article>\n-              ))}\n-            </div>\n-          )}\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755667218765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n                   style={{\n                     border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n                     borderRadius: 12,\n                     padding: 12,\n-                    background: \"var(--surface, rgba(255,255,255,0.02))\",\n+                  \n                   }}\n                 >\n                   {/* Author */}\n                   <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n"
                },
                {
                    "date": 1755667227188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,12 +240,10 @@\n                 <article\n                   key={t.id}\n                   className={classNames.card ?? \"card\"}\n                   style={{\n-                    border: \"1px solid var(--border, rgba(255,255,255,0.08))\",\n                     borderRadius: 12,\n                     padding: 12,\n-                  \n                   }}\n                 >\n                   {/* Author */}\n                   <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n"
                },
                {
                    "date": 1755667298068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,8 +242,9 @@\n                   className={classNames.card ?? \"card\"}\n                   style={{\n                     borderRadius: 12,\n                     padding: 12,\n+                    \n                   }}\n                 >\n                   {/* Author */}\n                   <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n"
                },
                {
                    "date": 1755667316158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n                   className={classNames.card ?? \"card\"}\n                   style={{\n                     borderRadius: 12,\n                     padding: 12,\n-                    \n+                    background: \"var(--bg-elev-2)\",\n                   }}\n                 >\n                   {/* Author */}\n                   <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n"
                },
                {
                    "date": 1755667398367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n+import ChartLoader from \"./ChartLoader\";\n+import \n+\n+/**\n+ * Minimal types for the API payload we observed.\n+ */\n+type TweetAuthor = {\n+  id: string;\n+  username: string;\n+  name: string;\n+  profile_image_url?: string;\n+};\n+\n+type TweetMetrics = {\n+  retweet_count?: number;\n+  reply_count?: number;\n+  like_count?: number;\n+  quote_count?: number;\n+  bookmark_count?: number;\n+  impression_count?: number;\n+};\n+\n+type TweetEntitiesUrl = {\n+  url?: string;\n+  expanded_url?: string;\n+  display_url?: string;\n+  media_key?: string;\n+};\n+\n+type Tweet = {\n+  id: string;\n+  text: string;\n+  created_at: string;\n+  author_id: string;\n+  author: TweetAuthor;\n+  public_metrics?: TweetMetrics;\n+  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n+};\n+\n+type TweetsResponse = {\n+  is_enabled: boolean;\n+  tweets: Tweet[];\n+};\n+\n+type Props = {\n+  /** Solana mint address for the token (required by the API) */\n+  tokenAddress: string;\n+\n+  /**\n+   * Chain identifier.\n+   * We treat Solana as supported and everything else as \"coming soon\".\n+   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n+   */\n+  chainId: string | number;\n+\n+  /** Optional: override panel title (default: \"Twitter Feed\") */\n+  title?: string;\n+\n+  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n+  heightPx?: number;\n+\n+  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n+  refreshMs?: number;\n+\n+  /**\n+   * Optional: className hooks to better match your repo CSS quickly.\n+   * If your Security section uses particular classes, map them here.\n+   */\n+  classNames?: {\n+    root?: string;           // wrapper of the whole panel\n+    headerRow?: string;      // clickable header row container\n+    headerLeft?: string;     // title container\n+    headerRight?: string;    // right-aligned controls\n+    expandBtn?: string;      // toggle button\n+    content?: string;        // collapsible content container\n+    card?: string;           // tweet card wrapper\n+    authorRow?: string;      // author (avatar + names) row\n+    authorName?: string;     // author display name\n+    authorHandle?: string;   // @handle\n+    metaRow?: string;        // created_at + views\n+    text?: string;           // tweet text\n+    metricsRow?: string;     // likes/replies/etc row\n+    pill?: string;           // small status pill (for unavailable/soon)\n+  };\n+};\n+\n+/**\n+ * Loose detection for Solana.\n+ * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n+ */\n+function isSolana(chainId: Props[\"chainId\"]) {\n+  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n+  const v = String(chainId).toLowerCase();\n+  return v.includes(\"solana\") || v === \"sol\";\n+}\n+\n+const TwitterFeedPanel: React.FC<Props> = ({\n+  tokenAddress,\n+  chainId,\n+  title = \"Twitter Feed\",\n+  heightPx = 340,\n+  refreshMs = 90_000,\n+  classNames = {},\n+}) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const [loading, setLoading] = useState(false);\n+  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n+  const [data, setData] = useState<TweetsResponse | null>(null);\n+\n+  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n+\n+  const url = useMemo(() => {\n+    const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n+    u.searchParams.set(\"token_address\", tokenAddress);\n+    u.searchParams.set(\"compact\", \"false\");\n+    return u.toString();\n+  }, [tokenAddress]);\n+\n+  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n+    if (!canShowFeed) {\n+      setErr(\"comingSoon\");\n+      setData(null);\n+      return;\n+    }\n+    setErr(null);\n+    setLoading(true);\n+    try {\n+      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n+      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n+      const json: TweetsResponse = await r.json();\n+\n+      if (!json?.is_enabled) {\n+        setErr(\"unavailable\");\n+        setData(null);\n+      } else if (!json.tweets || json.tweets.length === 0) {\n+        setErr(\"unavailable\");\n+        setData({ is_enabled: true, tweets: [] });\n+      } else {\n+        setData(json);\n+      }\n+    } catch (_e) {\n+      setErr(\"unavailable\");\n+      setData(null);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [url, canShowFeed]);\n+\n+  // Load on first expand, then poll while open (if refreshMs > 0)\n+  useEffect(() => {\n+    if (!expanded) return;\n+\n+    const ctrl = new AbortController();\n+    fetchTweets(ctrl.signal);\n+\n+    if (refreshMs > 0) {\n+      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n+      return () => {\n+        ctrl.abort();\n+        clearInterval(id);\n+      };\n+    }\n+    return () => ctrl.abort();\n+  }, [expanded, fetchTweets, refreshMs]);\n+\n+  // --- UI helpers\n+  const openTweet = (t: Tweet) =>\n+    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n+\n+  return (\n+    <div className={classNames.root ?? \"security-section\"}>\n+      {/* Header row (need to match security section style) */}\n+      <div\n+        className={classNames.headerRow ?? \"detail-panel__row\"}\n+        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n+      >\n+        <div className={classNames.headerLeft ?? \"tweets-name\"}>\n+          {title}\n+        </div>\n+        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n+          <button\n+            type=\"button\"\n+            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n+            onClick={() => setExpanded((v) => !v)}\n+            aria-expanded={expanded}\n+            aria-controls=\"twitter-feed-content\"\n+            title={expanded ? \"Collapse\" : \"Expand\"}\n+            style={{\n+              border: 0,\n+              background: \"transparent\",\n+              color: \"inherit\",\n+              cursor: \"pointer\",\n+              lineHeight: 0,\n+            }}\n+          >\n+            {/* simple chevron */}\n+            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n+              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n+            </svg>\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Collapsible content */}\n+      {expanded && (\n+        <div\n+          id=\"twitter-feed-content\"\n+          className={classNames.content ?? \"detail-panel__content\"}\n+          style={{\n+            position: \"relative\",\n+            padding: \"8px 0 0\",\n+          }}\n+        >\n+          {loading && <ChartLoader message=\"Loading feed…\" />}\n+\n+          {/* Coming soon / unavailable states */}\n+          {!loading && err === \"comingSoon\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n+            </div>\n+          )}\n+\n+          {!loading && err === \"unavailable\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n+            </div>\n+          )}\n+\n+          {/* Tweets list */}\n+          {!loading && !err && data?.tweets && (\n+            <div\n+              style={{\n+                maxHeight: heightPx,\n+                overflow: \"scroll\",\n+                display: \"grid\",\n+                gap: 8,\n+              }}\n+            >\n+              {data.tweets.map((t) => (\n+                <article\n+                  key={t.id}\n+                  className={classNames.card ?? \"card\"}\n+                  style={{\n+                    borderRadius: 12,\n+                    padding: 12,\n+                    background: \"var(--bg-elev-2)\",\n+                  }}\n+                >\n+                  {/* Author */}\n+                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n+                    {t.author?.profile_image_url ? (\n+                      <img\n+                        src={t.author.profile_image_url}\n+                        alt={t.author?.name || t.author?.username}\n+                        width={26}\n+                        height={26}\n+                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n+                        loading=\"lazy\"\n+                      />\n+                    ) : (\n+                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n+                    )}\n+                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n+                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n+                        {t.author?.name || \"Unknown\"}\n+                      </div>\n+                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n+                        @{t.author?.username}\n+                      </div>\n+                    </div>\n+                  </div>\n+\n+                  {/* Text */}\n+                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n+                    {t.text}\n+                  </div>\n+\n+                  {/* URLs (simple list) */}\n+                  {!!t.entities?.urls?.length && (\n+                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n+                      {t.entities.urls.map((u, i) => {\n+                        const href = u.expanded_url || u.url;\n+                        if (!href) return null;\n+                        return (\n+                          <li key={i} style={{ fontSize: 12 }}>\n+                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n+                              {u.display_url || href}\n+                            </a>\n+                          </li>\n+                        );\n+                      })}\n+                    </ul>\n+                  )}\n+\n+                  {/* Meta: time + impressions */}\n+                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n+                    <span>{new Date(t.created_at).toLocaleString()}</span>\n+                    {typeof t.public_metrics?.impression_count === \"number\" && (\n+                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n+                    )}\n+                  </div>\n+\n+                  {/* Metrics */}\n+                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n+                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n+                  </div>\n+\n+                  {/* CTA */}\n+                  <div style={{ marginTop: 10 }}>\n+                    <button\n+                      type=\"button\"\n+                      onClick={() => openTweet(t)}\n+                      style={{\n+                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n+                        background: \"transparent\",\n+                        color: \"inherit\",\n+                        borderRadius: 8,\n+                        padding: \"6px 10px\",\n+                        fontSize: 12,\n+                        cursor: \"pointer\",\n+                      }}\n+                    >\n+                      Read on X\n+                    </button>\n+                  </div>\n+                </article>\n+              ))}\n+            </div>\n+          )}\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755667406541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import \n+import FavoriteBorderIcon from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n@@ -337,343 +337,4 @@\n   );\n };\n \n export default TwitterFeedPanel;\n-import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n-import ChartLoader from \"./ChartLoader\";\n-\n-/**\n- * Minimal types for the API payload we observed.\n- */\n-type TweetAuthor = {\n-  id: string;\n-  username: string;\n-  name: string;\n-  profile_image_url?: string;\n-};\n-\n-type TweetMetrics = {\n-  retweet_count?: number;\n-  reply_count?: number;\n-  like_count?: number;\n-  quote_count?: number;\n-  bookmark_count?: number;\n-  impression_count?: number;\n-};\n-\n-type TweetEntitiesUrl = {\n-  url?: string;\n-  expanded_url?: string;\n-  display_url?: string;\n-  media_key?: string;\n-};\n-\n-type Tweet = {\n-  id: string;\n-  text: string;\n-  created_at: string;\n-  author_id: string;\n-  author: TweetAuthor;\n-  public_metrics?: TweetMetrics;\n-  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n-};\n-\n-type TweetsResponse = {\n-  is_enabled: boolean;\n-  tweets: Tweet[];\n-};\n-\n-type Props = {\n-  /** Solana mint address for the token (required by the API) */\n-  tokenAddress: string;\n-\n-  /**\n-   * Chain identifier.\n-   * We treat Solana as supported and everything else as \"coming soon\".\n-   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n-   */\n-  chainId: string | number;\n-\n-  /** Optional: override panel title (default: \"Twitter Feed\") */\n-  title?: string;\n-\n-  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n-  heightPx?: number;\n-\n-  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n-  refreshMs?: number;\n-\n-  /**\n-   * Optional: className hooks to better match your repo CSS quickly.\n-   * If your Security section uses particular classes, map them here.\n-   */\n-  classNames?: {\n-    root?: string;           // wrapper of the whole panel\n-    headerRow?: string;      // clickable header row container\n-    headerLeft?: string;     // title container\n-    headerRight?: string;    // right-aligned controls\n-    expandBtn?: string;      // toggle button\n-    content?: string;        // collapsible content container\n-    card?: string;           // tweet card wrapper\n-    authorRow?: string;      // author (avatar + names) row\n-    authorName?: string;     // author display name\n-    authorHandle?: string;   // @handle\n-    metaRow?: string;        // created_at + views\n-    text?: string;           // tweet text\n-    metricsRow?: string;     // likes/replies/etc row\n-    pill?: string;           // small status pill (for unavailable/soon)\n-  };\n-};\n-\n-/**\n- * Loose detection for Solana.\n- * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n- */\n-function isSolana(chainId: Props[\"chainId\"]) {\n-  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n-  const v = String(chainId).toLowerCase();\n-  return v.includes(\"solana\") || v === \"sol\";\n-}\n-\n-const TwitterFeedPanel: React.FC<Props> = ({\n-  tokenAddress,\n-  chainId,\n-  title = \"Twitter Feed\",\n-  heightPx = 340,\n-  refreshMs = 90_000,\n-  classNames = {},\n-}) => {\n-  const [expanded, setExpanded] = useState(false);\n-  const [loading, setLoading] = useState(false);\n-  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n-  const [data, setData] = useState<TweetsResponse | null>(null);\n-\n-  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n-\n-  const url = useMemo(() => {\n-    const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n-    u.searchParams.set(\"token_address\", tokenAddress);\n-    u.searchParams.set(\"compact\", \"false\");\n-    return u.toString();\n-  }, [tokenAddress]);\n-\n-  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n-    if (!canShowFeed) {\n-      setErr(\"comingSoon\");\n-      setData(null);\n-      return;\n-    }\n-    setErr(null);\n-    setLoading(true);\n-    try {\n-      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n-      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n-      const json: TweetsResponse = await r.json();\n-\n-      if (!json?.is_enabled) {\n-        setErr(\"unavailable\");\n-        setData(null);\n-      } else if (!json.tweets || json.tweets.length === 0) {\n-        setErr(\"unavailable\");\n-        setData({ is_enabled: true, tweets: [] });\n-      } else {\n-        setData(json);\n-      }\n-    } catch (_e) {\n-      setErr(\"unavailable\");\n-      setData(null);\n-    } finally {\n-      setLoading(false);\n-    }\n-  }, [url, canShowFeed]);\n-\n-  // Load on first expand, then poll while open (if refreshMs > 0)\n-  useEffect(() => {\n-    if (!expanded) return;\n-\n-    const ctrl = new AbortController();\n-    fetchTweets(ctrl.signal);\n-\n-    if (refreshMs > 0) {\n-      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n-      return () => {\n-        ctrl.abort();\n-        clearInterval(id);\n-      };\n-    }\n-    return () => ctrl.abort();\n-  }, [expanded, fetchTweets, refreshMs]);\n-\n-  // --- UI helpers\n-  const openTweet = (t: Tweet) =>\n-    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n-\n-  return (\n-    <div className={classNames.root ?? \"security-section\"}>\n-      {/* Header row (need to match security section style) */}\n-      <div\n-        className={classNames.headerRow ?? \"detail-panel__row\"}\n-        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n-      >\n-        <div className={classNames.headerLeft ?? \"tweets-name\"}>\n-          {title}\n-        </div>\n-        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n-          <button\n-            type=\"button\"\n-            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n-            onClick={() => setExpanded((v) => !v)}\n-            aria-expanded={expanded}\n-            aria-controls=\"twitter-feed-content\"\n-            title={expanded ? \"Collapse\" : \"Expand\"}\n-            style={{\n-              border: 0,\n-              background: \"transparent\",\n-              color: \"inherit\",\n-              cursor: \"pointer\",\n-              lineHeight: 0,\n-            }}\n-          >\n-            {/* simple chevron */}\n-            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n-              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n-            </svg>\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Collapsible content */}\n-      {expanded && (\n-        <div\n-          id=\"twitter-feed-content\"\n-          className={classNames.content ?? \"detail-panel__content\"}\n-          style={{\n-            position: \"relative\",\n-            padding: \"8px 0 0\",\n-          }}\n-        >\n-          {loading && <ChartLoader message=\"Loading feed…\" />}\n-\n-          {/* Coming soon / unavailable states */}\n-          {!loading && err === \"comingSoon\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n-            </div>\n-          )}\n-\n-          {!loading && err === \"unavailable\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n-            </div>\n-          )}\n-\n-          {/* Tweets list */}\n-          {!loading && !err && data?.tweets && (\n-            <div\n-              style={{\n-                maxHeight: heightPx,\n-                overflow: \"scroll\",\n-                display: \"grid\",\n-                gap: 8,\n-              }}\n-            >\n-              {data.tweets.map((t) => (\n-                <article\n-                  key={t.id}\n-                  className={classNames.card ?? \"card\"}\n-                  style={{\n-                    borderRadius: 12,\n-                    padding: 12,\n-                    background: \"var(--bg-elev-2)\",\n-                  }}\n-                >\n-                  {/* Author */}\n-                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n-                    {t.author?.profile_image_url ? (\n-                      <img\n-                        src={t.author.profile_image_url}\n-                        alt={t.author?.name || t.author?.username}\n-                        width={26}\n-                        height={26}\n-                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n-                        loading=\"lazy\"\n-                      />\n-                    ) : (\n-                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n-                    )}\n-                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n-                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n-                        {t.author?.name || \"Unknown\"}\n-                      </div>\n-                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n-                        @{t.author?.username}\n-                      </div>\n-                    </div>\n-                  </div>\n-\n-                  {/* Text */}\n-                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n-                    {t.text}\n-                  </div>\n-\n-                  {/* URLs (simple list) */}\n-                  {!!t.entities?.urls?.length && (\n-                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n-                      {t.entities.urls.map((u, i) => {\n-                        const href = u.expanded_url || u.url;\n-                        if (!href) return null;\n-                        return (\n-                          <li key={i} style={{ fontSize: 12 }}>\n-                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n-                              {u.display_url || href}\n-                            </a>\n-                          </li>\n-                        );\n-                      })}\n-                    </ul>\n-                  )}\n-\n-                  {/* Meta: time + impressions */}\n-                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n-                    <span>{new Date(t.created_at).toLocaleString()}</span>\n-                    {typeof t.public_metrics?.impression_count === \"number\" && (\n-                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n-                    )}\n-                  </div>\n-\n-                  {/* Metrics */}\n-                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n-                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n-                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n-                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n-                  </div>\n-\n-                  {/* CTA */}\n-                  <div style={{ marginTop: 10 }}>\n-                    <button\n-                      type=\"button\"\n-                      onClick={() => openTweet(t)}\n-                      style={{\n-                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n-                        background: \"transparent\",\n-                        color: \"inherit\",\n-                        borderRadius: 8,\n-                        padding: \"6px 10px\",\n-                        fontSize: 12,\n-                        cursor: \"pointer\",\n-                      }}\n-                    >\n-                      Read on X\n-                    </button>\n-                  </div>\n-                </article>\n-              ))}\n-            </div>\n-          )}\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755667419272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import FavoriteBorderIcon from '@mui/icons-material';\n+import FavoriteBorderIcon,  from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667500914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import FavoriteBorderIcon,  from '@mui/icons-material';\n+import FavoriteBorderIcon, KeyboardReturnIcon,  from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667550490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import FavoriteBorderIcon, KeyboardReturnIcon,  from '@mui/icons-material';\n+import FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667576025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon from '@mui/icons-material';\n+import FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667590795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon from '@mui/icons-material';\n+import {FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon} from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667610112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import {FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon} from '@mui/icons-material';\n+import { Heart as FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667616609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { Heart as FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n+import { Heart as FavoriteBorderIcon, Retweet as KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667623825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { Heart as FavoriteBorderIcon, Retweet as KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n+import { \n+  Heart as FavoriteBorderIcon, \n+  Retweet as KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667630755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n import { \n   Heart as FavoriteBorderIcon, \n-  Retweet as KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n+  Retweet as KeyboardReturnIcon, Retweet as RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667643430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n import { \n   Heart as FavoriteBorderIcon, \n-  Retweet as KeyboardReturnIcon, Retweet as RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n+  Retweet as KeyboardReturnIcon,\n+  Retweet as RepeatIcon,\n+  Saved as TurnedInNotIcon } from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667686803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n+import ChartLoader from \"./ChartLoader\";\n+import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n+\n+/**\n+ * Minimal types for the API payload we observed.\n+ */\n+type TweetAuthor = {\n+  id: string;\n+  username: string;\n+  name: string;\n+  profile_image_url?: string;\n+};\n+\n+type TweetMetrics = {\n+  retweet_count?: number;\n+  reply_count?: number;\n+  like_count?: number;\n+  quote_count?: number;\n+  bookmark_count?: number;\n+  impression_count?: number;\n+};\n+\n+type TweetEntitiesUrl = {\n+  url?: string;\n+  expanded_url?: string;\n+  display_url?: string;\n+  media_key?: string;\n+};\n+\n+type Tweet = {\n+  id: string;\n+  text: string;\n+  created_at: string;\n+  author_id: string;\n+  author: TweetAuthor;\n+  public_metrics?: TweetMetrics;\n+  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n+};\n+\n+type TweetsResponse = {\n+  is_enabled: boolean;\n+  tweets: Tweet[];\n+};\n+\n+type Props = {\n+  /** Solana mint address for the token (required by the API) */\n+  tokenAddress: string;\n+\n+  /**\n+   * Chain identifier.\n+   * We treat Solana as supported and everything else as \"coming soon\".\n+   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n+   */\n+  chainId: string | number;\n+\n+  /** Optional: override panel title (default: \"Twitter Feed\") */\n+  title?: string;\n+\n+  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n+  heightPx?: number;\n+\n+  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n+  refreshMs?: number;\n+\n+  /**\n+   * Optional: className hooks to better match your repo CSS quickly.\n+   * If your Security section uses particular classes, map them here.\n+   */\n+  classNames?: {\n+    root?: string;           // wrapper of the whole panel\n+    headerRow?: string;      // clickable header row container\n+    headerLeft?: string;     // title container\n+    headerRight?: string;    // right-aligned controls\n+    expandBtn?: string;      // toggle button\n+    content?: string;        // collapsible content container\n+    card?: string;           // tweet card wrapper\n+    authorRow?: string;      // author (avatar + names) row\n+    authorName?: string;     // author display name\n+    authorHandle?: string;   // @handle\n+    metaRow?: string;        // created_at + views\n+    text?: string;           // tweet text\n+    metricsRow?: string;     // likes/replies/etc row\n+    pill?: string;           // small status pill (for unavailable/soon)\n+  };\n+};\n+\n+/**\n+ * Loose detection for Solana.\n+ * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n+ */\n+function isSolana(chainId: Props[\"chainId\"]) {\n+  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n+  const v = String(chainId).toLowerCase();\n+  return v.includes(\"solana\") || v === \"sol\";\n+}\n+\n+const TwitterFeedPanel: React.FC<Props> = ({\n+  tokenAddress,\n+  chainId,\n+  title = \"Twitter Feed\",\n+  heightPx = 340,\n+  refreshMs = 90_000,\n+  classNames = {},\n+}) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const [loading, setLoading] = useState(false);\n+  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n+  const [data, setData] = useState<TweetsResponse | null>(null);\n+\n+  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n+\n+  const url = useMemo(() => {\n+    const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n+    u.searchParams.set(\"token_address\", tokenAddress);\n+    u.searchParams.set(\"compact\", \"false\");\n+    return u.toString();\n+  }, [tokenAddress]);\n+\n+  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n+    if (!canShowFeed) {\n+      setErr(\"comingSoon\");\n+      setData(null);\n+      return;\n+    }\n+    setErr(null);\n+    setLoading(true);\n+    try {\n+      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n+      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n+      const json: TweetsResponse = await r.json();\n+\n+      if (!json?.is_enabled) {\n+        setErr(\"unavailable\");\n+        setData(null);\n+      } else if (!json.tweets || json.tweets.length === 0) {\n+        setErr(\"unavailable\");\n+        setData({ is_enabled: true, tweets: [] });\n+      } else {\n+        setData(json);\n+      }\n+    } catch (_e) {\n+      setErr(\"unavailable\");\n+      setData(null);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [url, canShowFeed]);\n+\n+  // Load on first expand, then poll while open (if refreshMs > 0)\n+  useEffect(() => {\n+    if (!expanded) return;\n+\n+    const ctrl = new AbortController();\n+    fetchTweets(ctrl.signal);\n+\n+    if (refreshMs > 0) {\n+      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n+      return () => {\n+        ctrl.abort();\n+        clearInterval(id);\n+      };\n+    }\n+    return () => ctrl.abort();\n+  }, [expanded, fetchTweets, refreshMs]);\n+\n+  // --- UI helpers\n+  const openTweet = (t: Tweet) =>\n+    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n+\n+  return (\n+    <div className={classNames.root ?? \"security-section\"}>\n+      {/* Header row (need to match security section style) */}\n+      <div\n+        className={classNames.headerRow ?? \"detail-panel__row\"}\n+        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n+      >\n+        <div className={classNames.headerLeft ?? \"tweets-name\"}>\n+          {title}\n+        </div>\n+        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n+          <button\n+            type=\"button\"\n+            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n+            onClick={() => setExpanded((v) => !v)}\n+            aria-expanded={expanded}\n+            aria-controls=\"twitter-feed-content\"\n+            title={expanded ? \"Collapse\" : \"Expand\"}\n+            style={{\n+              border: 0,\n+              background: \"transparent\",\n+              color: \"inherit\",\n+              cursor: \"pointer\",\n+              lineHeight: 0,\n+            }}\n+          >\n+            {/* simple chevron */}\n+            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n+              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n+            </svg>\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Collapsible content */}\n+      {expanded && (\n+        <div\n+          id=\"twitter-feed-content\"\n+          className={classNames.content ?? \"detail-panel__content\"}\n+          style={{\n+            position: \"relative\",\n+            padding: \"8px 0 0\",\n+          }}\n+        >\n+          {loading && <ChartLoader message=\"Loading feed…\" />}\n+\n+          {/* Coming soon / unavailable states */}\n+          {!loading && err === \"comingSoon\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n+            </div>\n+          )}\n+\n+          {!loading && err === \"unavailable\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n+            </div>\n+          )}\n+\n+          {/* Tweets list */}\n+          {!loading && !err && data?.tweets && (\n+            <div\n+              style={{\n+                maxHeight: heightPx,\n+                overflow: \"scroll\",\n+                display: \"grid\",\n+                gap: 8,\n+              }}\n+            >\n+              {data.tweets.map((t) => (\n+                <article\n+                  key={t.id}\n+                  className={classNames.card ?? \"card\"}\n+                  style={{\n+                    borderRadius: 12,\n+                    padding: 12,\n+                    background: \"var(--bg-elev-2)\",\n+                  }}\n+                >\n+                  {/* Author */}\n+                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n+                    {t.author?.profile_image_url ? (\n+                      <img\n+                        src={t.author.profile_image_url}\n+                        alt={t.author?.name || t.author?.username}\n+                        width={26}\n+                        height={26}\n+                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n+                        loading=\"lazy\"\n+                      />\n+                    ) : (\n+                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n+                    )}\n+                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n+                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n+                        {t.author?.name || \"Unknown\"}\n+                      </div>\n+                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n+                        @{t.author?.username}\n+                      </div>\n+                    </div>\n+                  </div>\n+\n+                  {/* Text */}\n+                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n+                    {t.text}\n+                  </div>\n+\n+                  {/* URLs (simple list) */}\n+                  {!!t.entities?.urls?.length && (\n+                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n+                      {t.entities.urls.map((u, i) => {\n+                        const href = u.expanded_url || u.url;\n+                        if (!href) return null;\n+                        return (\n+                          <li key={i} style={{ fontSize: 12 }}>\n+                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n+                              {u.display_url || href}\n+                            </a>\n+                          </li>\n+                        );\n+                      })}\n+                    </ul>\n+                  )}\n+\n+                  {/* Meta: time + impressions */}\n+                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n+                    <span>{new Date(t.created_at).toLocaleString()}</span>\n+                    {typeof t.public_metrics?.impression_count === \"number\" && (\n+                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n+                    )}\n+                  </div>\n+\n+                  {/* Metrics */}\n+                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n+                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n+                  </div>\n+\n+                  {/* CTA */}\n+                  <div style={{ marginTop: 10 }}>\n+                    <button\n+                      type=\"button\"\n+                      onClick={() => openTweet(t)}\n+                      style={{\n+                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n+                        background: \"transparent\",\n+                        color: \"inherit\",\n+                        borderRadius: 8,\n+                        padding: \"6px 10px\",\n+                        fontSize: 12,\n+                        cursor: \"pointer\",\n+                      }}\n+                    >\n+                      Read on X\n+                    </button>\n+                  </div>\n+                </article>\n+              ))}\n+            </div>\n+          )}\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755667703022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,348 +337,4 @@\n   );\n };\n \n export default TwitterFeedPanel;\n-import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n-import ChartLoader from \"./ChartLoader\";\n-import { \n-  Heart as FavoriteBorderIcon, \n-  Retweet as KeyboardReturnIcon,\n-  Retweet as RepeatIcon,\n-  Saved as TurnedInNotIcon } from '@mui/icons-material';\n-\n-/**\n- * Minimal types for the API payload we observed.\n- */\n-type TweetAuthor = {\n-  id: string;\n-  username: string;\n-  name: string;\n-  profile_image_url?: string;\n-};\n-\n-type TweetMetrics = {\n-  retweet_count?: number;\n-  reply_count?: number;\n-  like_count?: number;\n-  quote_count?: number;\n-  bookmark_count?: number;\n-  impression_count?: number;\n-};\n-\n-type TweetEntitiesUrl = {\n-  url?: string;\n-  expanded_url?: string;\n-  display_url?: string;\n-  media_key?: string;\n-};\n-\n-type Tweet = {\n-  id: string;\n-  text: string;\n-  created_at: string;\n-  author_id: string;\n-  author: TweetAuthor;\n-  public_metrics?: TweetMetrics;\n-  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n-};\n-\n-type TweetsResponse = {\n-  is_enabled: boolean;\n-  tweets: Tweet[];\n-};\n-\n-type Props = {\n-  /** Solana mint address for the token (required by the API) */\n-  tokenAddress: string;\n-\n-  /**\n-   * Chain identifier.\n-   * We treat Solana as supported and everything else as \"coming soon\".\n-   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n-   */\n-  chainId: string | number;\n-\n-  /** Optional: override panel title (default: \"Twitter Feed\") */\n-  title?: string;\n-\n-  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n-  heightPx?: number;\n-\n-  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n-  refreshMs?: number;\n-\n-  /**\n-   * Optional: className hooks to better match your repo CSS quickly.\n-   * If your Security section uses particular classes, map them here.\n-   */\n-  classNames?: {\n-    root?: string;           // wrapper of the whole panel\n-    headerRow?: string;      // clickable header row container\n-    headerLeft?: string;     // title container\n-    headerRight?: string;    // right-aligned controls\n-    expandBtn?: string;      // toggle button\n-    content?: string;        // collapsible content container\n-    card?: string;           // tweet card wrapper\n-    authorRow?: string;      // author (avatar + names) row\n-    authorName?: string;     // author display name\n-    authorHandle?: string;   // @handle\n-    metaRow?: string;        // created_at + views\n-    text?: string;           // tweet text\n-    metricsRow?: string;     // likes/replies/etc row\n-    pill?: string;           // small status pill (for unavailable/soon)\n-  };\n-};\n-\n-/**\n- * Loose detection for Solana.\n- * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n- */\n-function isSolana(chainId: Props[\"chainId\"]) {\n-  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n-  const v = String(chainId).toLowerCase();\n-  return v.includes(\"solana\") || v === \"sol\";\n-}\n-\n-const TwitterFeedPanel: React.FC<Props> = ({\n-  tokenAddress,\n-  chainId,\n-  title = \"Twitter Feed\",\n-  heightPx = 340,\n-  refreshMs = 90_000,\n-  classNames = {},\n-}) => {\n-  const [expanded, setExpanded] = useState(false);\n-  const [loading, setLoading] = useState(false);\n-  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n-  const [data, setData] = useState<TweetsResponse | null>(null);\n-\n-  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n-\n-  const url = useMemo(() => {\n-    const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n-    u.searchParams.set(\"token_address\", tokenAddress);\n-    u.searchParams.set(\"compact\", \"false\");\n-    return u.toString();\n-  }, [tokenAddress]);\n-\n-  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n-    if (!canShowFeed) {\n-      setErr(\"comingSoon\");\n-      setData(null);\n-      return;\n-    }\n-    setErr(null);\n-    setLoading(true);\n-    try {\n-      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n-      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n-      const json: TweetsResponse = await r.json();\n-\n-      if (!json?.is_enabled) {\n-        setErr(\"unavailable\");\n-        setData(null);\n-      } else if (!json.tweets || json.tweets.length === 0) {\n-        setErr(\"unavailable\");\n-        setData({ is_enabled: true, tweets: [] });\n-      } else {\n-        setData(json);\n-      }\n-    } catch (_e) {\n-      setErr(\"unavailable\");\n-      setData(null);\n-    } finally {\n-      setLoading(false);\n-    }\n-  }, [url, canShowFeed]);\n-\n-  // Load on first expand, then poll while open (if refreshMs > 0)\n-  useEffect(() => {\n-    if (!expanded) return;\n-\n-    const ctrl = new AbortController();\n-    fetchTweets(ctrl.signal);\n-\n-    if (refreshMs > 0) {\n-      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n-      return () => {\n-        ctrl.abort();\n-        clearInterval(id);\n-      };\n-    }\n-    return () => ctrl.abort();\n-  }, [expanded, fetchTweets, refreshMs]);\n-\n-  // --- UI helpers\n-  const openTweet = (t: Tweet) =>\n-    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n-\n-  return (\n-    <div className={classNames.root ?? \"security-section\"}>\n-      {/* Header row (need to match security section style) */}\n-      <div\n-        className={classNames.headerRow ?? \"detail-panel__row\"}\n-        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n-      >\n-        <div className={classNames.headerLeft ?? \"tweets-name\"}>\n-          {title}\n-        </div>\n-        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n-          <button\n-            type=\"button\"\n-            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n-            onClick={() => setExpanded((v) => !v)}\n-            aria-expanded={expanded}\n-            aria-controls=\"twitter-feed-content\"\n-            title={expanded ? \"Collapse\" : \"Expand\"}\n-            style={{\n-              border: 0,\n-              background: \"transparent\",\n-              color: \"inherit\",\n-              cursor: \"pointer\",\n-              lineHeight: 0,\n-            }}\n-          >\n-            {/* simple chevron */}\n-            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n-              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n-            </svg>\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Collapsible content */}\n-      {expanded && (\n-        <div\n-          id=\"twitter-feed-content\"\n-          className={classNames.content ?? \"detail-panel__content\"}\n-          style={{\n-            position: \"relative\",\n-            padding: \"8px 0 0\",\n-          }}\n-        >\n-          {loading && <ChartLoader message=\"Loading feed…\" />}\n-\n-          {/* Coming soon / unavailable states */}\n-          {!loading && err === \"comingSoon\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n-            </div>\n-          )}\n-\n-          {!loading && err === \"unavailable\" && (\n-            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n-              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n-            </div>\n-          )}\n-\n-          {/* Tweets list */}\n-          {!loading && !err && data?.tweets && (\n-            <div\n-              style={{\n-                maxHeight: heightPx,\n-                overflow: \"scroll\",\n-                display: \"grid\",\n-                gap: 8,\n-              }}\n-            >\n-              {data.tweets.map((t) => (\n-                <article\n-                  key={t.id}\n-                  className={classNames.card ?? \"card\"}\n-                  style={{\n-                    borderRadius: 12,\n-                    padding: 12,\n-                    background: \"var(--bg-elev-2)\",\n-                  }}\n-                >\n-                  {/* Author */}\n-                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n-                    {t.author?.profile_image_url ? (\n-                      <img\n-                        src={t.author.profile_image_url}\n-                        alt={t.author?.name || t.author?.username}\n-                        width={26}\n-                        height={26}\n-                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n-                        loading=\"lazy\"\n-                      />\n-                    ) : (\n-                      <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n-                    )}\n-                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0 }}>\n-                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n-                        {t.author?.name || \"Unknown\"}\n-                      </div>\n-                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n-                        @{t.author?.username}\n-                      </div>\n-                    </div>\n-                  </div>\n-\n-                  {/* Text */}\n-                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n-                    {t.text}\n-                  </div>\n-\n-                  {/* URLs (simple list) */}\n-                  {!!t.entities?.urls?.length && (\n-                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n-                      {t.entities.urls.map((u, i) => {\n-                        const href = u.expanded_url || u.url;\n-                        if (!href) return null;\n-                        return (\n-                          <li key={i} style={{ fontSize: 12 }}>\n-                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n-                              {u.display_url || href}\n-                            </a>\n-                          </li>\n-                        );\n-                      })}\n-                    </ul>\n-                  )}\n-\n-                  {/* Meta: time + impressions */}\n-                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n-                    <span>{new Date(t.created_at).toLocaleString()}</span>\n-                    {typeof t.public_metrics?.impression_count === \"number\" && (\n-                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n-                    )}\n-                  </div>\n-\n-                  {/* Metrics */}\n-                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n-                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n-                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n-                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n-                  </div>\n-\n-                  {/* CTA */}\n-                  <div style={{ marginTop: 10 }}>\n-                    <button\n-                      type=\"button\"\n-                      onClick={() => openTweet(t)}\n-                      style={{\n-                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n-                        background: \"transparent\",\n-                        color: \"inherit\",\n-                        borderRadius: 8,\n-                        padding: \"6px 10px\",\n-                        fontSize: 12,\n-                        cursor: \"pointer\",\n-                      }}\n-                    >\n-                      Read on X\n-                    </button>\n-                  </div>\n-                </article>\n-              ))}\n-            </div>\n-          )}\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default TwitterFeedPanel;\n"
                },
                {
                    "date": 1755667767111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,9 +302,9 @@\n                   </div>\n \n                   {/* Metrics */}\n                   <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <FavoriteBorderIcon>❤ {t.public_metrics?.like_count ?? 0}</span>\n                     <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n                     <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n                     <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n                   </div>\n"
                },
                {
                    "date": 1755667783580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,12 +302,12 @@\n                   </div>\n \n                   {/* Metrics */}\n                   <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <FavoriteBorderIcon>❤ {t.public_metrics?.like_count ?? 0}</span>\n-                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n-                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n-                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n+                    <FavoriteBorderIcon />❤ {t.public_metrics?.like_count ?? 0}\n+                    <KeyboardReturnIcon />↩︎ {t.public_metrics?.reply_count ?? 0}\n+                    <RepeatIcon />🔁 {t.public_metrics?.retweet_count ?? 0}\n+                    <TurnedInNotIcon />🔖 {t.public_metrics?.bookmark_count ?? 0}\n                   </div>\n \n                   {/* CTA */}\n                   <div style={{ marginTop: 10 }}>\n"
                },
                {
                    "date": 1755667793969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,12 +302,12 @@\n                   </div>\n \n                   {/* Metrics */}\n                   <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <FavoriteBorderIcon />❤ {t.public_metrics?.like_count ?? 0}\n-                    <KeyboardReturnIcon />↩︎ {t.public_metrics?.reply_count ?? 0}\n-                    <RepeatIcon />🔁 {t.public_metrics?.retweet_count ?? 0}\n-                    <TurnedInNotIcon />🔖 {t.public_metrics?.bookmark_count ?? 0}\n+                    <FavoriteBorderIcon>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n                   </div>\n \n                   {/* CTA */}\n                   <div style={{ marginTop: 10 }}>\n"
                },
                {
                    "date": 1755667795167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,9 +302,9 @@\n                   </div>\n \n                   {/* Metrics */}\n                   <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <FavoriteBorderIcon>❤ {t.public_metrics?.like_count ?? 0}</span>\n+                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n                     <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n                     <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n                     <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n                   </div>\n"
                },
                {
                    "date": 1755667802033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,12 +302,12 @@\n                   </div>\n \n                   {/* Metrics */}\n                   <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <span>❤ {t.public_metrics?.like_count ?? 0}</span>\n-                    <span>↩︎ {t.public_metrics?.reply_count ?? 0}</span>\n-                    <span>🔁 {t.public_metrics?.retweet_count ?? 0}</span>\n-                    <span>🔖 {t.public_metrics?.bookmark_count ?? 0}</span>\n+                    <span><FavoriteBorderIcon fontSize=\"small\" /> {t.public_metrics?.like_count ?? 0}</span>\n+                    <span><KeyboardReturnIcon fontSize=\"small\" /> {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span><RepeatIcon fontSize=\"small\" /> {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span><TurnedInNotIcon fontSize=\"small\" /> {t.public_metrics?.bookmark_count ?? 0}</span>\n                   </div>\n \n                   {/* CTA */}\n                   <div style={{ marginTop: 10 }}>\n"
                },
                {
                    "date": 1755667825774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material';\n+import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. Did you mean 'FavoriteBorder'?\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667833665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. Did you mean 'FavoriteBorder'?\n+import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. To \n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755667844771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. To \n+import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. To fix this, you can either:\n+import '../styles/detail.css'; // Ensure this path is correct based on your project structure\n \n+\n /**\n  * Minimal types for the API payload we observed.\n  */\n type TweetAuthor = {\n"
                },
                {
                    "date": 1755667854693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. To fix this, you can either:\n-import '../styles/detail.css'; // Ensure this path is correct based on your project structure\n+import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n+// To fix this, you can either:\n \n \n /**\n  * Minimal types for the API payload we observed.\n"
                },
                {
                    "date": 1755667862574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n-// To fix this, you can either:\n+// To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n \n \n /**\n  * Minimal types for the API payload we observed.\n"
                },
                {
                    "date": 1755667869859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n \n \n+\n /**\n  * Minimal types for the API payload we observed.\n  */\n type TweetAuthor = {\n"
                },
                {
                    "date": 1755667905601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n+// To install correct version, run: npm install @mui/icons-material\n \n \n-\n /**\n  * Minimal types for the API payload we observed.\n  */\n type TweetAuthor = {\n"
                },
                {
                    "date": 1755667942665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n-// To install correct version, run: npm install @mui/icons-material\n+// To see mui verison in\n \n \n /**\n  * Minimal types for the API payload we observed.\n"
                },
                {
                    "date": 1755667970160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n-// To see mui verison in\n+// To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n+// if it's@mui/icons-material@5.18.0 then \n \n \n /**\n  * Minimal types for the API payload we observed.\n"
                },
                {
                    "date": 1755667977964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import ChartLoader from \"./ChartLoader\";\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n // To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n-// if it's@mui/icons-material@5.18.0 then \n+// if it's@mui/icons-material@5.18.0 then upda\n \n \n /**\n  * Minimal types for the API payload we observed.\n"
                },
                {
                    "date": 1755668003414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,12 @@\n import ChartLoader from \"./ChartLoader\";\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n // To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n-// if it's@mui/icons-material@5.18.0 then upda\n+// if it's@mui/icons-material@5.18.0 then update it to the latest version using `npm install @mui/icons-material@latest` or `yarn add @mui/icons-material@latest`.\n \n \n+\n /**\n  * Minimal types for the API payload we observed.\n  */\n type TweetAuthor = {\n"
                },
                {
                    "date": 1755668012917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,27 @@\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n // To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n // if it's@mui/icons-material@5.18.0 then update it to the latest version using `npm install @mui/icons-material@latest` or `yarn add @mui/icons-material@latest`.\n+// IF npm install @mui/icons-material@latest\n+// npm error code ERESOLVE\n+npm error ERESOLVE unable to resolve dependency tree\n+npm error\n+npm error While resolving: minidex@0.1.0\n+npm error Found: @mui/material@5.18.0\n+npm error node_modules/@mui/material\n+npm error   @mui/material@\"^5.18.0\" from the root project\n+npm error\n+npm error Could not resolve dependency:\n+npm error peer @mui/material@\"^7.3.1\" from @mui/icons-material@7.3.1\n+npm error node_modules/@mui/icons-material\n+npm error   @mui/icons-material@\"7.3.1\" from the root project\n+npm error\n+npm error Fix the upstream dependency conflict, or retry\n+npm error this command with --force or --legacy-peer-deps\n+npm error to accept an incorrect (and potentially broken) dependency resolution.\n \n \n-\n /**\n  * Minimal types for the API payload we observed.\n  */\n type TweetAuthor = {\n"
                },
                {
                    "date": 1755668023571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n // To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n // if it's@mui/icons-material@5.18.0 then update it to the latest version using `npm install @mui/icons-material@latest` or `yarn add @mui/icons-material@latest`.\n // IF npm install @mui/icons-material@latest\n // npm error code ERESOLVE\n-npm error ERESOLVE unable to resolve dependency tree\n+/* npm error ERESOLVE unable to resolve dependency tree\n npm error\n npm error While resolving: minidex@0.1.0\n npm error Found: @mui/material@5.18.0\n npm error node_modules/@mui/material\n@@ -20,8 +20,9 @@\n npm error\n npm error Fix the upstream dependency conflict, or retry\n npm error this command with --force or --legacy-peer-deps\n npm error to accept an incorrect (and potentially broken) dependency resolution.\n+*/\n \n \n /**\n  * Minimal types for the API payload we observed.\n"
                },
                {
                    "date": 1755668030072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n npm error this command with --force or --legacy-peer-deps\n npm error to accept an incorrect (and potentially broken) dependency resolution.\n */\n \n+// To \n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755668038789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n npm error this command with --force or --legacy-peer-deps\n npm error to accept an incorrect (and potentially broken) dependency resolution.\n */\n \n-// To \n+// \n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755668047596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n // To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n // if it's@mui/icons-material@5.18.0 then update it to the latest version using `npm install @mui/icons-material@latest` or `yarn add @mui/icons-material@latest`.\n // IF npm install @mui/icons-material@latest\n-// npm error code ERESOLVE\n+/*npm error code ERESOLVE\n /* npm error ERESOLVE unable to resolve dependency tree\n npm error\n npm error While resolving: minidex@0.1.0\n npm error Found: @mui/material@5.18.0\n"
                },
                {
                    "date": 1755668053829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,11 @@\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n // To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n // if it's@mui/icons-material@5.18.0 then update it to the latest version using `npm install @mui/icons-material@latest` or `yarn add @mui/icons-material@latest`.\n-// IF npm install @mui/icons-material@latest\n-/*npm error code ERESOLVE\n-/* npm error ERESOLVE unable to resolve dependency tree\n+// I npm install @mui/icons-material@latest\n+/* npm error code ERESOLVE\n+npm error ERESOLVE unable to resolve dependency tree\n npm error\n npm error While resolving: minidex@0.1.0\n npm error Found: @mui/material@5.18.0\n npm error node_modules/@mui/material\n"
                },
                {
                    "date": 1755668060897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n // To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n // if it's@mui/icons-material@5.18.0 then update it to the latest version using `npm install @mui/icons-material@latest` or `yarn add @mui/icons-material@latest`.\n-// I npm install @mui/icons-material@latest\n+// Ir command result npm install @mui/icons-material@latest\n /* npm error code ERESOLVE\n npm error ERESOLVE unable to resolve dependency tree\n npm error\n npm error While resolving: minidex@0.1.0\n"
                },
                {
                    "date": 1755668069611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n // To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n // To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n // if it's@mui/icons-material@5.18.0 then update it to the latest version using `npm install @mui/icons-material@latest` or `yarn add @mui/icons-material@latest`.\n-// Ir command result npm install @mui/icons-material@latest\n+// Ir command result after npm install @mui/icons-material@latest is:\n /* npm error code ERESOLVE\n npm error ERESOLVE unable to resolve dependency tree\n npm error\n npm error While resolving: minidex@0.1.0\n@@ -22,9 +22,9 @@\n npm error this command with --force or --legacy-peer-deps\n npm error to accept an incorrect (and potentially broken) dependency resolution.\n */\n \n-// \n+// then \n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755668077884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n npm error this command with --force or --legacy-peer-deps\n npm error to accept an incorrect (and potentially broken) dependency resolution.\n */\n \n-// then \n+// then run `npm install @mui/icons-material@latest --force` or `npm install @mui/icons-material@latest --legacy-peer-deps` to fix the issue.\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755668134088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,8 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n-// To fix this, you can either: 1. Install the correct version of MUI icons that includes this icon, or 2. Use a different icon that is available in your current version.\n-// To see mui verison in your project, run `npm list @mui/icons-material` or `yarn list @mui/icons-material`.\n-// if it's@mui/icons-material@5.18.0 then update it to the latest version using `npm install @mui/icons-material@latest` or `yarn add @mui/icons-material@latest`.\n-// Ir command result after npm install @mui/icons-material@latest is:\n-/* npm error code ERESOLVE\n-npm error ERESOLVE unable to resolve dependency tree\n-npm error\n-npm error While resolving: minidex@0.1.0\n-npm error Found: @mui/material@5.18.0\n-npm error node_modules/@mui/material\n-npm error   @mui/material@\"^5.18.0\" from the root project\n-npm error\n-npm error Could not resolve dependency:\n-npm error peer @mui/material@\"^7.3.1\" from @mui/icons-material@7.3.1\n-npm error node_modules/@mui/icons-material\n-npm error   @mui/icons-material@\"7.3.1\" from the root project\n-npm error\n-npm error Fix the upstream dependency conflict, or retry\n-npm error this command with --force or --legacy-peer-deps\n-npm error to accept an incorrect (and potentially broken) dependency resolution.\n-*/\n \n-// then run `npm install @mui/icons-material@latest --force` or `npm install @mui/icons-material@latest --legacy-peer-deps` to fix the issue.\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755668135529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n \n-\n /**\n  * Minimal types for the API payload we observed.\n  */\n type TweetAuthor = {\n"
                },
                {
                    "date": 1755668144660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNotIcon } from '@mui/icons-material'; // '\"@mui/icons-material\"' has no exported member named 'FavoriteBorderIcon'. \n+import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNot } from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755668153565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { FavoriteBorderIcon, KeyboardReturnIcon, RepeatIcon, TurnedInNot } from '@mui/icons-material';\n+import { FavoriteBorderIcon, KeyboardReturn, Repeat, TurnedInNot } from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n"
                },
                {
                    "date": 1755668163526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n import ChartLoader from \"./ChartLoader\";\n-import { FavoriteBorderIcon, KeyboardReturn, Repeat, TurnedInNot } from '@mui/icons-material';\n+import { FavoriteBorder, KeyboardReturn, Repeat, TurnedInNot } from '@mui/icons-material';\n \n /**\n  * Minimal types for the API payload we observed.\n  */\n@@ -302,12 +302,12 @@\n                   </div>\n \n                   {/* Metrics */}\n                   <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n-                    <span><FavoriteBorderIcon fontSize=\"small\" /> {t.public_metrics?.like_count ?? 0}</span>\n-                    <span><KeyboardReturnIcon fontSize=\"small\" /> {t.public_metrics?.reply_count ?? 0}</span>\n-                    <span><RepeatIcon fontSize=\"small\" /> {t.public_metrics?.retweet_count ?? 0}</span>\n-                    <span><TurnedInNotIcon fontSize=\"small\" /> {t.public_metrics?.bookmark_count ?? 0}</span>\n+                    <span><FavoriteBorder fontSize=\"small\" /> {t.public_metrics?.like_count ?? 0}</span>\n+                    <span><KeyboardReturn fontSize=\"small\" /> {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span><Repeat fontSize=\"small\" /> {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span><TurnedInNot fontSize=\"small\" /> {t.public_metrics?.bookmark_count ?? 0}</span>\n                   </div>\n \n                   {/* CTA */}\n                   <div style={{ marginTop: 10 }}>\n"
                },
                {
                    "date": 1755668291220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,9 +260,9 @@\n                       />\n                     ) : (\n                       <div style={{ width: 26, height: 26, borderRadius: \"50%\", background: \"var(--muted, #333)\" }} />\n                     )}\n-                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0m  }}>\n+                    <div style={{ display: \"flex\", alignItems: \"baseline\", gap: 6, minWidth: 0, flex-direction: column; }}>\n                       <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n                         {t.author?.name || \"Unknown\"}\n                       </div>\n                       <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n"
                },
                {
                    "date": 1755668406992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n+import ChartLoader from \"./ChartLoader\";\n+import { FavoriteBorder, KeyboardReturn, Repeat, TurnedInNot } from '@mui/icons-material';\n+\n+/**\n+ * Minimal types for the API payload we observed.\n+ */\n+type TweetAuthor = {\n+  id: string;\n+  username: string;\n+  name: string;\n+  profile_image_url?: string;\n+};\n+\n+type TweetMetrics = {\n+  retweet_count?: number;\n+  reply_count?: number;\n+  like_count?: number;\n+  quote_count?: number;\n+  bookmark_count?: number;\n+  impression_count?: number;\n+};\n+\n+type TweetEntitiesUrl = {\n+  url?: string;\n+  expanded_url?: string;\n+  display_url?: string;\n+  media_key?: string;\n+};\n+\n+type Tweet = {\n+  id: string;\n+  text: string;\n+  created_at: string;\n+  author_id: string;\n+  author: TweetAuthor;\n+  public_metrics?: TweetMetrics;\n+  entities?: { urls?: TweetEntitiesUrl[]; cashtags?: { tag: string }[] };\n+};\n+\n+type TweetsResponse = {\n+  is_enabled: boolean;\n+  tweets: Tweet[];\n+};\n+\n+type Props = {\n+  /** Solana mint address for the token (required by the API) */\n+  tokenAddress: string;\n+\n+  /**\n+   * Chain identifier.\n+   * We treat Solana as supported and everything else as \"coming soon\".\n+   * Common values you might pass: \"solana\", 101, \"solana-mainnet\".\n+   */\n+  chainId: string | number;\n+\n+  /** Optional: override panel title (default: \"Twitter Feed\") */\n+  title?: string;\n+\n+  /** Optional: panel height when expanded; content scrolls inside (default: 340) */\n+  heightPx?: number;\n+\n+  /** Optional: polling interval while open (ms). Set 0 to disable (default: 90_000) */\n+  refreshMs?: number;\n+\n+  /**\n+   * Optional: className hooks to better match your repo CSS quickly.\n+   * If your Security section uses particular classes, map them here.\n+   */\n+  classNames?: {\n+    root?: string;           // wrapper of the whole panel\n+    headerRow?: string;      // clickable header row container\n+    headerLeft?: string;     // title container\n+    headerRight?: string;    // right-aligned controls\n+    expandBtn?: string;      // toggle button\n+    content?: string;        // collapsible content container\n+    card?: string;           // tweet card wrapper\n+    authorRow?: string;      // author (avatar + names) row\n+    authorName?: string;     // author display name\n+    authorHandle?: string;   // @handle\n+    metaRow?: string;        // created_at + views\n+    text?: string;           // tweet text\n+    metricsRow?: string;     // likes/replies/etc row\n+    pill?: string;           // small status pill (for unavailable/soon)\n+  };\n+};\n+\n+/**\n+ * Loose detection for Solana.\n+ * Feel free to simplify if your app already knows (e.g., boolean isSolana prop).\n+ */\n+function isSolana(chainId: Props[\"chainId\"]) {\n+  if (typeof chainId === \"number\") return chainId === 101; // common Solana id in some apps\n+  const v = String(chainId).toLowerCase();\n+  return v.includes(\"solana\") || v === \"sol\";\n+}\n+\n+const TwitterFeedPanel: React.FC<Props> = ({\n+  tokenAddress,\n+  chainId,\n+  title = \"Twitter Feed\",\n+  heightPx = 340,\n+  refreshMs = 90_000,\n+  classNames = {},\n+}) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const [loading, setLoading] = useState(false);\n+  const [err, setErr] = useState<null | \"comingSoon\" | \"unavailable\">(null);\n+  const [data, setData] = useState<TweetsResponse | null>(null);\n+\n+  const canShowFeed = useMemo(() => isSolana(chainId), [chainId]);\n+\n+  const url = useMemo(() => {\n+    const u = new URL(\"/.netlify/functions/tweets\", window.location.origin);\n+    u.searchParams.set(\"token_address\", tokenAddress);\n+    u.searchParams.set(\"compact\", \"false\");\n+    return u.toString();\n+  }, [tokenAddress]);\n+\n+  const fetchTweets = useCallback(async (signal?: AbortSignal) => {\n+    if (!canShowFeed) {\n+      setErr(\"comingSoon\");\n+      setData(null);\n+      return;\n+    }\n+    setErr(null);\n+    setLoading(true);\n+    try {\n+      const r = await fetch(url, { method: \"GET\", credentials: \"omit\", signal });\n+      if (!r.ok) throw new Error(`HTTP ${r.status}`);\n+      const json: TweetsResponse = await r.json();\n+\n+      if (!json?.is_enabled) {\n+        setErr(\"unavailable\");\n+        setData(null);\n+      } else if (!json.tweets || json.tweets.length === 0) {\n+        setErr(\"unavailable\");\n+        setData({ is_enabled: true, tweets: [] });\n+      } else {\n+        setData(json);\n+      }\n+    } catch (_e) {\n+      setErr(\"unavailable\");\n+      setData(null);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [url, canShowFeed]);\n+\n+  // Load on first expand, then poll while open (if refreshMs > 0)\n+  useEffect(() => {\n+    if (!expanded) return;\n+\n+    const ctrl = new AbortController();\n+    fetchTweets(ctrl.signal);\n+\n+    if (refreshMs > 0) {\n+      const id = setInterval(() => fetchTweets(ctrl.signal), refreshMs);\n+      return () => {\n+        ctrl.abort();\n+        clearInterval(id);\n+      };\n+    }\n+    return () => ctrl.abort();\n+  }, [expanded, fetchTweets, refreshMs]);\n+\n+  // --- UI helpers\n+  const openTweet = (t: Tweet) =>\n+    window.open(`https://x.com/${t.author?.username}/status/${t.id}`, \"_blank\", \"noopener,noreferrer\");\n+\n+  return (\n+    <div className={classNames.root ?? \"security-section\"}>\n+      {/* Header row (need to match security section style) */}\n+      <div\n+        className={classNames.headerRow ?? \"detail-panel__row\"}\n+        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", gap: 8 }}\n+      >\n+        <div className={classNames.headerLeft ?? \"tweets-name\"}>\n+          {title}\n+        </div>\n+        <div className={classNames.headerRight ?? \"detail-panel__controls\"}>\n+          <button\n+            type=\"button\"\n+            className={classNames.expandBtn ?? \"detail-panel__expand\"}\n+            onClick={() => setExpanded((v) => !v)}\n+            aria-expanded={expanded}\n+            aria-controls=\"twitter-feed-content\"\n+            title={expanded ? \"Collapse\" : \"Expand\"}\n+            style={{\n+              border: 0,\n+              background: \"transparent\",\n+              color: \"inherit\",\n+              cursor: \"pointer\",\n+              lineHeight: 0,\n+            }}\n+          >\n+            {/* simple chevron */}\n+            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{ transform: expanded ? \"rotate(180deg)\" : \"none\", transition: \"transform .15s\" }}>\n+              <path d=\"M7 10l5 5 5-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n+            </svg>\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Collapsible content */}\n+      {expanded && (\n+        <div\n+          id=\"twitter-feed-content\"\n+          className={classNames.content ?? \"detail-panel__content\"}\n+          style={{\n+            position: \"relative\",\n+            padding: \"8px 0 0\",\n+          }}\n+        >\n+          {loading && <ChartLoader message=\"Loading feed…\" />}\n+\n+          {/* Coming soon / unavailable states */}\n+          {!loading && err === \"comingSoon\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is coming soon.</span>\n+            </div>\n+          )}\n+\n+          {!loading && err === \"unavailable\" && (\n+            <div style={{ display: \"grid\", placeItems: \"center\", padding: \"16px 0\" }}>\n+              <span className={classNames.pill ?? \"pill pill--muted\"}>Feed is unavailable.</span>\n+            </div>\n+          )}\n+\n+          {/* Tweets list */}\n+          {!loading && !err && data?.tweets && (\n+            <div\n+              style={{\n+                maxHeight: heightPx,\n+                overflow: \"scroll\",\n+                display: \"grid\",\n+                gap: 8,\n+              }}\n+            >\n+              {data.tweets.map((t) => (\n+                <article\n+                  key={t.id}\n+                  className={classNames.card ?? \"card\"}\n+                  style={{\n+                    borderRadius: 12,\n+                    padding: 12,\n+                    background: \"var(--bg-elev-2)\",\n+                  }}\n+                >\n+                  {/* Author */}\n+                  <div className={classNames.authorRow ?? \"tweet__author\"} style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n+                    {t.author?.profile_image_url ? (\n+                      <img\n+                        src={t.author.profile_image_url}\n+                        alt={t.author?.name || t.author?.username}\n+                        width={30}\n+                        height={30}\n+                        style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n+                        loading=\"lazy\"\n+                      />\n+                    ) : (\n+                      <div style={{ width: 30, height: 30, borderRadius: \"50%\", background: \"var(--muted, #333)\" }}><img /></div>\n+                    )}\n+                    <div style={{ display: \"flex\", alignItems: \"baseline\", minWidth: 0, flexDirection: \"column\" }}>\n+                      <div className={classNames.authorName ?? \"tweet__name\"} style={{ fontSize: 13, fontWeight: 600, overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\" }}>\n+                        {t.author?.name || \"Unknown\"}\n+                      </div>\n+                      <div className={classNames.authorHandle ?? \"tweet__handle\"} style={{ fontSize: 12, opacity: 0.75 }}>\n+                        @{t.author?.username}\n+                      </div>\n+                    </div>\n+                  </div>\n+\n+                  {/* Text */}\n+                  <div className={classNames.text ?? \"tweet__text\"} style={{ marginTop: 8, fontSize: 13, whiteSpace: \"pre-wrap\", lineHeight: 1.35 }}>\n+                    {t.text}\n+                  </div>\n+\n+                  {/* URLs (simple list) */}\n+                  {!!t.entities?.urls?.length && (\n+                    <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 16 }}>\n+                      {t.entities.urls.map((u, i) => {\n+                        const href = u.expanded_url || u.url;\n+                        if (!href) return null;\n+                        return (\n+                          <li key={i} style={{ fontSize: 12 }}>\n+                            <a href={href} target=\"_blank\" rel=\"noreferrer noopener\" style={{ textDecoration: \"underline\" }}>\n+                              {u.display_url || href}\n+                            </a>\n+                          </li>\n+                        );\n+                      })}\n+                    </ul>\n+                  )}\n+\n+                  {/* Meta: time + impressions */}\n+                  <div className={classNames.metaRow ?? \"tweet__meta\"} style={{ marginTop: 8, fontSize: 11, opacity: 0.7, display: \"flex\", gap: 8 }}>\n+                    <span>{new Date(t.created_at).toLocaleString()}</span>\n+                    {typeof t.public_metrics?.impression_count === \"number\" && (\n+                      <span>· {t.public_metrics.impression_count.toLocaleString()} views</span>\n+                    )}\n+                  </div>\n+\n+                  {/* Metrics */}\n+                  <div className={classNames.metricsRow ?? \"tweet__metrics\"} style={{ marginTop: 8, fontSize: 12, display: \"flex\", gap: 12, opacity: 0.85 }}>\n+                    <span><FavoriteBorder fontSize=\"small\" /> {t.public_metrics?.like_count ?? 0}</span>\n+                    <span><KeyboardReturn fontSize=\"small\" /> {t.public_metrics?.reply_count ?? 0}</span>\n+                    <span><Repeat fontSize=\"small\" /> {t.public_metrics?.retweet_count ?? 0}</span>\n+                    <span><TurnedInNot fontSize=\"small\" /> {t.public_metrics?.bookmark_count ?? 0}</span>\n+                  </div>\n+\n+                  {/* CTA */}\n+                  <div style={{ marginTop: 10 }}>\n+                    <button\n+                      type=\"button\"\n+                      onClick={() => openTweet(t)}\n+                      style={{\n+                        border: \"1px solid var(--border, rgba(255,255,255,0.12))\",\n+                        background: \"transparent\",\n+                        color: \"inherit\",\n+                        borderRadius: 8,\n+                        padding: \"6px 10px\",\n+                        fontSize: 12,\n+                        cursor: \"pointer\",\n+                      }}\n+                    >\n+                      Read on X\n+                    </button>\n+                  </div>\n+                </article>\n+              ))}\n+            </div>\n+          )}\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default TwitterFeedPanel;\n"
                }
            ],
            "date": 1755635375696,
            "name": "Commit-0",
            "content": "import { useState, useEffect, useRef, useMemo } from 'react';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChartLoader from './ChartLoader';\n\ninterface Props {\n  chain: string;\n  address: string;\n  twitterUrl?: string;\n}\n\nconst TwitterFeedPanel: React.FC<Props> = ({ chain, address, twitterUrl }) => {\n  const [expanded, setExpanded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedError, setFeedError] = useState<null | 'comingSoon' | 'unavailable'>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Derive Twitter handle from the URL (e.g. \"https://twitter.com/Project\" -> \"Project\")\n  const twitterHandle = useMemo(() => {\n    if (!twitterUrl) return '';\n    const match = twitterUrl.match(/(?:twitter\\.com|x\\.com)\\/([^\\/\\?]+)/i);\n    return match ? match[1] : '';\n  }, [twitterUrl]);\n\n  useEffect(() => {\n    if (!expanded) return;\n    // If chain is not Solana, no feed is available yet\n    if (chain.toLowerCase() !== 'solana') {\n      setFeedError('comingSoon');\n      return;\n    }\n    // If no handle available for a Solana token, treat as unavailable\n    if (!twitterHandle) {\n      setFeedError('unavailable');\n      return;\n    }\n    // Reset error and show loader while fetching tweets\n    setFeedError(null);\n    setLoading(true);\n\n    // Helper to embed the Twitter timeline\n    const embedTimeline = () => {\n      const target = containerRef.current;\n      if (!target) return;\n      (window as any).twttr.widgets.createTimeline(\n        { sourceType: 'profile', screenName: twitterHandle },\n        target,\n        { height: 300, theme: 'dark', chrome: 'transparent' }  // 300px tall, dark theme, no background borders\n      ).then(() => {\n        setLoading(false);\n      }).catch(() => {\n        setLoading(false);\n        setFeedError('unavailable');\n      });\n    };\n\n    // Ensure the Twitter widgets script is loaded, then create the timeline\n    if (!(window as any).twttr?.widgets) {\n      const script = document.createElement('script');\n      script.src = 'https://platform.twitter.com/widgets.js';\n      script.async = true;\n      script.onload = () => {\n        if ((window as any).twttr?.widgets) {\n          embedTimeline();\n        } else {\n          setLoading(false);\n          setFeedError('unavailable');\n        }\n      };\n      document.body.appendChild(script);\n    } else {\n      // Script already loaded, directly embed\n      embedTimeline();\n    }\n  }, [expanded, chain, twitterHandle]);\n\n  return (\n    <div className=\"security-section\">\n      {/* Header row (collapsed view) */}\n      <div className=\"security-row\">\n        <div className=\"security-name\">\n          <span>Twitter Feed</span>\n        </div>\n        <div className=\"security-result\">\n          {/* Expand/collapse toggle */}\n          <button \n            className=\"security-expand\" \n            onClick={() => setExpanded(prev => !prev)}\n            aria-label=\"Toggle Twitter feed\"\n          >\n            <ExpandMoreIcon sx={{ fontSize: 16 }} />\n          </button>\n        </div>\n      </div>\n\n      {/* Expandable content */}\n      {expanded && (\n        <div className=\"twitter-feed-content\" style={{ position: 'relative', paddingBottom: '8px' }}>\n          {/* Loader animation while tweets load */}\n          {loading && <ChartLoader message=\"Loading feed...\" />}\n\n          {/* \"Coming soon\" message for unsupported chains */}\n          {feedError === 'comingSoon' && (\n            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n              <span className=\"security-status pending\">Feed is coming soon.</span>\n            </div>\n          )}\n\n          {/* \"Unavailable\" message for errors/no-data */}\n          {feedError === 'unavailable' && (\n            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n              <span className=\"security-status pending\">Feed is unavailable.</span>\n            </div>\n          )}\n\n          {/* Container for the embedded Twitter timeline */}\n          <div ref={containerRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TwitterFeedPanel;\n"
        }
    ]
}