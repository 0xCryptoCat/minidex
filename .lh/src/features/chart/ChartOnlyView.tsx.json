{
    "sourceFile": "src/features/chart/ChartOnlyView.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755352612658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755364214224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,34 +29,43 @@\n   const [showMarkers, setShowMarkers] = useState(false);\n   const [markers, setMarkers] = useState<TradeMarkerCluster[]>([]);\n   const [noTrades, setNoTrades] = useState(false);\n   const [tf, setTf] = useState<Timeframe | null>(null);\n+  const [tfLoading, setTfLoading] = useState(true);\n+  const [tfError, setTfError] = useState(false);\n   const [meta, setMeta] = useState<FetchMeta | null>(null);\n   const loggedRef = useRef(false);\n   const DEBUG = (import.meta as any).env?.DEBUG === 'true';\n \n   useEffect(() => {\n     const cached = getCachedTf(pairId, provider);\n     if (cached) {\n       setTf(cached);\n+      setTfLoading(false);\n       return;\n     }\n     const order: Timeframe[] =\n       provider === 'cg' ? ['1m', '5m'] : provider === 'gt' ? ['5m', '15m', '1h'] : ['1m'];\n     (async () => {\n+      setTfLoading(true);\n+      setTfError(false);\n       for (const t of order) {\n         try {\n           const res = await ohlc({ pairId, chain, poolAddress, tf: t });\n           if (res.data.candles.length > 0 || res.data.effectiveTf) {\n             const eff = res.data.effectiveTf || t;\n             setTf(eff);\n             setCachedTf(pairId, provider, eff);\n-            break;\n+            setTfLoading(false);\n+            return;\n           }\n         } catch {\n           /* ignore and try next */\n         }\n       }\n+      // If we get here, no timeframes worked\n+      setTfError(true);\n+      setTfLoading(false);\n     })();\n   }, [pairId, provider, chain, poolAddress]);\n \n   useEffect(() => {\n@@ -93,12 +102,20 @@\n       return next;\n     });\n   }\n \n-  if (!tf) {\n+  if (tfLoading) {\n     return <div>Loading…</div>;\n   }\n \n+  if (tfError || !tf) {\n+    return (\n+      <div className=\"limitation-notice\">\n+        Chart data not available for this pair.\n+      </div>\n+    );\n+  }\n+\n   return (\n     <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n       <div style={{ padding: '16px 16px 8px', borderBottom: '1px solid var(--border-subtle)' }}>\n         <label style={{ \n"
                }
            ],
            "date": 1755352612658,
            "name": "Commit-0",
            "content": "import { useState, useEffect, useRef } from 'react';\nimport type { Timeframe, Provider } from '../../lib/types';\nimport PriceChart from './PriceChart';\nimport { getTradeMarkers, type TradeMarkerCluster } from '../trades/TradeMarkers';\nimport { ohlc } from '../../lib/api';\nimport { getCachedTf, setCachedTf } from '../../lib/tf-cache';\nimport { getTradesCache } from '../../lib/cache';\nimport { formatFetchMeta, type FetchMeta } from '../../lib/format';\n\ninterface Props {\n  pairId: string;\n  chain: string;\n  poolAddress: string;\n  provider: Provider;\n  xDomain: [number, number] | null;\n  onXDomainChange?: (d: [number, number]) => void;\n  tokenAddress: string;\n}\n\nexport default function ChartOnlyView({\n  pairId,\n  chain,\n  poolAddress,\n  provider,\n  xDomain,\n  onXDomainChange,\n  tokenAddress,\n}: Props) {\n  const [showMarkers, setShowMarkers] = useState(false);\n  const [markers, setMarkers] = useState<TradeMarkerCluster[]>([]);\n  const [noTrades, setNoTrades] = useState(false);\n  const [tf, setTf] = useState<Timeframe | null>(null);\n  const [meta, setMeta] = useState<FetchMeta | null>(null);\n  const loggedRef = useRef(false);\n  const DEBUG = (import.meta as any).env?.DEBUG === 'true';\n\n  useEffect(() => {\n    const cached = getCachedTf(pairId, provider);\n    if (cached) {\n      setTf(cached);\n      return;\n    }\n    const order: Timeframe[] =\n      provider === 'cg' ? ['1m', '5m'] : provider === 'gt' ? ['5m', '15m', '1h'] : ['1m'];\n    (async () => {\n      for (const t of order) {\n        try {\n          const res = await ohlc({ pairId, chain, poolAddress, tf: t });\n          if (res.data.candles.length > 0 || res.data.effectiveTf) {\n            const eff = res.data.effectiveTf || t;\n            setTf(eff);\n            setCachedTf(pairId, provider, eff);\n            break;\n          }\n        } catch {\n          /* ignore and try next */\n        }\n      }\n    })();\n  }, [pairId, provider, chain, poolAddress]);\n\n  useEffect(() => {\n    if (showMarkers) {\n      const m = getTradeMarkers(pairId, chain, poolAddress, tokenAddress);\n      setMarkers(m);\n      setNoTrades(m.length === 0);\n      const parts: string[] = [];\n      if (chain) parts.push(chain);\n      parts.push(pairId);\n      if (poolAddress) parts.push(poolAddress);\n      parts.push(tokenAddress);\n      const key = parts.join(':');\n      const cached = getTradesCache(key);\n      setMeta(cached?.meta || null);\n    }\n  }, [pairId, chain, poolAddress, tokenAddress, showMarkers]);\n\n  useEffect(() => {\n    if (showMarkers && noTrades && meta && !loggedRef.current && DEBUG) {\n      console.log('no-trades meta', meta);\n      loggedRef.current = true;\n    }\n  }, [showMarkers, noTrades, meta]);\n\n  function handleToggle() {\n    setShowMarkers((v) => {\n      const next = !v;\n      if (next) {\n        setMarkers(getTradeMarkers(pairId, chain, poolAddress, tokenAddress));\n      } else {\n        setMarkers([]);\n      }\n      return next;\n    });\n  }\n\n  if (!tf) {\n    return <div>Loading…</div>;\n  }\n\n  return (\n    <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      <div style={{ padding: '16px 16px 8px', borderBottom: '1px solid var(--border-subtle)' }}>\n        <label style={{ \n          display: 'flex', \n          alignItems: 'center', \n          gap: '8px',\n          fontSize: '14px',\n          cursor: 'pointer'\n        }}>\n          <input \n            type=\"checkbox\" \n            checked={showMarkers} \n            onChange={handleToggle}\n            style={{ accentColor: 'var(--accent-telegram)' }}\n          /> \n          Trade markers\n        </label>\n      </div>\n      {showMarkers && noTrades && (\n        <div style={{ \n          padding: '8px 16px', \n          fontSize: '13px', \n          color: 'var(--text-muted)',\n          borderBottom: '1px solid var(--border-subtle)'\n        }}>\n          <div>No trades available</div>\n          {meta && formatFetchMeta(meta) && (\n            <div style={{ fontSize: '11px', marginTop: '4px' }}>{formatFetchMeta(meta)}</div>\n          )}\n        </div>\n      )}\n      <div style={{ flex: 1, position: 'relative' }}>\n        <PriceChart\n          pairId={pairId}\n          tf={tf}\n          xDomain={xDomain}\n          onXDomainChange={onXDomainChange}\n          markers={showMarkers ? markers : []}\n          chain={chain}\n          poolAddress={poolAddress}\n          tokenAddress={tokenAddress}\n        />\n      </div>\n    </div>\n  );\n}\n\n"
        }
    ]
}