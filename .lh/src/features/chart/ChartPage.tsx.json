{
    "sourceFile": "src/features/chart/ChartPage.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1755347748705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755352713345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n           )}\n \n           {/* View-specific content */}\n           {view === 'chart' && currentPool && currentPool.poolAddress && provider && address && (\n-            <>\n+            <div className=\"chart-view-content\">\n               {currentPool.gtSupported === false && (\n                 <div className=\"limitation-notice\">\n                   Chart not available on this DEX; showing limited data.\n                 </div>\n@@ -180,13 +180,13 @@\n                   onXDomainChange={setXDomain}\n                   tokenAddress={address}\n                 />\n               </div>\n-            </>\n+            </div>\n           )}\n \n           {view === 'trades' && currentPool && currentPool.poolAddress && address && (\n-            <>\n+            <div className=\"trades-view-content\">\n               {currentPool.gtSupported === false && (\n                 <div className=\"limitation-notice\">\n                   Trades not available on this DEX; showing limited data.\n                 </div>\n@@ -200,20 +200,22 @@\n                   baseSymbol={tradeSymbols?.baseSymbol || currentPool.base}\n                   quoteSymbol={tradeSymbols?.quoteSymbol || currentPool.quote}\n                 />\n               </div>\n-            </>\n+            </div>\n           )}\n \n           {view === 'detail' && currentPool && address && (\n-            <DetailView\n-              chain={currentPool.chain}\n-              address={address}\n-              pairId={currentPool.pairId}\n-              pools={pools}\n-              onSwitch={handlePoolSwitch}\n-              hideDetailTop={true} // Don't show DetailTop again in DetailView\n-            />\n+            <div className=\"detail-view-content\">\n+              <DetailView\n+                chain={currentPool.chain}\n+                address={address}\n+                pairId={currentPool.pairId}\n+                pools={pools}\n+                onSwitch={handlePoolSwitch}\n+                hideDetailTop={true} // Don't show DetailTop again in DetailView\n+              />\n+            </div>\n           )}\n         </div>\n       )}\n \n"
                },
                {
                    "date": 1755364214223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,13 +164,8 @@\n \n           {/* View-specific content */}\n           {view === 'chart' && currentPool && currentPool.poolAddress && provider && address && (\n             <div className=\"chart-view-content\">\n-              {currentPool.gtSupported === false && (\n-                <div className=\"limitation-notice\">\n-                  Chart not available on this DEX; showing limited data.\n-                </div>\n-              )}\n               <div className=\"chart-container\">\n                 <ChartOnlyView\n                   pairId={currentPool.pairId}\n                   chain={currentPool.chain}\n@@ -185,13 +180,8 @@\n           )}\n \n           {view === 'trades' && currentPool && currentPool.poolAddress && address && (\n             <div className=\"trades-view-content\">\n-              {currentPool.gtSupported === false && (\n-                <div className=\"limitation-notice\">\n-                  Trades not available on this DEX; showing limited data.\n-                </div>\n-              )}\n               <div className=\"trades-container\">\n                 <TradesOnlyView\n                   pairId={currentPool.pairId}\n                   chain={currentPool.chain}\n"
                },
                {
                    "date": 1755434210974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { useEffect, useState } from 'react';\n import { useParams, useNavigate, useSearchParams } from 'react-router-dom';\n import type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\n import { pairs, token as fetchToken } from '../../lib/api';\n+import { poolDataManager } from '../../lib/pool-manager';\n import PoolSwitcher from './PoolSwitcher';\n import ChartOnlyView from './ChartOnlyView';\n import DetailView from './DetailView';\n import DetailTop from './DetailTop';\n@@ -74,8 +75,12 @@\n           if (sup !== 0) return sup;\n           return (b.liqUsd || 0) - (a.liqUsd || 0);\n         });\n         setPools(sorted);\n+        \n+        // Cache each pool individually\n+        poolDataManager.cachePools(sorted);\n+        \n         const sel = sorted.find((p) => p.pairId === pairId) || sorted[0];\n         setCurrentPool(sel || null);\n         setNoData(!sel || !sel.poolAddress);\n       })\n@@ -110,8 +115,12 @@\n   }, [chain, address]);\n \n   function handlePoolSwitch(p: PoolSummary) {\n     const scroll = window.scrollY;\n+    \n+    // Update the pool data in the manager (in case there are any updates)\n+    poolDataManager.updatePool(p);\n+    \n     setCurrentPool(p);\n     setXDomain((d) => d);\n     if (address) {\n       navigate(`/t/${p.chain}/${address}/${p.pairId}`, { replace: true });\n"
                },
                {
                    "date": 1755525881954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import { useEffect, useState } from 'react';\n+import { useParams, useNavigate, useSearchParams } from 'react-router-dom';\n+import type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\n+import { pairs, token as fetchToken } from '../../lib/api';\n+import { poolDataManager } from '../../lib/pool-manager';\n+import PoolSwitcher from './PoolSwitcher';\n+import ChartOnlyView from './ChartOnlyView';\n+import DetailView from './DetailView';\n+import DetailTop from './DetailTop';\n+import TradesOnlyView from '../trades/TradesOnlyView';\n+import copy from '../../copy/en.json';\n+import { useProvider } from '../../lib/provider';\n+import { resolvePairSymbols } from '../../lib/pairs';\n+\n+// Views for chart page\n+type View = 'chart' | 'trades' | 'detail';\n+\n+export default function ChartPage() {\n+  const { chain, address, pairId } = useParams<{ chain: string; address: string; pairId?: string }>();\n+  const navigate = useNavigate();\n+  const [token, setToken] = useState<TokenMeta | null>(null);\n+  const [tokenDetail, setTokenDetail] = useState<TokenResponse | null>(null);\n+  const [pools, setPools] = useState<PoolSummary[]>([]);\n+  const [currentPool, setCurrentPool] = useState<PoolSummary | null>(null);\n+  const [provider, setProvider] = useState<Provider | null>(null);\n+  const [searchParams, setSearchParams] = useSearchParams();\n+  const view = (searchParams.get('view') as View) || 'detail';\n+  const [xDomain, setXDomain] = useState<[number, number] | null>(null);\n+  const [loading, setLoading] = useState(true);\n+  const [detailLoading, setDetailLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+  const [noData, setNoData] = useState(false);\n+  const [unsupported, setUnsupported] = useState(false);\n+  const { setProvider: setGlobalProvider } = useProvider();\n+\n+  useEffect(() => {\n+    if (!searchParams.get('view')) {\n+      const params = new URLSearchParams(searchParams);\n+      params.set('view', 'detail');\n+      setSearchParams(params, { replace: true });\n+    }\n+  }, [searchParams, setSearchParams]);\n+\n+  useEffect(() => {\n+    if (!chain || !address) {\n+      setNoData(true);\n+      return;\n+    }\n+    let cancelled = false;\n+    setUnsupported(false);\n+    setLoading(true);\n+    setDetailLoading(true);\n+    setError(null);\n+    setProvider(null);\n+    setGlobalProvider('');\n+\n+    // Fetch pairs data\n+    pairs(chain, address)\n+      .then(({ data }) => {\n+        if (cancelled) return;\n+        if ('error' in data) {\n+          if (data.error === 'unsupported_network') {\n+            setUnsupported(true);\n+          } else {\n+            setError(data.error);\n+          }\n+          setNoData(true);\n+          return;\n+        }\n+        setToken(data.token);\n+        setProvider(data.provider);\n+        setGlobalProvider(data.provider);\n+        const sorted = data.pools.slice().sort((a, b) => {\n+          const sup = Number(!!b.gtSupported) - Number(!!a.gtSupported);\n+          if (sup !== 0) return sup;\n+          return (b.liqUsd || 0) - (a.liqUsd || 0);\n+        });\n+        setPools(sorted);\n+        \n+        // Cache each pool individually\n+        poolDataManager.cachePools(sorted);\n+        \n+        const sel = sorted.find((p) => p.pairId === pairId) || sorted[0];\n+        setCurrentPool(sel || null);\n+        setNoData(!sel || !sel.poolAddress);\n+      })\n+      .catch(() => {\n+        if (!cancelled) {\n+          setError('network');\n+          setNoData(true);\n+        }\n+      })\n+      .finally(() => {\n+        if (!cancelled) setLoading(false);\n+      });\n+\n+    // Fetch token detail data\n+    fetchToken(chain, address)\n+      .then(({ data }) => {\n+        if (cancelled) return;\n+        if (!('error' in data)) {\n+          setTokenDetail(data);\n+        }\n+      })\n+      .catch(() => {\n+        // Token detail is optional, so we don't handle errors\n+      })\n+      .finally(() => {\n+        if (!cancelled) setDetailLoading(false);\n+      });\n+\n+    return () => {\n+      cancelled = true;\n+    };\n+  }, [chain, address]);\n+\n+  function handlePoolSwitch(p: PoolSummary) {\n+    const scroll = window.scrollY;\n+    \n+    // Update the pool data in the manager (in case there are any updates)\n+    poolDataManager.updatePool(p);\n+    \n+    setCurrentPool(p);\n+    setXDomain((d) => d);\n+    if (address) {\n+      navigate(`/t/${p.chain}/${address}/${p.pairId}`, { replace: true });\n+    }\n+    setNoData(!p.poolAddress);\n+    requestAnimationFrame(() => window.scrollTo(0, scroll));\n+  }\n+\n+  const tradeSymbols =\n+    currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n+\n+  return (\n+    <div className=\"chart-page\">\n+      {loading && <div className=\"loading-state\">{copy.loading}</div>}\n+\n+      {unsupported && (\n+        <div className=\"error-state\">Network not supported (yet)</div>\n+      )}\n+\n+      {!loading && error && (\n+        <div className=\"error-state\">\n+          {error === 'rate_limit' ? copy.error_rate_limit : copy.error_generic}\n+        </div>\n+      )}\n+\n+      {!loading && !error && pools.length === 0 && (\n+        <div className=\"no-data-state\">{copy.no_pools}</div>\n+      )}\n+\n+      {!loading && !error && pools.length > 0 && (\n+        <div className=\"chart-content\">\n+          {/* Show DetailTop for all views if we have token detail */}\n+          {tokenDetail && currentPool && !detailLoading && (\n+            <DetailTop\n+              detail={tokenDetail}\n+              pairId={currentPool.pairId}\n+              pools={pools}\n+              chain={chain!}\n+              onPoolSwitch={handlePoolSwitch}\n+            />\n+          )}\n+\n+          {/* Show loading skeleton if detail is still loading */}\n+          {detailLoading && (\n+            <div className=\"detail-top-skeleton\">\n+              <div className=\"loading-skeleton\" style={{ height: 200, marginBottom: '1rem' }} />\n+              <div className=\"loading-skeleton\" style={{ height: 100 }} />\n+            </div>\n+          )}\n+\n+          {/* View-specific content */}\n+          {view === 'chart' && currentPool && currentPool.poolAddress && provider && address && (\n+            <div className=\"chart-view-content\">\n+              <div className=\"chart-container\">\n+                <ChartOnlyView\n+                  pairId={currentPool.pairId}\n+                  chain={currentPool.chain}\n+                  poolAddress={currentPool.poolAddress}\n+                  provider={provider}\n+                  xDomain={xDomain}\n+                  onXDomainChange={setXDomain}\n+                  tokenAddress={address}\n+                />\n+              </div>\n+            </div>\n+          )}\n+\n+          {view === 'trades' && currentPool && currentPool.poolAddress && address && (\n+            <div className=\"trades-view-content\">\n+              <TradesOnlyView\n+                pairId={currentPool.pairId}\n+                chain={currentPool.chain}\n+                poolAddress={currentPool.poolAddress}\n+                tokenAddress={address}\n+                baseSymbol={tradeSymbols?.baseSymbol || currentPool.base}\n+                quoteSymbol={tradeSymbols?.quoteSymbol || currentPool.quote}\n+              />\n+            </div>\n+          )}\n+\n+          {view === 'detail' && currentPool && address && (\n+            <div className=\"detail-view-content\">\n+              <DetailView\n+                chain={currentPool.chain}\n+                address={address}\n+                pairId={currentPool.pairId}\n+                pools={pools}\n+                onSwitch={handlePoolSwitch}\n+                hideDetailTop={true} // Don't show DetailTop again in DetailView\n+              />\n+            </div>\n+          )}\n+        </div>\n+      )}\n+\n+      {noData && (\n+        <div className=\"no-data-state\">No data available for this token</div>\n+      )}\n+    </div>\n+  );\n+}\n+\n"
                },
                {
                    "date": 1755535034361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,9 @@\n                   provider={provider}\n                   xDomain={xDomain}\n                   onXDomainChange={setXDomain}\n                   tokenAddress={address}\n+                  tokenDetail={tokenDetail}\n                 />\n               </div>\n             </div>\n           )}\n@@ -222,231 +223,4 @@\n     </div>\n   );\n }\n \n-import { useEffect, useState } from 'react';\n-import { useParams, useNavigate, useSearchParams } from 'react-router-dom';\n-import type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\n-import { pairs, token as fetchToken } from '../../lib/api';\n-import { poolDataManager } from '../../lib/pool-manager';\n-import PoolSwitcher from './PoolSwitcher';\n-import ChartOnlyView from './ChartOnlyView';\n-import DetailView from './DetailView';\n-import DetailTop from './DetailTop';\n-import TradesOnlyView from '../trades/TradesOnlyView';\n-import copy from '../../copy/en.json';\n-import { useProvider } from '../../lib/provider';\n-import { resolvePairSymbols } from '../../lib/pairs';\n-\n-// Views for chart page\n-type View = 'chart' | 'trades' | 'detail';\n-\n-export default function ChartPage() {\n-  const { chain, address, pairId } = useParams<{ chain: string; address: string; pairId?: string }>();\n-  const navigate = useNavigate();\n-  const [token, setToken] = useState<TokenMeta | null>(null);\n-  const [tokenDetail, setTokenDetail] = useState<TokenResponse | null>(null);\n-  const [pools, setPools] = useState<PoolSummary[]>([]);\n-  const [currentPool, setCurrentPool] = useState<PoolSummary | null>(null);\n-  const [provider, setProvider] = useState<Provider | null>(null);\n-  const [searchParams, setSearchParams] = useSearchParams();\n-  const view = (searchParams.get('view') as View) || 'detail';\n-  const [xDomain, setXDomain] = useState<[number, number] | null>(null);\n-  const [loading, setLoading] = useState(true);\n-  const [detailLoading, setDetailLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-  const [noData, setNoData] = useState(false);\n-  const [unsupported, setUnsupported] = useState(false);\n-  const { setProvider: setGlobalProvider } = useProvider();\n-\n-  useEffect(() => {\n-    if (!searchParams.get('view')) {\n-      const params = new URLSearchParams(searchParams);\n-      params.set('view', 'detail');\n-      setSearchParams(params, { replace: true });\n-    }\n-  }, [searchParams, setSearchParams]);\n-\n-  useEffect(() => {\n-    if (!chain || !address) {\n-      setNoData(true);\n-      return;\n-    }\n-    let cancelled = false;\n-    setUnsupported(false);\n-    setLoading(true);\n-    setDetailLoading(true);\n-    setError(null);\n-    setProvider(null);\n-    setGlobalProvider('');\n-\n-    // Fetch pairs data\n-    pairs(chain, address)\n-      .then(({ data }) => {\n-        if (cancelled) return;\n-        if ('error' in data) {\n-          if (data.error === 'unsupported_network') {\n-            setUnsupported(true);\n-          } else {\n-            setError(data.error);\n-          }\n-          setNoData(true);\n-          return;\n-        }\n-        setToken(data.token);\n-        setProvider(data.provider);\n-        setGlobalProvider(data.provider);\n-        const sorted = data.pools.slice().sort((a, b) => {\n-          const sup = Number(!!b.gtSupported) - Number(!!a.gtSupported);\n-          if (sup !== 0) return sup;\n-          return (b.liqUsd || 0) - (a.liqUsd || 0);\n-        });\n-        setPools(sorted);\n-        \n-        // Cache each pool individually\n-        poolDataManager.cachePools(sorted);\n-        \n-        const sel = sorted.find((p) => p.pairId === pairId) || sorted[0];\n-        setCurrentPool(sel || null);\n-        setNoData(!sel || !sel.poolAddress);\n-      })\n-      .catch(() => {\n-        if (!cancelled) {\n-          setError('network');\n-          setNoData(true);\n-        }\n-      })\n-      .finally(() => {\n-        if (!cancelled) setLoading(false);\n-      });\n-\n-    // Fetch token detail data\n-    fetchToken(chain, address)\n-      .then(({ data }) => {\n-        if (cancelled) return;\n-        if (!('error' in data)) {\n-          setTokenDetail(data);\n-        }\n-      })\n-      .catch(() => {\n-        // Token detail is optional, so we don't handle errors\n-      })\n-      .finally(() => {\n-        if (!cancelled) setDetailLoading(false);\n-      });\n-\n-    return () => {\n-      cancelled = true;\n-    };\n-  }, [chain, address]);\n-\n-  function handlePoolSwitch(p: PoolSummary) {\n-    const scroll = window.scrollY;\n-    \n-    // Update the pool data in the manager (in case there are any updates)\n-    poolDataManager.updatePool(p);\n-    \n-    setCurrentPool(p);\n-    setXDomain((d) => d);\n-    if (address) {\n-      navigate(`/t/${p.chain}/${address}/${p.pairId}`, { replace: true });\n-    }\n-    setNoData(!p.poolAddress);\n-    requestAnimationFrame(() => window.scrollTo(0, scroll));\n-  }\n-\n-  const tradeSymbols =\n-    currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n-\n-  return (\n-    <div className=\"chart-page\">\n-      {loading && <div className=\"loading-state\">{copy.loading}</div>}\n-\n-      {unsupported && (\n-        <div className=\"error-state\">Network not supported (yet)</div>\n-      )}\n-\n-      {!loading && error && (\n-        <div className=\"error-state\">\n-          {error === 'rate_limit' ? copy.error_rate_limit : copy.error_generic}\n-        </div>\n-      )}\n-\n-      {!loading && !error && pools.length === 0 && (\n-        <div className=\"no-data-state\">{copy.no_pools}</div>\n-      )}\n-\n-      {!loading && !error && pools.length > 0 && (\n-        <div className=\"chart-content\">\n-          {/* Show DetailTop for all views if we have token detail */}\n-          {tokenDetail && currentPool && !detailLoading && (\n-            <DetailTop\n-              detail={tokenDetail}\n-              pairId={currentPool.pairId}\n-              pools={pools}\n-              chain={chain!}\n-              onPoolSwitch={handlePoolSwitch}\n-            />\n-          )}\n-\n-          {/* Show loading skeleton if detail is still loading */}\n-          {detailLoading && (\n-            <div className=\"detail-top-skeleton\">\n-              <div className=\"loading-skeleton\" style={{ height: 200, marginBottom: '1rem' }} />\n-              <div className=\"loading-skeleton\" style={{ height: 100 }} />\n-            </div>\n-          )}\n-\n-          {/* View-specific content */}\n-          {view === 'chart' && currentPool && currentPool.poolAddress && provider && address && (\n-            <div className=\"chart-view-content\">\n-              <div className=\"chart-container\">\n-                <ChartOnlyView\n-                  pairId={currentPool.pairId}\n-                  chain={currentPool.chain}\n-                  poolAddress={currentPool.poolAddress}\n-                  provider={provider}\n-                  xDomain={xDomain}\n-                  onXDomainChange={setXDomain}\n-                  tokenAddress={address}\n-                />\n-              </div>\n-            </div>\n-          )}\n-\n-          {view === 'trades' && currentPool && currentPool.poolAddress && address && (\n-            <div className=\"trades-view-content\">\n-              <div className=\"trades-container\">\n-                <TradesOnlyView\n-                  pairId={currentPool.pairId}\n-                  chain={currentPool.chain}\n-                  poolAddress={currentPool.poolAddress}\n-                  tokenAddress={address}\n-                  baseSymbol={tradeSymbols?.baseSymbol || currentPool.base}\n-                  quoteSymbol={tradeSymbols?.quoteSymbol || currentPool.quote}\n-                />\n-              </div>\n-            </div>\n-          )}\n-\n-          {view === 'detail' && currentPool && address && (\n-            <div className=\"detail-view-content\">\n-              <DetailView\n-                chain={currentPool.chain}\n-                address={address}\n-                pairId={currentPool.pairId}\n-                pools={pools}\n-                onSwitch={handlePoolSwitch}\n-                hideDetailTop={true} // Don't show DetailTop again in DetailView\n-              />\n-            </div>\n-          )}\n-        </div>\n-      )}\n-\n-      {noData && (\n-        <div className=\"no-data-state\">No data available for this token</div>\n-      )}\n-    </div>\n-  );\n-}\n-\n"
                },
                {
                    "date": 1755714818848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { useParams, useNavigate, useSearchParams } from 'react-router-dom';\n import type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\n import { pairs, token as fetchToken } from '../../lib/api';\n import { poolDataManager } from '../../lib/pool-manager';\n+import { useGoSecurity } from '../../lib/useGoSecurity';\n import PoolSwitcher from './PoolSwitcher';\n import ChartOnlyView from './ChartOnlyView';\n import DetailView from './DetailView';\n import DetailTop from './DetailTop';\n@@ -32,8 +33,14 @@\n   const [noData, setNoData] = useState(false);\n   const [unsupported, setUnsupported] = useState(false);\n   const { setProvider: setGlobalProvider } = useProvider();\n \n+  // Fetch security data for market cap calculations and general security info\n+  const { loading: securityLoading, error: securityError, data: securityData } = useGoSecurity(\n+    chain || '', \n+    address || ''\n+  );\n+\n   useEffect(() => {\n     if (!searchParams.get('view')) {\n       const params = new URLSearchParams(searchParams);\n       params.set('view', 'detail');\n@@ -183,8 +190,9 @@\n                   xDomain={xDomain}\n                   onXDomainChange={setXDomain}\n                   tokenAddress={address}\n                   tokenDetail={tokenDetail}\n+                  securityData={securityData}\n                 />\n               </div>\n             </div>\n           )}\n"
                },
                {
                    "date": 1755851663428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { useGoSecurity } from '../../lib/useGoSecurity';\n import PoolSwitcher from './PoolSwitcher';\n import ChartOnlyView from './ChartOnlyView';\n import DetailView from './DetailView';\n-import DetailTop from './DetailTop';\n+import DetailTop from '../detail/DetailTop';\n import TradesOnlyView from '../trades/TradesOnlyView';\n import copy from '../../copy/en.json';\n import { useProvider } from '../../lib/provider';\n import { resolvePairSymbols } from '../../lib/pairs';\n"
                },
                {
                    "date": 1755851678268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,11 @@\n import type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\n import { pairs, token as fetchToken } from '../../lib/api';\n import { poolDataManager } from '../../lib/pool-manager';\n import { useGoSecurity } from '../../lib/useGoSecurity';\n-import PoolSwitcher from './PoolSwitcher';\n+import PoolSwitcher from '../detail/PoolSwitcher';\n import ChartOnlyView from './ChartOnlyView';\n-import DetailView from './DetailView';\n+import DetailView from '../detail/DetailView';\n import DetailTop from '../detail/DetailTop';\n import TradesOnlyView from '../trades/TradesOnlyView';\n import copy from '../../copy/en.json';\n import { useProvider } from '../../lib/provider';\n"
                },
                {
                    "date": 1755888203659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\n import { pairs, token as fetchToken } from '../../lib/api';\n import { poolDataManager } from '../../lib/pool-manager';\n import { useGoSecurity } from '../../lib/useGoSecurity';\n-import PoolSwitcher from '../detail/PoolSwitcher';\n import ChartOnlyView from './ChartOnlyView';\n import DetailView from '../detail/DetailView';\n import DetailTop from '../detail/DetailTop';\n import TradesOnlyView from '../trades/TradesOnlyView';\n"
                },
                {
                    "date": 1755889451069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,8 @@\n                   xDomain={xDomain}\n                   onXDomainChange={setXDomain}\n                   tokenAddress={address}\n                   tokenDetail={tokenDetail}\n-                  securityData={securityData}\n                 />\n               </div>\n             </div>\n           )}\n"
                },
                {
                    "date": 1756121122107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import { useEffect, useState } from 'react';\n+import { useParams, useNavigate, useSearchParams } from 'react-router-dom';\n+import type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\n+import { pairs, token as fetchToken } from '../../lib/api';\n+import { poolDataManager } from '../../lib/pool-manager';\n+import { useGoSecurity } from '../../lib/useGoSecurity';\n+import ChartOnlyView from './ChartOnlyView';\n+import DetailView from '../detail/DetailView';\n+import DetailTop from '../detail/DetailTop';\n+import TradesOnlyView from '../trades/TradesOnlyView';\n+import copy from '../../copy/en.json';\n+import { useProvider } from '../../lib/provider';\n+import { resolvePairSymbols } from '../../lib/pairs';\n+\n+// Views for chart page\n+type View = 'chart' | 'trades' | 'detail';\n+\n+export default function ChartPage() {\n+  const { chain, address, pairId } = useParams<{ chain: string; address: string; pairId?: string }>();\n+  const navigate = useNavigate();\n+  const [token, setToken] = useState<TokenMeta | null>(null);\n+  const [tokenDetail, setTokenDetail] = useState<TokenResponse | null>(null);\n+  const [pools, setPools] = useState<PoolSummary[]>([]);\n+  const [currentPool, setCurrentPool] = useState<PoolSummary | null>(null);\n+  const [provider, setProvider] = useState<Provider | null>(null);\n+  const [searchParams, setSearchParams] = useSearchParams();\n+  const view = (searchParams.get('view') as View) || 'detail';\n+  const [xDomain, setXDomain] = useState<[number, number] | null>(null);\n+  const [loading, setLoading] = useState(true);\n+  const [detailLoading, setDetailLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+  const [noData, setNoData] = useState(false);\n+  const [unsupported, setUnsupported] = useState(false);\n+  const { setProvider: setGlobalProvider } = useProvider();\n+\n+  // Fetch security data for market cap calculations and general security info\n+  const { loading: securityLoading, error: securityError, data: securityData } = useGoSecurity(\n+    chain || '', \n+    address || ''\n+  );\n+\n+  useEffect(() => {\n+    if (!searchParams.get('view')) {\n+      const params = new URLSearchParams(searchParams);\n+      params.set('view', 'detail');\n+      setSearchParams(params, { replace: true });\n+    }\n+  }, [searchParams, setSearchParams]);\n+\n+  useEffect(() => {\n+    if (!chain || !address) {\n+      setNoData(true);\n+      return;\n+    }\n+    let cancelled = false;\n+    setUnsupported(false);\n+    setLoading(true);\n+    setDetailLoading(true);\n+    setError(null);\n+    setProvider(null);\n+    setGlobalProvider('');\n+\n+    // Fetch pairs data\n+    pairs(chain, address)\n+      .then(({ data }) => {\n+        if (cancelled) return;\n+        if ('error' in data) {\n+          if (data.error === 'unsupported_network') {\n+            setUnsupported(true);\n+          } else {\n+            setError(data.error);\n+          }\n+          setNoData(true);\n+          return;\n+        }\n+        setToken(data.token);\n+        setProvider(data.provider);\n+        setGlobalProvider(data.provider);\n+        const sorted = data.pools.slice().sort((a, b) => {\n+          const sup = Number(!!b.gtSupported) - Number(!!a.gtSupported);\n+          if (sup !== 0) return sup;\n+          return (b.liqUsd || 0) - (a.liqUsd || 0);\n+        });\n+        setPools(sorted);\n+        \n+        // Cache each pool individually\n+        poolDataManager.cachePools(sorted);\n+        \n+        const sel = sorted.find((p) => p.pairId === pairId) || sorted[0];\n+        setCurrentPool(sel || null);\n+        setNoData(!sel || !sel.poolAddress);\n+      })\n+      .catch(() => {\n+        if (!cancelled) {\n+          setError('network');\n+          setNoData(true);\n+        }\n+      })\n+      .finally(() => {\n+        if (!cancelled) setLoading(false);\n+      });\n+\n+    // Fetch token detail data\n+    fetchToken(chain, address)\n+      .then(({ data }) => {\n+        if (cancelled) return;\n+        if (!('error' in data)) {\n+          setTokenDetail(data);\n+        }\n+      })\n+      .catch(() => {\n+        // Token detail is optional, so we don't handle errors\n+      })\n+      .finally(() => {\n+        if (!cancelled) setDetailLoading(false);\n+      });\n+\n+    return () => {\n+      cancelled = true;\n+    };\n+  }, [chain, address]);\n+\n+  function handlePoolSwitch(p: PoolSummary) {\n+    const scroll = window.scrollY;\n+    \n+    // Update the pool data in the manager (in case there are any updates)\n+    poolDataManager.updatePool(p);\n+    \n+    setCurrentPool(p);\n+    setXDomain((d) => d);\n+    if (address) {\n+      navigate(`/t/${p.chain}/${address}/${p.pairId}`, { replace: true });\n+    }\n+    setNoData(!p.poolAddress);\n+    requestAnimationFrame(() => window.scrollTo(0, scroll));\n+  }\n+\n+  const tradeSymbols =\n+    currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n+\n+  return (\n+    <div className=\"chart-page\">\n+      {loading && <div className=\"loading-state\">{copy.loading}</div>}\n+\n+      {unsupported && (\n+        <div className=\"error-state\">Network not supported (yet)</div>\n+      )}\n+\n+      {!loading && error && (\n+        <div className=\"error-state\">\n+          {error === 'rate_limit' ? copy.error_rate_limit : copy.error_generic}\n+        </div>\n+      )}\n+\n+      {!loading && !error && pools.length === 0 && (\n+        <div className=\"no-data-state\">{copy.no_pools}</div>\n+      )}\n+\n+      {!loading && !error && pools.length > 0 && (\n+        <div className=\"chart-content\">\n+          {/* Show DetailTop for all views if we have token detail */}\n+          {tokenDetail && currentPool && !detailLoading && (\n+            <DetailTop\n+              detail={tokenDetail}\n+              pairId={currentPool.pairId}\n+              pools={pools}\n+              chain={chain!}\n+              onPoolSwitch={handlePoolSwitch}\n+            />\n+          )}\n+\n+          {/* Show loading skeleton if detail is still loading */}\n+          {detailLoading && (\n+            <div className=\"detail-top-skeleton\">\n+              <div className=\"loading-skeleton\" style={{ height: 200, marginBottom: '1rem' }} />\n+            </div>\n+          )}\n+\n+          {/* View-specific content */}\n+          {view === 'chart' && currentPool && currentPool.poolAddress && provider && address && (\n+            <div className=\"chart-view-content\">\n+              <div className=\"chart-container\">\n+                <ChartOnlyView\n+                  pairId={currentPool.pairId}\n+                  chain={currentPool.chain}\n+                  poolAddress={currentPool.poolAddress}\n+                  provider={provider}\n+                  xDomain={xDomain}\n+                  onXDomainChange={setXDomain}\n+                  tokenAddress={address}\n+                  tokenDetail={tokenDetail}\n+                />\n+              </div>\n+            </div>\n+          )}\n+\n+          {view === 'trades' && currentPool && currentPool.poolAddress && address && (\n+            <div className=\"trades-view-content\">\n+              <TradesOnlyView\n+                pairId={currentPool.pairId}\n+                chain={currentPool.chain}\n+                poolAddress={currentPool.poolAddress}\n+                tokenAddress={address}\n+                baseSymbol={tradeSymbols?.baseSymbol || currentPool.base}\n+                quoteSymbol={tradeSymbols?.quoteSymbol || currentPool.quote}\n+              />\n+            </div>\n+          )}\n+\n+          {view === 'detail' && currentPool && address && (\n+            <div className=\"detail-view-content\">\n+              <DetailView\n+                chain={currentPool.chain}\n+                address={address}\n+                pairId={currentPool.pairId}\n+                pools={pools}\n+                onSwitch={handlePoolSwitch}\n+                hideDetailTop={true} // Don't show DetailTop again in DetailView\n+              />\n+            </div>\n+          )}\n+        </div>\n+      )}\n+\n+      {noData && (\n+        <div className=\"no-data-state\">No data available for this token</div>\n+      )}\n+    </div>\n+  );\n+}\n+\n"
                },
                {
                    "date": 1756121133211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,239 +11,10 @@\n import copy from '../../copy/en.json';\n import { useProvider } from '../../lib/provider';\n import { resolvePairSymbols } from '../../lib/pairs';\n \n-// Views for chart page\n-type View = 'chart' | 'trades' | 'detail';\n+import ChartLoader from '../../components/ChartLoader';\n \n-export default function ChartPage() {\n-  const { chain, address, pairId } = useParams<{ chain: string; address: string; pairId?: string }>();\n-  const navigate = useNavigate();\n-  const [token, setToken] = useState<TokenMeta | null>(null);\n-  const [tokenDetail, setTokenDetail] = useState<TokenResponse | null>(null);\n-  const [pools, setPools] = useState<PoolSummary[]>([]);\n-  const [currentPool, setCurrentPool] = useState<PoolSummary | null>(null);\n-  const [provider, setProvider] = useState<Provider | null>(null);\n-  const [searchParams, setSearchParams] = useSearchParams();\n-  const view = (searchParams.get('view') as View) || 'detail';\n-  const [xDomain, setXDomain] = useState<[number, number] | null>(null);\n-  const [loading, setLoading] = useState(true);\n-  const [detailLoading, setDetailLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n-  const [noData, setNoData] = useState(false);\n-  const [unsupported, setUnsupported] = useState(false);\n-  const { setProvider: setGlobalProvider } = useProvider();\n-\n-  // Fetch security data for market cap calculations and general security info\n-  const { loading: securityLoading, error: securityError, data: securityData } = useGoSecurity(\n-    chain || '', \n-    address || ''\n-  );\n-\n-  useEffect(() => {\n-    if (!searchParams.get('view')) {\n-      const params = new URLSearchParams(searchParams);\n-      params.set('view', 'detail');\n-      setSearchParams(params, { replace: true });\n-    }\n-  }, [searchParams, setSearchParams]);\n-\n-  useEffect(() => {\n-    if (!chain || !address) {\n-      setNoData(true);\n-      return;\n-    }\n-    let cancelled = false;\n-    setUnsupported(false);\n-    setLoading(true);\n-    setDetailLoading(true);\n-    setError(null);\n-    setProvider(null);\n-    setGlobalProvider('');\n-\n-    // Fetch pairs data\n-    pairs(chain, address)\n-      .then(({ data }) => {\n-        if (cancelled) return;\n-        if ('error' in data) {\n-          if (data.error === 'unsupported_network') {\n-            setUnsupported(true);\n-          } else {\n-            setError(data.error);\n-          }\n-          setNoData(true);\n-          return;\n-        }\n-        setToken(data.token);\n-        setProvider(data.provider);\n-        setGlobalProvider(data.provider);\n-        const sorted = data.pools.slice().sort((a, b) => {\n-          const sup = Number(!!b.gtSupported) - Number(!!a.gtSupported);\n-          if (sup !== 0) return sup;\n-          return (b.liqUsd || 0) - (a.liqUsd || 0);\n-        });\n-        setPools(sorted);\n-        \n-        // Cache each pool individually\n-        poolDataManager.cachePools(sorted);\n-        \n-        const sel = sorted.find((p) => p.pairId === pairId) || sorted[0];\n-        setCurrentPool(sel || null);\n-        setNoData(!sel || !sel.poolAddress);\n-      })\n-      .catch(() => {\n-        if (!cancelled) {\n-          setError('network');\n-          setNoData(true);\n-        }\n-      })\n-      .finally(() => {\n-        if (!cancelled) setLoading(false);\n-      });\n-\n-    // Fetch token detail data\n-    fetchToken(chain, address)\n-      .then(({ data }) => {\n-        if (cancelled) return;\n-        if (!('error' in data)) {\n-          setTokenDetail(data);\n-        }\n-      })\n-      .catch(() => {\n-        // Token detail is optional, so we don't handle errors\n-      })\n-      .finally(() => {\n-        if (!cancelled) setDetailLoading(false);\n-      });\n-\n-    return () => {\n-      cancelled = true;\n-    };\n-  }, [chain, address]);\n-\n-  function handlePoolSwitch(p: PoolSummary) {\n-    const scroll = window.scrollY;\n-    \n-    // Update the pool data in the manager (in case there are any updates)\n-    poolDataManager.updatePool(p);\n-    \n-    setCurrentPool(p);\n-    setXDomain((d) => d);\n-    if (address) {\n-      navigate(`/t/${p.chain}/${address}/${p.pairId}`, { replace: true });\n-    }\n-    setNoData(!p.poolAddress);\n-    requestAnimationFrame(() => window.scrollTo(0, scroll));\n-  }\n-\n-  const tradeSymbols =\n-    currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n-\n-  return (\n-    <div className=\"chart-page\">\n-      {loading && <div className=\"loading-state\">{copy.loading}</div>}\n-\n-      {unsupported && (\n-        <div className=\"error-state\">Network not supported (yet)</div>\n-      )}\n-\n-      {!loading && error && (\n-        <div className=\"error-state\">\n-          {error === 'rate_limit' ? copy.error_rate_limit : copy.error_generic}\n-        </div>\n-      )}\n-\n-      {!loading && !error && pools.length === 0 && (\n-        <div className=\"no-data-state\">{copy.no_pools}</div>\n-      )}\n-\n-      {!loading && !error && pools.length > 0 && (\n-        <div className=\"chart-content\">\n-          {/* Show DetailTop for all views if we have token detail */}\n-          {tokenDetail && currentPool && !detailLoading && (\n-            <DetailTop\n-              detail={tokenDetail}\n-              pairId={currentPool.pairId}\n-              pools={pools}\n-              chain={chain!}\n-              onPoolSwitch={handlePoolSwitch}\n-            />\n-          )}\n-\n-          {/* Show loading skeleton if detail is still loading */}\n-          {detailLoading && (\n-            <div className=\"detail-top-skeleton\">\n-              <div className=\"loading-skeleton\" style={{ height: 200, marginBottom: '1rem' }} />\n-            </div>\n-          )}\n-\n-          {/* View-specific content */}\n-          {view === 'chart' && currentPool && currentPool.poolAddress && provider && address && (\n-            <div className=\"chart-view-content\">\n-              <div className=\"chart-container\">\n-                <ChartOnlyView\n-                  pairId={currentPool.pairId}\n-                  chain={currentPool.chain}\n-                  poolAddress={currentPool.poolAddress}\n-                  provider={provider}\n-                  xDomain={xDomain}\n-                  onXDomainChange={setXDomain}\n-                  tokenAddress={address}\n-                  tokenDetail={tokenDetail}\n-                />\n-              </div>\n-            </div>\n-          )}\n-\n-          {view === 'trades' && currentPool && currentPool.poolAddress && address && (\n-            <div className=\"trades-view-content\">\n-              <TradesOnlyView\n-                pairId={currentPool.pairId}\n-                chain={currentPool.chain}\n-                poolAddress={currentPool.poolAddress}\n-                tokenAddress={address}\n-                baseSymbol={tradeSymbols?.baseSymbol || currentPool.base}\n-                quoteSymbol={tradeSymbols?.quoteSymbol || currentPool.quote}\n-              />\n-            </div>\n-          )}\n-\n-          {view === 'detail' && currentPool && address && (\n-            <div className=\"detail-view-content\">\n-              <DetailView\n-                chain={currentPool.chain}\n-                address={address}\n-                pairId={currentPool.pairId}\n-                pools={pools}\n-                onSwitch={handlePoolSwitch}\n-                hideDetailTop={true} // Don't show DetailTop again in DetailView\n-              />\n-            </div>\n-          )}\n-        </div>\n-      )}\n-\n-      {noData && (\n-        <div className=\"no-data-state\">No data available for this token</div>\n-      )}\n-    </div>\n-  );\n-}\n-\n-import { useEffect, useState } from 'react';\n-import { useParams, useNavigate, useSearchParams } from 'react-router-dom';\n-import type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\n-import { pairs, token as fetchToken } from '../../lib/api';\n-import { poolDataManager } from '../../lib/pool-manager';\n-import { useGoSecurity } from '../../lib/useGoSecurity';\n-import ChartOnlyView from './ChartOnlyView';\n-import DetailView from '../detail/DetailView';\n-import DetailTop from '../detail/DetailTop';\n-import TradesOnlyView from '../trades/TradesOnlyView';\n-import copy from '../../copy/en.json';\n-import { useProvider } from '../../lib/provider';\n-import { resolvePairSymbols } from '../../lib/pairs';\n-\n // Views for chart page\n type View = 'chart' | 'trades' | 'detail';\n \n export default function ChartPage() {\n@@ -402,10 +173,9 @@\n \n           {/* Show loading skeleton if detail is still loading */}\n           {detailLoading && (\n             <div className=\"detail-top-skeleton\">\n-              <div className=\"loading-skeleton\" style={{ height: 200, marginBottom: '1rem' }} />\n-              <div className=\"loading-skeleton\" style={{ height: 100 }} />\n+              <ChartLoader />\n             </div>\n           )}\n \n           {/* View-specific content */}\n"
                },
                {
                    "date": 1756121137051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n import TradesOnlyView from '../trades/TradesOnlyView';\n import copy from '../../copy/en.json';\n import { useProvider } from '../../lib/provider';\n import { resolvePairSymbols } from '../../lib/pairs';\n-\n import ChartLoader from '../../components/ChartLoader';\n \n // Views for chart page\n type View = 'chart' | 'trades' | 'detail';\n"
                },
                {
                    "date": 1756122233238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n     currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n \n   return (\n     <div className=\"chart-page\">\n-      {loading && <div className=\"loading-state\">{copy.loading}</div>}\n+      {loading && <div className=\"loading-state\"><{copy.loading}></div>}\n \n       {unsupported && (\n         <div className=\"error-state\">Network not supported (yet)</div>\n       )}\n"
                },
                {
                    "date": 1756122243252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n     currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n \n   return (\n     <div className=\"chart-page\">\n-      {loading && <div className=\"loading-state\"><{copy.loading}></div>}\n+      {loading && <div className=\"loading-state\"><ChartLoader></div>}\n \n       {unsupported && (\n         <div className=\"error-state\">Network not supported (yet)</div>\n       )}\n"
                },
                {
                    "date": 1756122247026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n     currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n \n   return (\n     <div className=\"chart-page\">\n-      {loading && <div className=\"loading-state\"><ChartLoader></div>}\n+      {loading && <div className=\"loading-state\"><ChartLoader /></div>}\n \n       {unsupported && (\n         <div className=\"error-state\">Network not supported (yet)</div>\n       )}\n"
                },
                {
                    "date": 1756127090336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,14 @@\n     currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n \n   return (\n     <div className=\"chart-page\">\n-      {loading && <div className=\"loading-state\"><ChartLoader /></div>}\n+      {/* Show loading animation for initial page load */}\n+      {loading && (\n+        <div className=\"loading-state\">\n+          <ChartLoader message=\"Loading token data...\" />\n+        </div>\n+      )}\n \n       {unsupported && (\n         <div className=\"error-state\">Network not supported (yet)</div>\n       )}\n@@ -172,9 +177,9 @@\n \n           {/* Show loading skeleton if detail is still loading */}\n           {detailLoading && (\n             <div className=\"detail-top-skeleton\">\n-              <ChartLoader />\n+              <ChartLoader message=\"Loading pool details...\" />\n             </div>\n           )}\n \n           {/* View-specific content */}\n"
                }
            ],
            "date": 1755347748705,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react';\nimport { useParams, useNavigate, useSearchParams } from 'react-router-dom';\nimport type { PoolSummary, TokenMeta, TokenResponse, Provider } from '../../lib/types';\nimport { pairs, token as fetchToken } from '../../lib/api';\nimport PoolSwitcher from './PoolSwitcher';\nimport ChartOnlyView from './ChartOnlyView';\nimport DetailView from './DetailView';\nimport DetailTop from './DetailTop';\nimport TradesOnlyView from '../trades/TradesOnlyView';\nimport copy from '../../copy/en.json';\nimport { useProvider } from '../../lib/provider';\nimport { resolvePairSymbols } from '../../lib/pairs';\n\n// Views for chart page\ntype View = 'chart' | 'trades' | 'detail';\n\nexport default function ChartPage() {\n  const { chain, address, pairId } = useParams<{ chain: string; address: string; pairId?: string }>();\n  const navigate = useNavigate();\n  const [token, setToken] = useState<TokenMeta | null>(null);\n  const [tokenDetail, setTokenDetail] = useState<TokenResponse | null>(null);\n  const [pools, setPools] = useState<PoolSummary[]>([]);\n  const [currentPool, setCurrentPool] = useState<PoolSummary | null>(null);\n  const [provider, setProvider] = useState<Provider | null>(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const view = (searchParams.get('view') as View) || 'detail';\n  const [xDomain, setXDomain] = useState<[number, number] | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [detailLoading, setDetailLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [noData, setNoData] = useState(false);\n  const [unsupported, setUnsupported] = useState(false);\n  const { setProvider: setGlobalProvider } = useProvider();\n\n  useEffect(() => {\n    if (!searchParams.get('view')) {\n      const params = new URLSearchParams(searchParams);\n      params.set('view', 'detail');\n      setSearchParams(params, { replace: true });\n    }\n  }, [searchParams, setSearchParams]);\n\n  useEffect(() => {\n    if (!chain || !address) {\n      setNoData(true);\n      return;\n    }\n    let cancelled = false;\n    setUnsupported(false);\n    setLoading(true);\n    setDetailLoading(true);\n    setError(null);\n    setProvider(null);\n    setGlobalProvider('');\n\n    // Fetch pairs data\n    pairs(chain, address)\n      .then(({ data }) => {\n        if (cancelled) return;\n        if ('error' in data) {\n          if (data.error === 'unsupported_network') {\n            setUnsupported(true);\n          } else {\n            setError(data.error);\n          }\n          setNoData(true);\n          return;\n        }\n        setToken(data.token);\n        setProvider(data.provider);\n        setGlobalProvider(data.provider);\n        const sorted = data.pools.slice().sort((a, b) => {\n          const sup = Number(!!b.gtSupported) - Number(!!a.gtSupported);\n          if (sup !== 0) return sup;\n          return (b.liqUsd || 0) - (a.liqUsd || 0);\n        });\n        setPools(sorted);\n        const sel = sorted.find((p) => p.pairId === pairId) || sorted[0];\n        setCurrentPool(sel || null);\n        setNoData(!sel || !sel.poolAddress);\n      })\n      .catch(() => {\n        if (!cancelled) {\n          setError('network');\n          setNoData(true);\n        }\n      })\n      .finally(() => {\n        if (!cancelled) setLoading(false);\n      });\n\n    // Fetch token detail data\n    fetchToken(chain, address)\n      .then(({ data }) => {\n        if (cancelled) return;\n        if (!('error' in data)) {\n          setTokenDetail(data);\n        }\n      })\n      .catch(() => {\n        // Token detail is optional, so we don't handle errors\n      })\n      .finally(() => {\n        if (!cancelled) setDetailLoading(false);\n      });\n\n    return () => {\n      cancelled = true;\n    };\n  }, [chain, address]);\n\n  function handlePoolSwitch(p: PoolSummary) {\n    const scroll = window.scrollY;\n    setCurrentPool(p);\n    setXDomain((d) => d);\n    if (address) {\n      navigate(`/t/${p.chain}/${address}/${p.pairId}`, { replace: true });\n    }\n    setNoData(!p.poolAddress);\n    requestAnimationFrame(() => window.scrollTo(0, scroll));\n  }\n\n  const tradeSymbols =\n    currentPool && token ? resolvePairSymbols(token.symbol, currentPool) : null;\n\n  return (\n    <div className=\"chart-page\">\n      {loading && <div className=\"loading-state\">{copy.loading}</div>}\n\n      {unsupported && (\n        <div className=\"error-state\">Network not supported (yet)</div>\n      )}\n\n      {!loading && error && (\n        <div className=\"error-state\">\n          {error === 'rate_limit' ? copy.error_rate_limit : copy.error_generic}\n        </div>\n      )}\n\n      {!loading && !error && pools.length === 0 && (\n        <div className=\"no-data-state\">{copy.no_pools}</div>\n      )}\n\n      {!loading && !error && pools.length > 0 && (\n        <div className=\"chart-content\">\n          {/* Show DetailTop for all views if we have token detail */}\n          {tokenDetail && currentPool && !detailLoading && (\n            <DetailTop\n              detail={tokenDetail}\n              pairId={currentPool.pairId}\n              pools={pools}\n              chain={chain!}\n              onPoolSwitch={handlePoolSwitch}\n            />\n          )}\n\n          {/* Show loading skeleton if detail is still loading */}\n          {detailLoading && (\n            <div className=\"detail-top-skeleton\">\n              <div className=\"loading-skeleton\" style={{ height: 200, marginBottom: '1rem' }} />\n              <div className=\"loading-skeleton\" style={{ height: 100 }} />\n            </div>\n          )}\n\n          {/* View-specific content */}\n          {view === 'chart' && currentPool && currentPool.poolAddress && provider && address && (\n            <>\n              {currentPool.gtSupported === false && (\n                <div className=\"limitation-notice\">\n                  Chart not available on this DEX; showing limited data.\n                </div>\n              )}\n              <div className=\"chart-container\">\n                <ChartOnlyView\n                  pairId={currentPool.pairId}\n                  chain={currentPool.chain}\n                  poolAddress={currentPool.poolAddress}\n                  provider={provider}\n                  xDomain={xDomain}\n                  onXDomainChange={setXDomain}\n                  tokenAddress={address}\n                />\n              </div>\n            </>\n          )}\n\n          {view === 'trades' && currentPool && currentPool.poolAddress && address && (\n            <>\n              {currentPool.gtSupported === false && (\n                <div className=\"limitation-notice\">\n                  Trades not available on this DEX; showing limited data.\n                </div>\n              )}\n              <div className=\"trades-container\">\n                <TradesOnlyView\n                  pairId={currentPool.pairId}\n                  chain={currentPool.chain}\n                  poolAddress={currentPool.poolAddress}\n                  tokenAddress={address}\n                  baseSymbol={tradeSymbols?.baseSymbol || currentPool.base}\n                  quoteSymbol={tradeSymbols?.quoteSymbol || currentPool.quote}\n                />\n              </div>\n            </>\n          )}\n\n          {view === 'detail' && currentPool && address && (\n            <DetailView\n              chain={currentPool.chain}\n              address={address}\n              pairId={currentPool.pairId}\n              pools={pools}\n              onSwitch={handlePoolSwitch}\n              hideDetailTop={true} // Don't show DetailTop again in DetailView\n            />\n          )}\n        </div>\n      )}\n\n      {noData && (\n        <div className=\"no-data-state\">No data available for this token</div>\n      )}\n    </div>\n  );\n}\n\n"
        }
    ]
}