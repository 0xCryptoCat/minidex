{
    "sourceFile": "src/features/lists/components/TwitterFeedPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755635355853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755635355853,
            "name": "Commit-0",
            "content": "import { useState, useEffect, useRef, useMemo } from 'react';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChartLoader from '../../../components/ChartLoader';\n\ninterface Props {\n  chain: string;\n  address: string;\n  twitterUrl?: string;\n}\n\nconst TwitterFeedPanel: React.FC<Props> = ({ chain, address, twitterUrl }) => {\n  const [expanded, setExpanded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedError, setFeedError] = useState<null | 'comingSoon' | 'unavailable'>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Derive Twitter handle from the URL (e.g. \"https://twitter.com/Project\" -> \"Project\")\n  const twitterHandle = useMemo(() => {\n    if (!twitterUrl) return '';\n    const match = twitterUrl.match(/(?:twitter\\.com|x\\.com)\\/([^\\/\\?]+)/i);\n    return match ? match[1] : '';\n  }, [twitterUrl]);\n\n  useEffect(() => {\n    if (!expanded) return;\n    // If chain is not Solana, no feed is available yet\n    if (chain.toLowerCase() !== 'solana') {\n      setFeedError('comingSoon');\n      return;\n    }\n    // If no handle available for a Solana token, treat as unavailable\n    if (!twitterHandle) {\n      setFeedError('unavailable');\n      return;\n    }\n    // Reset error and show loader while fetching tweets\n    setFeedError(null);\n    setLoading(true);\n\n    // Helper to embed the Twitter timeline\n    const embedTimeline = () => {\n      const target = containerRef.current;\n      if (!target) return;\n      (window as any).twttr.widgets.createTimeline(\n        { sourceType: 'profile', screenName: twitterHandle },\n        target,\n        { height: 300, theme: 'dark', chrome: 'transparent' }  // 300px tall, dark theme, no background borders\n      ).then(() => {\n        setLoading(false);\n      }).catch(() => {\n        setLoading(false);\n        setFeedError('unavailable');\n      });\n    };\n\n    // Ensure the Twitter widgets script is loaded, then create the timeline\n    if (!(window as any).twttr?.widgets) {\n      const script = document.createElement('script');\n      script.src = 'https://platform.twitter.com/widgets.js';\n      script.async = true;\n      script.onload = () => {\n        if ((window as any).twttr?.widgets) {\n          embedTimeline();\n        } else {\n          setLoading(false);\n          setFeedError('unavailable');\n        }\n      };\n      document.body.appendChild(script);\n    } else {\n      // Script already loaded, directly embed\n      embedTimeline();\n    }\n  }, [expanded, chain, twitterHandle]);\n\n  return (\n    <div className=\"security-section\">\n      {/* Header row (collapsed view) */}\n      <div className=\"security-row\">\n        <div className=\"security-name\">\n          <span>Twitter Feed</span>\n        </div>\n        <div className=\"security-result\">\n          {/* Expand/collapse toggle */}\n          <button \n            className=\"security-expand\" \n            onClick={() => setExpanded(prev => !prev)}\n            aria-label=\"Toggle Twitter feed\"\n          >\n            <ExpandMoreIcon sx={{ fontSize: 16 }} />\n          </button>\n        </div>\n      </div>\n\n      {/* Expandable content */}\n      {expanded && (\n        <div className=\"twitter-feed-content\" style={{ position: 'relative', paddingBottom: '8px' }}>\n          {/* Loader animation while tweets load */}\n          {loading && <ChartLoader message=\"Loading feed...\" />}\n\n          {/* \"Coming soon\" message for unsupported chains */}\n          {feedError === 'comingSoon' && (\n            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n              <span className=\"security-status pending\">Feed is coming soon.</span>\n            </div>\n          )}\n\n          {/* \"Unavailable\" message for errors/no-data */}\n          {feedError === 'unavailable' && (\n            <div style={{ textAlign: 'center', padding: '16px 0' }}>\n              <span className=\"security-status pending\">Feed is unavailable.</span>\n            </div>\n          )}\n\n          {/* Container for the embedded Twitter timeline */}\n          <div ref={containerRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TwitterFeedPanel;\n"
        }
    ]
}