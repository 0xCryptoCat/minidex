{
    "sourceFile": "src/features/search/SearchInput.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755347748704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755356506679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,11 @@\n           ...(query ? {\n             borderColor: 'var(--telegram-blue)',\n             background: 'var(--bg-elev)',\n           } : {}),\n+          ...((results.length > 0 || isLoading) ? {\n+            borderRadius: large ? 'var(--radius-pill) var(--radius-pill) 0 0' : 'var(--radius-pill) var(--radius-pill) 0 0'\n+          } : {})\n         }}\n       />\n       \n       {(results.length > 0 || isLoading) && (\n"
                }
            ],
            "date": 1755347748704,
            "name": "Commit-0",
            "content": "import { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { search as apiSearch } from '../../lib/api';\nimport type { SearchTokenSummary, PoolSummary } from '../../lib/types';\n\ninterface Props {\n  autoFocus?: boolean;\n  large?: boolean;\n}\n\nfunction isAddress(addr: string) {\n  return /^0x[a-fA-F0-9]{40}$/.test(addr.trim());\n}\n\nexport default function SearchInput({ autoFocus, large }: Props) {\n  const navigate = useNavigate();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchTokenSummary[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const timer = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const abortRef = useRef<AbortController | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (autoFocus) inputRef.current?.focus();\n  }, [autoFocus]);\n\n  useEffect(() => () => abortRef.current?.abort(), []);\n\n  function runSearch(q: string, force = false) {\n    if (!q || (!force && !isAddress(q) && q.length < 4)) {\n      setResults([]);\n      setIsLoading(false);\n      return;\n    }\n    \n    setIsLoading(true);\n    abortRef.current?.abort();\n    const controller = new AbortController();\n    abortRef.current = controller;\n    \n    apiSearch(q, undefined, controller.signal)\n      .then(({ data }) => {\n        if ('results' in data) {\n          setResults(Array.isArray(data.results) ? data.results : []);\n        } else {\n          setResults([]);\n        }\n      })\n      .catch(() => setResults([]))\n      .finally(() => setIsLoading(false));\n  }\n\n  useEffect(() => {\n    if (timer.current) clearTimeout(timer.current);\n    if (isAddress(query)) {\n      runSearch(query);\n      return () => {};\n    }\n    if (query.length >= 4) {\n      timer.current = setTimeout(() => runSearch(query), 500);\n    } else {\n      setResults([]);\n      setIsLoading(false);\n    }\n    return () => {\n      if (timer.current) clearTimeout(timer.current);\n    };\n  }, [query]);\n\n  function handleKey(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      if (timer.current) clearTimeout(timer.current);\n      runSearch(query, true);\n    }\n  }\n\n  function handlePaste(e: React.ClipboardEvent<HTMLInputElement>) {\n    e.preventDefault();\n    const pasted = e.clipboardData.getData('text');\n    const target = e.currentTarget;\n    const start = target.selectionStart ?? 0;\n    const end = target.selectionEnd ?? 0;\n    const value = target.value;\n    const newValue = value.slice(0, start) + pasted + value.slice(end);\n    setQuery(newValue);\n    if (timer.current) clearTimeout(timer.current);\n    runSearch(newValue, true);\n  }\n\n  function handleSelect(r: SearchTokenSummary) {\n    const pool =\n      r.pools?.find((p) => p.gtSupported) ||\n      [...(r.pools || [])].sort(\n        (a: PoolSummary, b: PoolSummary) => (b.liqUsd || 0) - (a.liqUsd || 0)\n      )[0];\n    navigate(\n      `/t/${pool?.chain || ''}/${r.address}/${pool?.pairId || ''}?poolAddress=${\n        pool?.poolAddress || ''\n      }`\n    );\n    setQuery('');\n    setResults([]);\n  }\n\n  const containerStyle = large ? {\n    position: 'relative' as const,\n    width: '100%',\n    maxWidth: 600\n  } : {\n    position: 'relative' as const,\n    width: '100%',\n    maxWidth: 400\n  };\n\n  const inputStyle = large ? {\n    width: '100%',\n    fontSize: '1.125rem',\n    padding: 'var(--space-4)',\n    borderRadius: 'var(--radius-pill)',\n    background: 'var(--bg-input)',\n    border: '1px solid var(--border)',\n    color: 'var(--text)',\n    transition: 'all var(--transition-fast)',\n    outline: 'none',\n  } : {\n    width: '100%',\n    fontSize: '1rem',\n    padding: 'var(--space-3)',\n    borderRadius: 'var(--radius-pill)',\n    background: 'var(--bg-input)',\n    border: '1px solid var(--border)',\n    color: 'var(--text)',\n    transition: 'all var(--transition-fast)',\n    outline: 'none',\n  };\n\n  return (\n    <div style={containerStyle}>\n      <label htmlFor=\"global-search\" style={{ position: 'absolute', left: -10000 }}>\n        {'Search tokens or paste address'}\n      </label>\n      <input\n        id=\"global-search\"\n        ref={inputRef}\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        onKeyDown={handleKey}\n        onPaste={handlePaste}\n        placeholder=\"Search tokens or paste address\"\n        aria-label=\"Search tokens or paste address\"\n        style={{\n          ...inputStyle,\n          ...(query ? {\n            borderColor: 'var(--telegram-blue)',\n            background: 'var(--bg-elev)',\n          } : {}),\n        }}\n      />\n      \n      {(results.length > 0 || isLoading) && (\n        <div\n          style={{\n            position: 'absolute',\n            top: '100%',\n            left: 0,\n            right: 0,\n            background: 'var(--bg-card)',\n            border: '1px solid var(--border)',\n            borderTop: 'none',\n            borderRadius: `0 0 var(--radius) var(--radius)`,\n            boxShadow: 'var(--shadow-medium)',\n            zIndex: 50,\n            maxHeight: '300px',\n            overflow: 'auto',\n          }}\n        >\n          {isLoading ? (\n            <div style={{ \n              padding: 'var(--space-3)', \n              color: 'var(--text-muted)',\n              textAlign: 'center',\n            }}>\n              Searching...\n            </div>\n          ) : (\n            results.map((r) => (\n              <button\n                key={r.address}\n                type=\"button\"\n                onClick={() => handleSelect(r)}\n                style={{\n                  width: '100%',\n                  textAlign: 'left',\n                  background: 'none',\n                  border: 'none',\n                  padding: 'var(--space-3)',\n                  color: 'var(--text)',\n                  cursor: 'pointer',\n                  transition: 'background-color var(--transition-fast)',\n                  borderBottom: '1px solid var(--separator)',\n                }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.background = 'var(--hover)';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.background = 'none';\n                }}\n              >\n                <div style={{ display: 'flex', alignItems: 'center', gap: 'var(--space-2)' }}>\n                  {r.icon && (\n                    <img \n                      src={r.icon} \n                      alt={`${r.symbol} logo`} \n                      style={{ width: 24, height: 24, borderRadius: '50%' }} \n                    />\n                  )}\n                  <div style={{ flex: 1 }}>\n                    <div style={{ fontWeight: 600, marginBottom: '2px' }}>\n                      {r.symbol}\n                    </div>\n                    <div style={{ \n                      fontSize: '0.875rem', \n                      color: 'var(--text-muted)',\n                    }}>\n                      {r.name}\n                    </div>\n                  </div>\n                  <div style={{ \n                    fontSize: '0.875rem', \n                    color: 'var(--text-secondary)',\n                    textAlign: 'right',\n                  }}>\n                    ${r.priceUsd?.toFixed(4) || 'â€”'}\n                  </div>\n                </div>\n              </button>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n"
        }
    ]
}