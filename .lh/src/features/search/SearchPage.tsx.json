{
    "sourceFile": "src/features/search/SearchPage.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755364214221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755364543465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n         gap: 'var(--space-3)',\n         marginBottom: 'var(--space-6)',\n         paddingTop: 'var(--space-4)',\n       }}>\n+        \n           <img \n             src=\"/logo.svg\" \n             alt=\"SmallDEX\" \n             style={{ height: 40, width: 'auto' }}\n"
                },
                {
                    "date": 1755364553041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,9 @@\n             }}\n           >\n             SmallDEX\n           </h1>\n+          \n       </div>\n \n       <label htmlFor=\"search-input\" style={{ position: 'absolute', left: '-10000px' }}>\n         {copy.search_placeholder}\n"
                }
            ],
            "date": 1755364214221,
            "name": "Commit-0",
            "content": "import { useState, useRef, useEffect } from 'react';\nimport type { SearchTokenSummary, Provider } from '../../lib/types';\nimport { search } from '../../lib/api';\nimport copy from '../../copy/en.json';\nimport SearchResultItem, { SearchResultSkeleton } from './SearchResultItem';\nimport '../../styles/search.css';\n\nfunction isAddress(addr: string) {\n  return /^0x[a-fA-F0-9]{40}$/.test(addr.trim());\n}\n\nexport default function SearchPage() {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchTokenSummary[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [provider, setProvider] = useState<Provider | ''>('');\n  const [hasSearched, setHasSearched] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const timer = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const abortRef = useRef<AbortController | null>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  useEffect(() => {\n    if (timer.current) clearTimeout(timer.current);\n    if (!query) {\n      setResults([]);\n      setProvider('');\n      return;\n    }\n    if (isAddress(query)) {\n      runSearch(query);\n      return;\n    }\n    if (query.length >= 4) {\n      timer.current = setTimeout(() => runSearch(query), 500);\n    } else {\n      setResults([]);\n      setProvider('');\n    }\n    return () => {\n      if (timer.current) clearTimeout(timer.current);\n    };\n  }, [query]);\n\n  async function runSearch(q: string) {\n    abortRef.current?.abort();\n    const controller = new AbortController();\n    abortRef.current = controller;\n    setLoading(true);\n    setError(false);\n    setHasSearched(true);\n    try {\n      const { data } = await search(q, undefined, controller.signal);\n      setLoading(false);\n      if ('results' in data) {\n        const res = Array.isArray(data.results) ? data.results : [];\n        res.forEach((r) => {\n          r.pools?.sort((a, b) => {\n            const sup = Number(!!b.gtSupported) - Number(!!a.gtSupported);\n            if (sup !== 0) return sup;\n            return (b.liqUsd || 0) - (a.liqUsd || 0);\n          });\n          (r as any).gtSupported = r.pools?.some((p) => p.gtSupported);\n        });\n        const sorted = res.sort((a, b) => {\n          if ((a as any).gtSupported === (b as any).gtSupported) {\n            return (b.liqUsd || 0) - (a.liqUsd || 0);\n          }\n          return (a as any).gtSupported ? -1 : 1;\n        });\n        setResults(sorted);\n        const first = sorted[0];\n        setProvider(first?.provider || '');\n      } else {\n        setError(true);\n        setResults([]);\n        setProvider('');\n      }\n    } catch {\n      if (controller.signal.aborted) return;\n      setLoading(false);\n      setError(true);\n      setResults([]);\n      setProvider('');\n    }\n  }\n\n  function handleKey(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      if (timer.current) clearTimeout(timer.current);\n      runSearch(query);\n    }\n  }\n\n  function handlePaste(e: React.ClipboardEvent<HTMLInputElement>) {\n    e.preventDefault();\n    const pasted = e.clipboardData.getData('text');\n    const target = e.currentTarget;\n    const start = target.selectionStart ?? 0;\n    const end = target.selectionEnd ?? 0;\n    const value = target.value;\n    const newValue = value.slice(0, start) + pasted + value.slice(end);\n    setQuery(newValue);\n    if (timer.current) clearTimeout(timer.current);\n    runSearch(newValue);\n  }\n\n  return (\n    <div style={{ padding: '1rem' }}>\n      {/* Logo and Title Header */}\n      <div style={{ \n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        gap: 'var(--space-3)',\n        marginBottom: 'var(--space-6)',\n        paddingTop: 'var(--space-4)',\n      }}>\n        <img \n          src=\"/logo.svg\" \n          alt=\"SmallDEX\" \n          style={{ height: 40, width: 'auto' }}\n        />\n        <h1 \n          style={{ \n            fontSize: '1.5rem', \n            fontWeight: 700, \n            margin: 0,\n            background: 'linear-gradient(135deg, var(--telegram-blue) 0%, var(--brand-secondary) 100%)',\n            WebkitBackgroundClip: 'text',\n            WebkitTextFillColor: 'transparent',\n            backgroundClip: 'text',\n          }}\n        >\n          SmallDEX\n        </h1>\n      </div>\n\n      <label htmlFor=\"search-input\" style={{ position: 'absolute', left: '-10000px' }}>\n        {copy.search_placeholder}\n      </label>\n      <input\n        id=\"search-input\"\n        ref={inputRef}\n        value={query}\n        onChange={(e) => {\n          setQuery(e.target.value);\n          setError(false);\n        }}\n        onKeyDown={handleKey}\n        onPaste={handlePaste}\n        placeholder={copy.search_placeholder}\n        aria-label={copy.search_placeholder}\n        style={{ width: '100%', padding: '0.5rem' }}\n      />\n      {error && (\n        <div className=\"error-banner\">Search failedâ€”try again</div>\n      )}\n      {results.length > 0 && (\n        <h2 style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n          {copy.results}\n          {provider && (\n            <span className=\"provider-badge\" aria-label={`data provider ${provider}`}>\n              {provider}\n            </span>\n          )}\n        </h2>\n      )}\n      {(loading || results.length > 0) && (\n        <table className=\"search-results-table\">\n          <thead>\n            <tr style={{ display: 'grid', gridTemplateColumns: 'repeat(7, minmax(0, 1fr))' }}>\n              <th></th>\n              <th>Token</th>\n              <th>Price</th>\n              <th>Liq</th>\n              <th>Vol24h</th>\n              <th>Chains</th>\n              <th>Pools</th>\n            </tr>\n          </thead>\n          <tbody>\n            {loading\n              ? Array.from({ length: 5 }).map((_, i) => <SearchResultSkeleton key={i} />)\n              : results.map((r) => <SearchResultItem key={r.address} result={r} />)}\n          </tbody>\n        </table>\n      )}\n      {!loading && hasSearched && results.length === 0 && !error && (\n        <div className=\"no-results\">\n          No results\n          <br />\n          Addresses must be full 42-char checksummed or lowercase.\n        </div>\n      )}\n    </div>\n  );\n}\n"
        }
    ]
}