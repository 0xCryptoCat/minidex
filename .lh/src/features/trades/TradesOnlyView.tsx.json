{
    "sourceFile": "src/features/trades/TradesOnlyView.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755347748751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755347748751,
            "name": "Commit-0",
            "content": "import { useEffect, useState, useMemo, ReactNode, CSSProperties, useRef } from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport type { Trade } from '../../lib/types';\nimport { trades } from '../../lib/api';\nimport {\n  formatUsd,\n  formatAmount,\n  formatShortAddr,\n  formatCompactTime,\n  formatSmartAmount,\n  formatFetchMeta,\n  type FetchMeta,\n} from '../../lib/format';\nimport { addressUrl, txUrl } from '../../lib/explorer';\nimport '../../styles/trades.css';\n\nconst ROW_HEIGHT = 52;\n\ninterface Props {\n  pairId: string;\n  chain: string;\n  poolAddress: string;\n  tokenAddress: string;\n  baseSymbol?: string;\n  quoteSymbol?: string;\n}\n\ntype SortKey =\n  | 'time'\n  | 'side'\n  | 'price'\n  | 'total'\n  | 'amountBase'\n  | 'amountQuote'\n  | 'wallet'\n  | 'tx';\n\ninterface ColumnConfig {\n  key: SortKey;\n  header: string;\n  accessor: (t: Trade) => any;\n  render: (t: Trade) => ReactNode;\n  comparator?: (a: any, b: any) => number;\n  className?: string;\n}\n\nexport default function TradesOnlyView({\n  pairId,\n  chain,\n  poolAddress,\n  tokenAddress,\n  baseSymbol,\n  quoteSymbol,\n}: Props) {\n  const [rows, setRows] = useState<Trade[]>([]);\n  const [noTrades, setNoTrades] = useState(false);\n  const [meta, setMeta] = useState<FetchMeta | null>(null);\n  const [sortKey, setSortKey] = useState<SortKey>('time');\n  const [sortDir, setSortDir] = useState<'asc' | 'desc'>('desc');\n  const DEBUG = (import.meta as any).env?.DEBUG === 'true';\n  const sampleTradesLoggedRef = useRef(false);\n\n  useEffect(() => {\n    let cancelled = false;\n    trades({ pairId, chain, poolAddress, tokenAddress })\n      .then(({ data, meta }) => {\n        if (cancelled) return;\n        setRows(data.trades || []);\n        setNoTrades(!data.trades || data.trades.length === 0);\n        setMeta(meta);\n        if (!sampleTradesLoggedRef.current && DEBUG && data.trades?.length) {\n          console.log(\n            'sample trades',\n            data.trades.slice(0, 2).map((t) => ({\n              ts: t.ts,\n              side: t.side,\n              price: t.price,\n              amountBase: t.amountBase,\n              amountQuote: t.amountQuote,\n            }))\n          );\n          sampleTradesLoggedRef.current = true;\n        }\n      })\n      .catch(() => {\n        if (!cancelled) setNoTrades(true);\n      });\n    return () => {\n      cancelled = true;\n    };\n  }, [pairId, chain, poolAddress, tokenAddress]);\n\n  const columns: ColumnConfig[] = useMemo(\n    () => [\n      {\n        key: 'time',\n        header: 'Time',\n        accessor: (t) => t.ts,\n        render: (t) => (\n          <div className=\"time-cell\">\n            <div className=\"time-main\">{formatCompactTime(t.ts)}</div>\n            {t.blockNumber !== undefined && (\n              <div className=\"time-block\">#{t.blockNumber}</div>\n            )}\n          </div>\n        ),\n        comparator: (a: number, b: number) => a - b,\n      },\n      {\n        key: 'price',\n        header: 'Price',\n        accessor: (t) => t.price,\n        render: (t) => (\n          <div className=\"price-cell\">\n            <div>${formatSmartAmount(t.price)}</div>\n          </div>\n        ),\n        comparator: (a: number | undefined, b: number | undefined) =>\n          (a || 0) - (b || 0),\n      },\n      {\n        key: 'total',\n        header: 'Total',\n        accessor: (t) => (t.amountBase || 0) * (t.price || 0),\n        render: (t) => (\n          <div className=\"total-cell\">\n            <div>${formatSmartAmount((t.amountBase || 0) * (t.price || 0))}</div>\n          </div>\n        ),\n        comparator: (a: number, b: number) => a - b,\n      },\n      {\n        key: 'amountBase',\n        header: `${baseSymbol || 'Base'}`,\n        accessor: (t) => t.amountBase || 0,\n        render: (t) => (\n          <div className=\"amount-cell\">\n            <div>{formatSmartAmount(t.amountBase)}</div>\n          </div>\n        ),\n        comparator: (a: number, b: number) => a - b,\n      },\n      {\n        key: 'wallet',\n        header: 'Maker',\n        accessor: (t) => t.wallet || '',\n        render: (t) =>\n          t.wallet ? (\n            <div className=\"maker-cell\">\n              <span className=\"maker-addr\">{formatShortAddr(t.wallet)}</span>\n              <div className=\"maker-actions\">\n                <ContentCopyIcon \n                  className=\"action-icon copy-icon\" \n                  onClick={(e) => {\n                    e.stopPropagation();\n                    navigator.clipboard.writeText(t.wallet || '');\n                  }}\n                />\n                <a\n                  className=\"action-link\"\n                  href={addressUrl(chain as any, t.wallet)!}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <OpenInNewIcon className=\"action-icon\" />\n                </a>\n              </div>\n            </div>\n          ) : (\n            <span className=\"no-data\">-</span>\n          ),\n        comparator: (a: string, b: string) => a.localeCompare(b),\n        className: 'maker',\n      },\n      {\n        key: 'tx',\n        header: 'TX',\n        accessor: (t) => t.txHash || '',\n        render: (t) =>\n          t.txHash ? (\n            <div className=\"tx-cell\">\n              <a\n                className=\"action-link\"\n                href={txUrl(chain as any, t.txHash)!}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <OpenInNewIcon className=\"action-icon\" />\n              </a>\n            </div>\n          ) : (\n            <span className=\"no-data\">-</span>\n          ),\n        comparator: (a: string, b: string) => a.localeCompare(b),\n      },\n    ],\n    [baseSymbol, quoteSymbol, chain]\n  );\n\n  const sorted = useMemo(() => {\n    const col = columns.find((c) => c.key === sortKey);\n    if (!col) return rows;\n    const arr = [...rows].sort((a, b) => {\n      const av = col.accessor(a);\n      const bv = col.accessor(b);\n      const res = col.comparator\n        ? col.comparator(av, bv)\n        : av > bv\n        ? 1\n        : av < bv\n        ? -1\n        : 0;\n      return sortDir === 'asc' ? res : -res;\n    });\n    return arr;\n  }, [rows, sortKey, sortDir, columns]);\n\n  const handleSort = (key: SortKey) => {\n    if (sortKey === key) {\n      setSortDir((d) => (d === 'asc' ? 'desc' : 'asc'));\n    } else {\n      setSortKey(key);\n      setSortDir('asc');\n    }\n  };\n\n  const Row = ({ index, style }: { index: number; style: CSSProperties }) => {\n    const t = sorted[index];\n    const typeClass = t.side === 'buy' ? 'buy' : 'sell';\n    return (\n      <div \n        style={style} \n        className={`tr-row ${typeClass}`}\n        onMouseEnter={(e) => {\n          e.currentTarget.classList.add('hover');\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.classList.remove('hover');\n        }}\n        onClick={() => {\n          // Optional: Add click handler for row selection\n        }}\n      >\n        {columns.map((c) => (\n          <div key={c.key} className={`tr-cell${c.className ? ' ' + c.className : ''}`}>\n            {c.render(t)}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  if (rows.length === 0 && noTrades) {\n    return (\n      <div className=\"no-data-container\">\n        <div className=\"no-data-message\">No recent trades available</div>\n        <div className=\"no-data-subtitle\">Check back later for trading activity</div>\n        {meta && formatFetchMeta(meta) && (\n          <div className=\"fetch-meta\">{formatFetchMeta(meta)}</div>\n        )}\n      </div>\n    );\n  }\n\n  if (rows.length === 0) {\n    return <div>Loadingâ€¦</div>;\n  }\n\n  return (\n    <div className=\"trades-scroll\">\n      <div className=\"trades-table\">\n        <div className=\"trades-header\">\n          {columns.map((c) => (\n            <div\n              key={c.key}\n              className=\"tr-cell\"\n              onClick={() => handleSort(c.key)}\n            >\n              {c.header}\n            </div>\n          ))}\n        </div>\n        <List height={400} itemCount={sorted.length} itemSize={ROW_HEIGHT} width={910}>\n          {Row}\n        </List>\n      </div>\n    </div>\n  );\n}\n"
        }
    ]
}