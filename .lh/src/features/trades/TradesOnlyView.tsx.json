{
    "sourceFile": "src/features/trades/TradesOnlyView.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1755347748751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755352612659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,14 @@\n               {c.header}\n             </div>\n           ))}\n         </div>\n-        <List height={400} itemCount={sorted.length} itemSize={ROW_HEIGHT} width={910}>\n+        <List \n+          height={Math.min(Math.max(sorted.length * ROW_HEIGHT, 300), 500)} \n+          itemCount={sorted.length} \n+          itemSize={ROW_HEIGHT} \n+          width=\"100%\"\n+        >\n           {Row}\n         </List>\n       </div>\n     </div>\n"
                },
                {
                    "date": 1755352922488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,10 @@\n   const [noTrades, setNoTrades] = useState(false);\n   const [meta, setMeta] = useState<FetchMeta | null>(null);\n   const [sortKey, setSortKey] = useState<SortKey>('time');\n   const [sortDir, setSortDir] = useState<'asc' | 'desc'>('desc');\n+  const [containerHeight, setContainerHeight] = useState(400);\n+  const containerRef = useRef<HTMLDivElement>(null);\n   const DEBUG = (import.meta as any).env?.DEBUG === 'true';\n   const sampleTradesLoggedRef = useRef(false);\n \n   useEffect(() => {\n@@ -91,8 +93,23 @@\n       cancelled = true;\n     };\n   }, [pairId, chain, poolAddress, tokenAddress]);\n \n+  // Measure container height\n+  useEffect(() => {\n+    const updateHeight = () => {\n+      if (containerRef.current) {\n+        const rect = containerRef.current.getBoundingClientRect();\n+        const availableHeight = window.innerHeight - rect.top - 100; // Leave some margin\n+        setContainerHeight(Math.max(availableHeight, 300));\n+      }\n+    };\n+\n+    updateHeight();\n+    window.addEventListener('resize', updateHeight);\n+    return () => window.removeEventListener('resize', updateHeight);\n+  }, []);\n+\n   const columns: ColumnConfig[] = useMemo(\n     () => [\n       {\n         key: 'time',\n@@ -270,9 +287,9 @@\n     return <div>Loadingâ€¦</div>;\n   }\n \n   return (\n-    <div className=\"trades-scroll\">\n+    <div className=\"trades-scroll\" ref={containerRef}>\n       <div className=\"trades-table\">\n         <div className=\"trades-header\">\n           {columns.map((c) => (\n             <div\n@@ -283,16 +300,18 @@\n               {c.header}\n             </div>\n           ))}\n         </div>\n-        <List \n-          height={Math.min(Math.max(sorted.length * ROW_HEIGHT, 300), 500)} \n-          itemCount={sorted.length} \n-          itemSize={ROW_HEIGHT} \n-          width=\"100%\"\n-        >\n-          {Row}\n-        </List>\n+        <div className=\"trades-list-container\">\n+          <List \n+            height={containerHeight - 60} // Account for header height\n+            itemCount={sorted.length} \n+            itemSize={ROW_HEIGHT} \n+            width=\"100%\"\n+          >\n+            {Row}\n+          </List>\n+        </div>\n       </div>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1755361663346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import { useEffect, useState, useMemo, ReactNode, CSSProperties, useRef } from 'react';\n import { FixedSizeList as List } from 'react-window';\n import ContentCopyIcon from '@mui/icons-material/ContentCopy';\n-import OpenInNewIcon from '@mui/icons-material/OpenInNew';\n+import LaunchIcon from '@mui/icons-material/Launch';\n+import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n+import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\n import type { Trade } from '../../lib/types';\n import { trades } from '../../lib/api';\n import {\n   formatUsd,\n@@ -117,8 +119,9 @@\n         accessor: (t) => t.ts,\n         render: (t) => (\n           <div className=\"time-cell\">\n             <div className=\"time-main\">{formatCompactTime(t.ts)}</div>\n+            <div className=\"time-ago\">ago</div>\n             {t.blockNumber !== undefined && (\n               <div className=\"time-block\">#{t.blockNumber}</div>\n             )}\n           </div>\n@@ -181,9 +184,9 @@\n                   target=\"_blank\"\n                   rel=\"noopener noreferrer\"\n                   onClick={(e) => e.stopPropagation()}\n                 >\n-                  <OpenInNewIcon className=\"action-icon\" />\n+                  <LaunchIcon className=\"action-icon\" />\n                 </a>\n               </div>\n             </div>\n           ) : (\n@@ -205,9 +208,9 @@\n                 target=\"_blank\"\n                 rel=\"noopener noreferrer\"\n                 onClick={(e) => e.stopPropagation()}\n               >\n-                <OpenInNewIcon className=\"action-icon\" />\n+                <LaunchIcon className=\"action-icon\" />\n               </a>\n             </div>\n           ) : (\n             <span className=\"no-data\">-</span>\n@@ -295,10 +298,16 @@\n             <div\n               key={c.key}\n               className=\"tr-cell\"\n               onClick={() => handleSort(c.key)}\n+              style={{ display: 'flex', alignItems: 'center', gap: '4px' }}\n             >\n               {c.header}\n+              {sortKey === c.key && (\n+                sortDir === 'asc' ? \n+                  <KeyboardArrowUpIcon style={{ fontSize: 16 }} /> : \n+                  <KeyboardArrowDownIcon style={{ fontSize: 16 }} />\n+              )}\n             </div>\n           ))}\n         </div>\n         <div className=\"trades-list-container\">\n"
                },
                {
                    "date": 1755364214224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,19 @@\n         ),\n         comparator: (a: number, b: number) => a - b,\n       },\n       {\n+        key: 'amountQuote',\n+        header: `${quoteSymbol || 'Quote'}`,\n+        accessor: (t) => t.amountQuote || 0,\n+        render: (t) => (\n+          <div className=\"amount-cell\">\n+            <div>{formatSmartAmount(t.amountQuote)}</div>\n+          </div>\n+        ),\n+        comparator: (a: number, b: number) => a - b,\n+      },\n+      {\n         key: 'wallet',\n         header: 'Maker',\n         accessor: (t) => t.wallet || '',\n         render: (t) =>\n"
                },
                {
                    "date": 1755429041175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   formatUsd,\n   formatAmount,\n   formatShortAddr,\n   formatCompactTime,\n-  formatSmartAmount,\n+  formatSmartAmountReact,\n   formatFetchMeta,\n   type FetchMeta,\n } from '../../lib/format';\n import { addressUrl, txUrl } from '../../lib/explorer';\n@@ -35,10 +35,9 @@\n   | 'price'\n   | 'total'\n   | 'amountBase'\n   | 'amountQuote'\n-  | 'wallet'\n-  | 'tx';\n+  | 'wallet';\n \n interface ColumnConfig {\n   key: SortKey;\n   header: string;\n@@ -61,8 +60,9 @@\n   const [meta, setMeta] = useState<FetchMeta | null>(null);\n   const [sortKey, setSortKey] = useState<SortKey>('time');\n   const [sortDir, setSortDir] = useState<'asc' | 'desc'>('desc');\n   const [containerHeight, setContainerHeight] = useState(400);\n+  const [expandedRow, setExpandedRow] = useState<string | null>(null);\n   const containerRef = useRef<HTMLDivElement>(null);\n   const DEBUG = (import.meta as any).env?.DEBUG === 'true';\n   const sampleTradesLoggedRef = useRef(false);\n \n@@ -133,9 +133,9 @@\n         header: 'Price',\n         accessor: (t) => t.price,\n         render: (t) => (\n           <div className=\"price-cell\">\n-            <div>${formatSmartAmount(t.price)}</div>\n+            <div>${formatSmartAmountReact(t.price)}</div>\n           </div>\n         ),\n         comparator: (a: number | undefined, b: number | undefined) =>\n           (a || 0) - (b || 0),\n@@ -145,9 +145,9 @@\n         header: 'Total',\n         accessor: (t) => (t.amountBase || 0) * (t.price || 0),\n         render: (t) => (\n           <div className=\"total-cell\">\n-            <div>${formatSmartAmount((t.amountBase || 0) * (t.price || 0))}</div>\n+            <div>${formatSmartAmountReact((t.amountBase || 0) * (t.price || 0))}</div>\n           </div>\n         ),\n         comparator: (a: number, b: number) => a - b,\n       },\n@@ -156,9 +156,9 @@\n         header: `${baseSymbol || 'Base'}`,\n         accessor: (t) => t.amountBase || 0,\n         render: (t) => (\n           <div className=\"amount-cell\">\n-            <div>{formatSmartAmount(t.amountBase)}</div>\n+            <div>{formatSmartAmountReact(t.amountBase)}</div>\n           </div>\n         ),\n         comparator: (a: number, b: number) => a - b,\n       },\n@@ -167,9 +167,9 @@\n         header: `${quoteSymbol || 'Quote'}`,\n         accessor: (t) => t.amountQuote || 0,\n         render: (t) => (\n           <div className=\"amount-cell\">\n-            <div>{formatSmartAmount(t.amountQuote)}</div>\n+            <div>{formatSmartAmountReact(t.amountQuote)}</div>\n           </div>\n         ),\n         comparator: (a: number, b: number) => a - b,\n       },\n@@ -205,30 +205,8 @@\n           ),\n         comparator: (a: string, b: string) => a.localeCompare(b),\n         className: 'maker',\n       },\n-      {\n-        key: 'tx',\n-        header: 'TX',\n-        accessor: (t) => t.txHash || '',\n-        render: (t) =>\n-          t.txHash ? (\n-            <div className=\"tx-cell\">\n-              <a\n-                className=\"action-link\"\n-                href={txUrl(chain as any, t.txHash)!}\n-                target=\"_blank\"\n-                rel=\"noopener noreferrer\"\n-                onClick={(e) => e.stopPropagation()}\n-              >\n-                <LaunchIcon className=\"action-icon\" />\n-              </a>\n-            </div>\n-          ) : (\n-            <span className=\"no-data\">-</span>\n-          ),\n-        comparator: (a: string, b: string) => a.localeCompare(b),\n-      },\n     ],\n     [baseSymbol, quoteSymbol, chain]\n   );\n \n@@ -272,9 +250,10 @@\n         onMouseLeave={(e) => {\n           e.currentTarget.classList.remove('hover');\n         }}\n         onClick={() => {\n-          // Optional: Add click handler for row selection\n+          const tradeId = `${t.ts}-${t.txHash}`;\n+          setExpandedRow(expandedRow === tradeId ? null : tradeId);\n         }}\n       >\n         {columns.map((c) => (\n           <div key={c.key} className={`tr-cell${c.className ? ' ' + c.className : ''}`}>\n"
                },
                {
                    "date": 1755439757856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect, useState, useMemo, ReactNode, CSSProperties, useRef } from 'react';\n-import { FixedSizeList as List } from 'react-window';\n+import { VariableSizeList as List } from 'react-window';\n import ContentCopyIcon from '@mui/icons-material/ContentCopy';\n import LaunchIcon from '@mui/icons-material/Launch';\n import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\n@@ -239,28 +239,94 @@\n \n   const Row = ({ index, style }: { index: number; style: CSSProperties }) => {\n     const t = sorted[index];\n     const typeClass = t.side === 'buy' ? 'buy' : 'sell';\n+    const tradeId = `${t.ts}-${t.txHash}`;\n+    const isExpanded = expandedRow === tradeId;\n+    \n     return (\n-      <div \n-        style={style} \n-        className={`tr-row ${typeClass}`}\n-        onMouseEnter={(e) => {\n-          e.currentTarget.classList.add('hover');\n-        }}\n-        onMouseLeave={(e) => {\n-          e.currentTarget.classList.remove('hover');\n-        }}\n-        onClick={() => {\n-          const tradeId = `${t.ts}-${t.txHash}`;\n-          setExpandedRow(expandedRow === tradeId ? null : tradeId);\n-        }}\n-      >\n-        {columns.map((c) => (\n-          <div key={c.key} className={`tr-cell${c.className ? ' ' + c.className : ''}`}>\n-            {c.render(t)}\n+      <div style={style}>\n+        <div \n+          className={`tr-row ${typeClass}`}\n+          onMouseEnter={(e) => {\n+            e.currentTarget.classList.add('hover');\n+          }}\n+          onMouseLeave={(e) => {\n+            e.currentTarget.classList.remove('hover');\n+          }}\n+          onClick={() => {\n+            setExpandedRow(expandedRow === tradeId ? null : tradeId);\n+          }}\n+        >\n+          {columns.map((c) => (\n+            <div key={c.key} className={`tr-cell${c.className ? ' ' + c.className : ''}`}>\n+              {c.render(t)}\n+            </div>\n+          ))}\n+        </div>\n+        \n+        {isExpanded && (\n+          <div className=\"tr-expanded\">\n+            <div className=\"tr-expanded-content\">\n+              {t.txHash && (\n+                <div className=\"expanded-item\">\n+                  <span className=\"expanded-label\">Transaction:</span>\n+                  <div className=\"expanded-value\">\n+                    <span>{formatShortAddr(t.txHash)}</span>\n+                    <button \n+                      onClick={(e) => {\n+                        e.stopPropagation();\n+                        navigator.clipboard?.writeText(t.txHash!);\n+                      }}\n+                      className=\"copy-btn\"\n+                    >\n+                      <ContentCopyIcon sx={{ fontSize: 14 }} />\n+                    </button>\n+                    {txUrl(chain as any, t.txHash) && (\n+                      <a \n+                        href={txUrl(chain as any, t.txHash)} \n+                        target=\"_blank\" \n+                        rel=\"noopener noreferrer\"\n+                        onClick={(e) => e.stopPropagation()}\n+                        className=\"external-link\"\n+                      >\n+                        <LaunchIcon sx={{ fontSize: 14 }} />\n+                      </a>\n+                    )}\n+                  </div>\n+                </div>\n+              )}\n+              {t.wallet && (\n+                <div className=\"expanded-item\">\n+                  <span className=\"expanded-label\">Wallet:</span>\n+                  <div className=\"expanded-value\">\n+                    <span>{formatShortAddr(t.wallet)}</span>\n+                    <button \n+                      onClick={(e) => {\n+                        e.stopPropagation();\n+                        navigator.clipboard?.writeText(t.wallet!);\n+                      }}\n+                      className=\"copy-btn\"\n+                    >\n+                      <ContentCopyIcon sx={{ fontSize: 14 }} />\n+                    </button>\n+                    {addressUrl(chain as any, t.wallet) && (\n+                      <a \n+                        href={addressUrl(chain as any, t.wallet)} \n+                        target=\"_blank\" \n+                        rel=\"noopener noreferrer\"\n+                        onClick={(e) => e.stopPropagation()}\n+                        className=\"external-link\"\n+                      >\n+                        <LaunchIcon sx={{ fontSize: 14 }} />\n+                      </a>\n+                    )}\n+                  </div>\n+                </div>\n+              )}\n+            </div>\n           </div>\n-        ))}\n+        )}\n       </div>\n     );\n   };\n \n@@ -303,9 +369,13 @@\n         <div className=\"trades-list-container\">\n           <List \n             height={containerHeight - 60} // Account for header height\n             itemCount={sorted.length} \n-            itemSize={ROW_HEIGHT} \n+            itemSize={(index: number) => {\n+              const t = sorted[index];\n+              const tradeId = `${t.ts}-${t.txHash}`;\n+              return expandedRow === tradeId ? ROW_HEIGHT + 80 : ROW_HEIGHT; // Extra height for expanded content\n+            }}\n             width=\"100%\"\n           >\n             {Row}\n           </List>\n"
                },
                {
                    "date": 1755525881931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,36 +176,17 @@\n       {\n         key: 'wallet',\n         header: 'Maker',\n         accessor: (t) => t.wallet || '',\n-        render: (t) =>\n-          t.wallet ? (\n-            <div className=\"maker-cell\">\n-              <span className=\"maker-addr\">{formatShortAddr(t.wallet)}</span>\n-              <div className=\"maker-actions\">\n-                <ContentCopyIcon \n-                  className=\"action-icon copy-icon\" \n-                  onClick={(e) => {\n-                    e.stopPropagation();\n-                    navigator.clipboard.writeText(t.wallet || '');\n-                  }}\n-                />\n-                <a\n-                  className=\"action-link\"\n-                  href={addressUrl(chain as any, t.wallet)!}\n-                  target=\"_blank\"\n-                  rel=\"noopener noreferrer\"\n-                  onClick={(e) => e.stopPropagation()}\n-                >\n-                  <LaunchIcon className=\"action-icon\" />\n-                </a>\n-              </div>\n-            </div>\n-          ) : (\n-            <span className=\"no-data\">-</span>\n-          ),\n+        render: (t) => (\n+          <div className=\"maker-cell\">\n+            <span className=\"maker-addr\" style={{ whiteSpace: 'nowrap' }}>\n+              {formatShortAddr(t.wallet)}\n+            </span>\n+          </div>\n+        ),\n         comparator: (a: string, b: string) => a.localeCompare(b),\n-        className: 'maker',\n+        className: 'maker-column',\n       },\n     ],\n     [baseSymbol, quoteSymbol, chain]\n   );\n@@ -236,8 +217,27 @@\n       setSortDir('asc');\n     }\n   };\n \n+  // Calculate trader stats for expanded view\n+  const getTraderStats = (wallet: string) => {\n+    if (!wallet) return null;\n+    \n+    const traderTrades = rows.filter(t => t.wallet === wallet);\n+    const tradeCount = traderTrades.length;\n+    const totalVolume = traderTrades.reduce((sum, t) => sum + ((t.amountQuote || 0) * (t.price || 0)), 0);\n+    const buys = traderTrades.filter(t => t.side === 'buy');\n+    const sells = traderTrades.filter(t => t.side === 'sell');\n+    \n+    return {\n+      tradeCount,\n+      totalVolume,\n+      buyCount: buys.length,\n+      sellCount: sells.length,\n+      avgTradeSize: tradeCount > 0 ? totalVolume / tradeCount : 0\n+    };\n+  };\n+\n   const Row = ({ index, style }: { index: number; style: CSSProperties }) => {\n     const t = sorted[index];\n     const typeClass = t.side === 'buy' ? 'buy' : 'sell';\n     const tradeId = `${t.ts}-${t.txHash}`;\n@@ -266,63 +266,103 @@\n         \n         {isExpanded && (\n           <div className=\"tr-expanded\">\n             <div className=\"tr-expanded-content\">\n-              {t.txHash && (\n-                <div className=\"expanded-item\">\n-                  <span className=\"expanded-label\">Transaction:</span>\n-                  <div className=\"expanded-value\">\n-                    <span>{formatShortAddr(t.txHash)}</span>\n-                    <button \n-                      onClick={(e) => {\n-                        e.stopPropagation();\n-                        navigator.clipboard?.writeText(t.txHash!);\n-                      }}\n-                      className=\"copy-btn\"\n-                    >\n-                      <ContentCopyIcon sx={{ fontSize: 14 }} />\n-                    </button>\n-                    {txUrl(chain as any, t.txHash) && (\n-                      <a \n-                        href={txUrl(chain as any, t.txHash)} \n-                        target=\"_blank\" \n-                        rel=\"noopener noreferrer\"\n-                        onClick={(e) => e.stopPropagation()}\n-                        className=\"external-link\"\n-                      >\n-                        <LaunchIcon sx={{ fontSize: 14 }} />\n-                      </a>\n-                    )}\n-                  </div>\n-                </div>\n-              )}\n               {t.wallet && (\n-                <div className=\"expanded-item\">\n-                  <span className=\"expanded-label\">Wallet:</span>\n-                  <div className=\"expanded-value\">\n-                    <span>{formatShortAddr(t.wallet)}</span>\n-                    <button \n-                      onClick={(e) => {\n-                        e.stopPropagation();\n-                        navigator.clipboard?.writeText(t.wallet!);\n-                      }}\n-                      className=\"copy-btn\"\n-                    >\n-                      <ContentCopyIcon sx={{ fontSize: 14 }} />\n-                    </button>\n-                    {addressUrl(chain as any, t.wallet) && (\n-                      <a \n-                        href={addressUrl(chain as any, t.wallet)} \n-                        target=\"_blank\" \n-                        rel=\"noopener noreferrer\"\n-                        onClick={(e) => e.stopPropagation()}\n-                        className=\"external-link\"\n-                      >\n-                        <LaunchIcon sx={{ fontSize: 14 }} />\n-                      </a>\n+                <>\n+                  <div className=\"expanded-section\">\n+                    <h4 className=\"expanded-section-title\">Transaction Details</h4>\n+                    <div className=\"expanded-item\">\n+                      <span className=\"expanded-label\">Wallet:</span>\n+                      <div className=\"expanded-value\">\n+                        <span>{formatShortAddr(t.wallet)}</span>\n+                        <button \n+                          onClick={(e) => {\n+                            e.stopPropagation();\n+                            navigator.clipboard?.writeText(t.wallet!);\n+                          }}\n+                          className=\"copy-btn\"\n+                          title=\"Copy wallet address\"\n+                        >\n+                          <ContentCopyIcon sx={{ fontSize: 14 }} />\n+                        </button>\n+                        {addressUrl(chain as any, t.wallet) && (\n+                          <a \n+                            href={addressUrl(chain as any, t.wallet)} \n+                            target=\"_blank\" \n+                            rel=\"noopener noreferrer\"\n+                            onClick={(e) => e.stopPropagation()}\n+                            className=\"external-link\"\n+                            title=\"View on explorer\"\n+                          >\n+                            <LaunchIcon sx={{ fontSize: 14 }} />\n+                          </a>\n+                        )}\n+                      </div>\n+                    </div>\n+                    {t.txHash && (\n+                      <div className=\"expanded-item\">\n+                        <span className=\"expanded-label\">Transaction:</span>\n+                        <div className=\"expanded-value\">\n+                          <span>{formatShortAddr(t.txHash)}</span>\n+                          <button \n+                            onClick={(e) => {\n+                              e.stopPropagation();\n+                              navigator.clipboard?.writeText(t.txHash!);\n+                            }}\n+                            className=\"copy-btn\"\n+                            title=\"Copy transaction hash\"\n+                          >\n+                            <ContentCopyIcon sx={{ fontSize: 14 }} />\n+                          </button>\n+                          {txUrl(chain as any, t.txHash) && (\n+                            <a \n+                              href={txUrl(chain as any, t.txHash)} \n+                              target=\"_blank\" \n+                              rel=\"noopener noreferrer\"\n+                              onClick={(e) => e.stopPropagation()}\n+                              className=\"external-link\"\n+                              title=\"View transaction on explorer\"\n+                            >\n+                              <LaunchIcon sx={{ fontSize: 14 }} />\n+                            </a>\n+                          )}\n+                        </div>\n+                      </div>\n                     )}\n                   </div>\n-                </div>\n+                  \n+                  {(() => {\n+                    const stats = t.wallet ? getTraderStats(t.wallet) : null;\n+                    return stats && stats.tradeCount > 1 ? (\n+                      <div className=\"expanded-section\">\n+                        <h4 className=\"expanded-section-title\">Trader Stats</h4>\n+                        <div className=\"expanded-stats\">\n+                          <div className=\"stat-item\">\n+                            <span className=\"stat-label\">Total Trades:</span>\n+                            <span className=\"stat-value\">{stats.tradeCount}</span>\n+                          </div>\n+                          <div className=\"stat-item\">\n+                            <span className=\"stat-label\">Buy/Sell:</span>\n+                            <span className=\"stat-value\">\n+                              <span className=\"buy-count\">{stats.buyCount}</span>\n+                              <span className=\"stat-separator\">/</span>\n+                              <span className=\"sell-count\">{stats.sellCount}</span>\n+                            </span>\n+                          </div>\n+                          <div className=\"stat-item\">\n+                            <span className=\"stat-label\">Total Volume:</span>\n+                            <span className=\"stat-value\">{formatUsd(stats.totalVolume, { compact: true })}</span>\n+                          </div>\n+                          <div className=\"stat-item\">\n+                            <span className=\"stat-label\">Avg Trade:</span>\n+                            <span className=\"stat-value\">{formatUsd(stats.avgTradeSize, { compact: true })}</span>\n+                          </div>\n+                        </div>\n+                      </div>\n+                    ) : null;\n+                  })()}\n+                </>\n               )}\n             </div>\n           </div>\n         )}\n@@ -372,9 +412,16 @@\n             itemCount={sorted.length} \n             itemSize={(index: number) => {\n               const t = sorted[index];\n               const tradeId = `${t.ts}-${t.txHash}`;\n-              return expandedRow === tradeId ? ROW_HEIGHT + 80 : ROW_HEIGHT; // Extra height for expanded content\n+              if (expandedRow === tradeId) {\n+                // Base expanded height + additional height for trader stats if available\n+                const baseHeight = 120;\n+                const stats = t.wallet ? getTraderStats(t.wallet) : null;\n+                const statsHeight = stats && stats.tradeCount > 1 ? 80 : 0;\n+                return ROW_HEIGHT + baseHeight + statsHeight;\n+              }\n+              return ROW_HEIGHT;\n             }}\n             width=\"100%\"\n           >\n             {Row}\n"
                },
                {
                    "date": 1755526869049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,9 +414,9 @@\n               const t = sorted[index];\n               const tradeId = `${t.ts}-${t.txHash}`;\n               if (expandedRow === tradeId) {\n                 // Base expanded height + additional height for trader stats if available\n-                const baseHeight = 120;\n+                const baseHeight = 100vh;\n                 const stats = t.wallet ? getTraderStats(t.wallet) : null;\n                 const statsHeight = stats && stats.tradeCount > 1 ? 80 : 0;\n                 return ROW_HEIGHT + baseHeight + statsHeight;\n               }\n"
                },
                {
                    "date": 1755526878400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,9 +414,9 @@\n               const t = sorted[index];\n               const tradeId = `${t.ts}-${t.txHash}`;\n               if (expandedRow === tradeId) {\n                 // Base expanded height + additional height for trader stats if available\n-                const baseHeight = 100vh;\n+                const baseHeight = '100vh';\n                 const stats = t.wallet ? getTraderStats(t.wallet) : null;\n                 const statsHeight = stats && stats.tradeCount > 1 ? 80 : 0;\n                 return ROW_HEIGHT + baseHeight + statsHeight;\n               }\n"
                },
                {
                    "date": 1755526884583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,9 +414,9 @@\n               const t = sorted[index];\n               const tradeId = `${t.ts}-${t.txHash}`;\n               if (expandedRow === tradeId) {\n                 // Base expanded height + additional height for trader stats if available\n-                const baseHeight = '100vh';\n+                const baseHeight = 100;\n                 const stats = t.wallet ? getTraderStats(t.wallet) : null;\n                 const statsHeight = stats && stats.tradeCount > 1 ? 80 : 0;\n                 return ROW_HEIGHT + baseHeight + statsHeight;\n               }\n"
                },
                {
                    "date": 1755527101141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,66 +270,66 @@\n               {t.wallet && (\n                 <>\n                   <div className=\"expanded-section\">\n                     <h4 className=\"expanded-section-title\">Transaction Details</h4>\n-                    <div className=\"expanded-item\">\n-                      <span className=\"expanded-label\">Wallet:</span>\n-                      <div className=\"expanded-value\">\n-                        <span>{formatShortAddr(t.wallet)}</span>\n-                        <button \n-                          onClick={(e) => {\n-                            e.stopPropagation();\n-                            navigator.clipboard?.writeText(t.wallet!);\n-                          }}\n-                          className=\"copy-btn\"\n-                          title=\"Copy wallet address\"\n-                        >\n-                          <ContentCopyIcon sx={{ fontSize: 14 }} />\n-                        </button>\n-                        {addressUrl(chain as any, t.wallet) && (\n-                          <a \n-                            href={addressUrl(chain as any, t.wallet)} \n-                            target=\"_blank\" \n-                            rel=\"noopener noreferrer\"\n-                            onClick={(e) => e.stopPropagation()}\n-                            className=\"external-link\"\n-                            title=\"View on explorer\"\n-                          >\n-                            <LaunchIcon sx={{ fontSize: 14 }} />\n-                          </a>\n-                        )}\n-                      </div>\n-                    </div>\n-                    {t.txHash && (\n                       <div className=\"expanded-item\">\n-                        <span className=\"expanded-label\">Transaction:</span>\n+                        <span className=\"expanded-label\">Wallet:</span>\n                         <div className=\"expanded-value\">\n-                          <span>{formatShortAddr(t.txHash)}</span>\n+                          <span>{formatShortAddr(t.wallet)}</span>\n                           <button \n                             onClick={(e) => {\n                               e.stopPropagation();\n-                              navigator.clipboard?.writeText(t.txHash!);\n+                              navigator.clipboard?.writeText(t.wallet!);\n                             }}\n                             className=\"copy-btn\"\n-                            title=\"Copy transaction hash\"\n+                            title=\"Copy wallet address\"\n                           >\n                             <ContentCopyIcon sx={{ fontSize: 14 }} />\n                           </button>\n-                          {txUrl(chain as any, t.txHash) && (\n+                          {addressUrl(chain as any, t.wallet) && (\n                             <a \n-                              href={txUrl(chain as any, t.txHash)} \n+                              href={addressUrl(chain as any, t.wallet)} \n                               target=\"_blank\" \n                               rel=\"noopener noreferrer\"\n                               onClick={(e) => e.stopPropagation()}\n                               className=\"external-link\"\n-                              title=\"View transaction on explorer\"\n+                              title=\"View on explorer\"\n                             >\n                               <LaunchIcon sx={{ fontSize: 14 }} />\n                             </a>\n                           )}\n                         </div>\n                       </div>\n-                    )}\n+                      {t.txHash && (\n+                        <div className=\"expanded-item\">\n+                          <span className=\"expanded-label\">Transaction:</span>\n+                          <div className=\"expanded-value\">\n+                            <span>{formatShortAddr(t.txHash)}</span>\n+                            <button \n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                navigator.clipboard?.writeText(t.txHash!);\n+                              }}\n+                              className=\"copy-btn\"\n+                              title=\"Copy transaction hash\"\n+                            >\n+                              <ContentCopyIcon sx={{ fontSize: 14 }} />\n+                            </button>\n+                            {txUrl(chain as any, t.txHash) && (\n+                              <a \n+                                href={txUrl(chain as any, t.txHash)} \n+                                target=\"_blank\" \n+                                rel=\"noopener noreferrer\"\n+                                onClick={(e) => e.stopPropagation()}\n+                                className=\"external-link\"\n+                                title=\"View transaction on explorer\"\n+                              >\n+                                <LaunchIcon sx={{ fontSize: 14 }} />\n+                              </a>\n+                            )}\n+                          </div>\n+                        </div>\n+                      )}\n                   </div>\n                   \n                   {(() => {\n                     const stats = t.wallet ? getTraderStats(t.wallet) : null;\n"
                },
                {
                    "date": 1755527104642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n                             )}\n                           </div>\n                         </div>\n                       )}\n-                    <  \n+                    <%  \n                   </div>\n                   \n                   {(() => {\n                     const stats = t.wallet ? getTraderStats(t.wallet) : null;\n"
                },
                {
                    "date": 1755527121873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,435 @@\n+import { useEffect, useState, useMemo, ReactNode, CSSProperties, useRef } from 'react';\n+import { VariableSizeList as List } from 'react-window';\n+import ContentCopyIcon from '@mui/icons-material/ContentCopy';\n+import LaunchIcon from '@mui/icons-material/Launch';\n+import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n+import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\n+import type { Trade } from '../../lib/types';\n+import { trades } from '../../lib/api';\n+import {\n+  formatUsd,\n+  formatAmount,\n+  formatShortAddr,\n+  formatCompactTime,\n+  formatSmartAmountReact,\n+  formatFetchMeta,\n+  type FetchMeta,\n+} from '../../lib/format';\n+import { addressUrl, txUrl } from '../../lib/explorer';\n+import '../../styles/trades.css';\n+\n+const ROW_HEIGHT = 52;\n+\n+interface Props {\n+  pairId: string;\n+  chain: string;\n+  poolAddress: string;\n+  tokenAddress: string;\n+  baseSymbol?: string;\n+  quoteSymbol?: string;\n+}\n+\n+type SortKey =\n+  | 'time'\n+  | 'side'\n+  | 'price'\n+  | 'total'\n+  | 'amountBase'\n+  | 'amountQuote'\n+  | 'wallet';\n+\n+interface ColumnConfig {\n+  key: SortKey;\n+  header: string;\n+  accessor: (t: Trade) => any;\n+  render: (t: Trade) => ReactNode;\n+  comparator?: (a: any, b: any) => number;\n+  className?: string;\n+}\n+\n+export default function TradesOnlyView({\n+  pairId,\n+  chain,\n+  poolAddress,\n+  tokenAddress,\n+  baseSymbol,\n+  quoteSymbol,\n+}: Props) {\n+  const [rows, setRows] = useState<Trade[]>([]);\n+  const [noTrades, setNoTrades] = useState(false);\n+  const [meta, setMeta] = useState<FetchMeta | null>(null);\n+  const [sortKey, setSortKey] = useState<SortKey>('time');\n+  const [sortDir, setSortDir] = useState<'asc' | 'desc'>('desc');\n+  const [containerHeight, setContainerHeight] = useState(400);\n+  const [expandedRow, setExpandedRow] = useState<string | null>(null);\n+  const containerRef = useRef<HTMLDivElement>(null);\n+  const DEBUG = (import.meta as any).env?.DEBUG === 'true';\n+  const sampleTradesLoggedRef = useRef(false);\n+\n+  useEffect(() => {\n+    let cancelled = false;\n+    trades({ pairId, chain, poolAddress, tokenAddress })\n+      .then(({ data, meta }) => {\n+        if (cancelled) return;\n+        setRows(data.trades || []);\n+        setNoTrades(!data.trades || data.trades.length === 0);\n+        setMeta(meta);\n+        if (!sampleTradesLoggedRef.current && DEBUG && data.trades?.length) {\n+          console.log(\n+            'sample trades',\n+            data.trades.slice(0, 2).map((t) => ({\n+              ts: t.ts,\n+              side: t.side,\n+              price: t.price,\n+              amountBase: t.amountBase,\n+              amountQuote: t.amountQuote,\n+            }))\n+          );\n+          sampleTradesLoggedRef.current = true;\n+        }\n+      })\n+      .catch(() => {\n+        if (!cancelled) setNoTrades(true);\n+      });\n+    return () => {\n+      cancelled = true;\n+    };\n+  }, [pairId, chain, poolAddress, tokenAddress]);\n+\n+  // Measure container height\n+  useEffect(() => {\n+    const updateHeight = () => {\n+      if (containerRef.current) {\n+        const rect = containerRef.current.getBoundingClientRect();\n+        const availableHeight = window.innerHeight - rect.top - 100; // Leave some margin\n+        setContainerHeight(Math.max(availableHeight, 300));\n+      }\n+    };\n+\n+    updateHeight();\n+    window.addEventListener('resize', updateHeight);\n+    return () => window.removeEventListener('resize', updateHeight);\n+  }, []);\n+\n+  const columns: ColumnConfig[] = useMemo(\n+    () => [\n+      {\n+        key: 'time',\n+        header: 'Time',\n+        accessor: (t) => t.ts,\n+        render: (t) => (\n+          <div className=\"time-cell\">\n+            <div className=\"time-main\">{formatCompactTime(t.ts)}</div>\n+            <div className=\"time-ago\">ago</div>\n+            {t.blockNumber !== undefined && (\n+              <div className=\"time-block\">#{t.blockNumber}</div>\n+            )}\n+          </div>\n+        ),\n+        comparator: (a: number, b: number) => a - b,\n+      },\n+      {\n+        key: 'price',\n+        header: 'Price',\n+        accessor: (t) => t.price,\n+        render: (t) => (\n+          <div className=\"price-cell\">\n+            <div>${formatSmartAmountReact(t.price)}</div>\n+          </div>\n+        ),\n+        comparator: (a: number | undefined, b: number | undefined) =>\n+          (a || 0) - (b || 0),\n+      },\n+      {\n+        key: 'total',\n+        header: 'Total',\n+        accessor: (t) => (t.amountBase || 0) * (t.price || 0),\n+        render: (t) => (\n+          <div className=\"total-cell\">\n+            <div>${formatSmartAmountReact((t.amountBase || 0) * (t.price || 0))}</div>\n+          </div>\n+        ),\n+        comparator: (a: number, b: number) => a - b,\n+      },\n+      {\n+        key: 'amountBase',\n+        header: `${baseSymbol || 'Base'}`,\n+        accessor: (t) => t.amountBase || 0,\n+        render: (t) => (\n+          <div className=\"amount-cell\">\n+            <div>{formatSmartAmountReact(t.amountBase)}</div>\n+          </div>\n+        ),\n+        comparator: (a: number, b: number) => a - b,\n+      },\n+      {\n+        key: 'amountQuote',\n+        header: `${quoteSymbol || 'Quote'}`,\n+        accessor: (t) => t.amountQuote || 0,\n+        render: (t) => (\n+          <div className=\"amount-cell\">\n+            <div>{formatSmartAmountReact(t.amountQuote)}</div>\n+          </div>\n+        ),\n+        comparator: (a: number, b: number) => a - b,\n+      },\n+      {\n+        key: 'wallet',\n+        header: 'Maker',\n+        accessor: (t) => t.wallet || '',\n+        render: (t) => (\n+          <div className=\"maker-cell\">\n+            <span className=\"maker-addr\" style={{ whiteSpace: 'nowrap' }}>\n+              {formatShortAddr(t.wallet)}\n+            </span>\n+          </div>\n+        ),\n+        comparator: (a: string, b: string) => a.localeCompare(b),\n+        className: 'maker-column',\n+      },\n+    ],\n+    [baseSymbol, quoteSymbol, chain]\n+  );\n+\n+  const sorted = useMemo(() => {\n+    const col = columns.find((c) => c.key === sortKey);\n+    if (!col) return rows;\n+    const arr = [...rows].sort((a, b) => {\n+      const av = col.accessor(a);\n+      const bv = col.accessor(b);\n+      const res = col.comparator\n+        ? col.comparator(av, bv)\n+        : av > bv\n+        ? 1\n+        : av < bv\n+        ? -1\n+        : 0;\n+      return sortDir === 'asc' ? res : -res;\n+    });\n+    return arr;\n+  }, [rows, sortKey, sortDir, columns]);\n+\n+  const handleSort = (key: SortKey) => {\n+    if (sortKey === key) {\n+      setSortDir((d) => (d === 'asc' ? 'desc' : 'asc'));\n+    } else {\n+      setSortKey(key);\n+      setSortDir('asc');\n+    }\n+  };\n+\n+  // Calculate trader stats for expanded view\n+  const getTraderStats = (wallet: string) => {\n+    if (!wallet) return null;\n+    \n+    const traderTrades = rows.filter(t => t.wallet === wallet);\n+    const tradeCount = traderTrades.length;\n+    const totalVolume = traderTrades.reduce((sum, t) => sum + ((t.amountQuote || 0) * (t.price || 0)), 0);\n+    const buys = traderTrades.filter(t => t.side === 'buy');\n+    const sells = traderTrades.filter(t => t.side === 'sell');\n+    \n+    return {\n+      tradeCount,\n+      totalVolume,\n+      buyCount: buys.length,\n+      sellCount: sells.length,\n+      avgTradeSize: tradeCount > 0 ? totalVolume / tradeCount : 0\n+    };\n+  };\n+\n+  const Row = ({ index, style }: { index: number; style: CSSProperties }) => {\n+    const t = sorted[index];\n+    const typeClass = t.side === 'buy' ? 'buy' : 'sell';\n+    const tradeId = `${t.ts}-${t.txHash}`;\n+    const isExpanded = expandedRow === tradeId;\n+    \n+    return (\n+      <div style={style}>\n+        <div \n+          className={`tr-row ${typeClass}`}\n+          onMouseEnter={(e) => {\n+            e.currentTarget.classList.add('hover');\n+          }}\n+          onMouseLeave={(e) => {\n+            e.currentTarget.classList.remove('hover');\n+          }}\n+          onClick={() => {\n+            setExpandedRow(expandedRow === tradeId ? null : tradeId);\n+          }}\n+        >\n+          {columns.map((c) => (\n+            <div key={c.key} className={`tr-cell${c.className ? ' ' + c.className : ''}`}>\n+              {c.render(t)}\n+            </div>\n+          ))}\n+        </div>\n+        \n+        {isExpanded && (\n+          <div className=\"tr-expanded\">\n+            <div className=\"tr-expanded-content\">\n+              {t.wallet && (\n+                <>\n+                  <div className=\"expanded-section\">\n+                    <h4 className=\"expanded-section-title\">Transaction Details</h4>\n+                    <div className=\"expanded-details\">\n+                      <div className=\"expanded-item\">\n+                        <span className=\"expanded-label\">Wallet:</span>\n+                        <div className=\"expanded-value\">\n+                          <span>{formatShortAddr(t.wallet)}</span>\n+                          <button \n+                            onClick={(e) => {\n+                              e.stopPropagation();\n+                              navigator.clipboard?.writeText(t.wallet!);\n+                            }}\n+                            className=\"copy-btn\"\n+                            title=\"Copy wallet address\"\n+                          >\n+                            <ContentCopyIcon sx={{ fontSize: 14 }} />\n+                          </button>\n+                          {addressUrl(chain as any, t.wallet) && (\n+                            <a \n+                              href={addressUrl(chain as any, t.wallet)} \n+                              target=\"_blank\" \n+                              rel=\"noopener noreferrer\"\n+                              onClick={(e) => e.stopPropagation()}\n+                              className=\"external-link\"\n+                              title=\"View on explorer\"\n+                            >\n+                              <LaunchIcon sx={{ fontSize: 14 }} />\n+                            </a>\n+                          )}\n+                        </div>\n+                      </div>\n+                      {t.txHash && (\n+                        <div className=\"expanded-item\">\n+                          <span className=\"expanded-label\">Transaction:</span>\n+                          <div className=\"expanded-value\">\n+                            <span>{formatShortAddr(t.txHash)}</span>\n+                            <button \n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                navigator.clipboard?.writeText(t.txHash!);\n+                              }}\n+                              className=\"copy-btn\"\n+                              title=\"Copy transaction hash\"\n+                            >\n+                              <ContentCopyIcon sx={{ fontSize: 14 }} />\n+                            </button>\n+                            {txUrl(chain as any, t.txHash) && (\n+                              <a \n+                                href={txUrl(chain as any, t.txHash)} \n+                                target=\"_blank\" \n+                                rel=\"noopener noreferrer\"\n+                                onClick={(e) => e.stopPropagation()}\n+                                className=\"external-link\"\n+                                title=\"View transaction on explorer\"\n+                              >\n+                                <LaunchIcon sx={{ fontSize: 14 }} />\n+                              </a>\n+                            )}\n+                          </div>\n+                        </div>\n+                      )}\n+                    </div> \n+                  </div>\n+                  \n+                  {(() => {\n+                    const stats = t.wallet ? getTraderStats(t.wallet) : null;\n+                    return stats && stats.tradeCount > 1 ? (\n+                      <div className=\"expanded-section\">\n+                        <h4 className=\"expanded-section-title\">Trader Stats</h4>\n+                        <div className=\"expanded-stats\">\n+                          <div className=\"stat-item\">\n+                            <span className=\"stat-label\">Total Trades:</span>\n+                            <span className=\"stat-value\">{stats.tradeCount}</span>\n+                          </div>\n+                          <div className=\"stat-item\">\n+                            <span className=\"stat-label\">Buy/Sell:</span>\n+                            <span className=\"stat-value\">\n+                              <span className=\"buy-count\">{stats.buyCount}</span>\n+                              <span className=\"stat-separator\">/</span>\n+                              <span className=\"sell-count\">{stats.sellCount}</span>\n+                            </span>\n+                          </div>\n+                          <div className=\"stat-item\">\n+                            <span className=\"stat-label\">Total Volume:</span>\n+                            <span className=\"stat-value\">{formatUsd(stats.totalVolume, { compact: true })}</span>\n+                          </div>\n+                          <div className=\"stat-item\">\n+                            <span className=\"stat-label\">Avg Trade:</span>\n+                            <span className=\"stat-value\">{formatUsd(stats.avgTradeSize, { compact: true })}</span>\n+                          </div>\n+                        </div>\n+                      </div>\n+                    ) : null;\n+                  })()}\n+                </>\n+              )}\n+            </div>\n+          </div>\n+        )}\n+      </div>\n+    );\n+  };\n+\n+  if (rows.length === 0 && noTrades) {\n+    return (\n+      <div className=\"no-data-container\">\n+        <div className=\"no-data-message\">No recent trades available</div>\n+        <div className=\"no-data-subtitle\">Check back later for trading activity</div>\n+        {meta && formatFetchMeta(meta) && (\n+          <div className=\"fetch-meta\">{formatFetchMeta(meta)}</div>\n+        )}\n+      </div>\n+    );\n+  }\n+\n+  if (rows.length === 0) {\n+    return <div>Loadingâ€¦</div>;\n+  }\n+\n+  return (\n+    <div className=\"trades-scroll\" ref={containerRef}>\n+      <div className=\"trades-table\">\n+        <div className=\"trades-header\">\n+          {columns.map((c) => (\n+            <div\n+              key={c.key}\n+              className=\"tr-cell\"\n+              onClick={() => handleSort(c.key)}\n+              style={{ display: 'flex', alignItems: 'center', gap: '4px' }}\n+            >\n+              {c.header}\n+              {sortKey === c.key && (\n+                sortDir === 'asc' ? \n+                  <KeyboardArrowUpIcon style={{ fontSize: 16 }} /> : \n+                  <KeyboardArrowDownIcon style={{ fontSize: 16 }} />\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+        <div className=\"trades-list-container\">\n+          <List \n+            height={containerHeight - 60} // Account for header height\n+            itemCount={sorted.length} \n+            itemSize={(index: number) => {\n+              const t = sorted[index];\n+              const tradeId = `${t.ts}-${t.txHash}`;\n+              if (expandedRow === tradeId) {\n+                // Base expanded height + additional height for trader stats if available\n+                const baseHeight = 100;\n+                const stats = t.wallet ? getTraderStats(t.wallet) : null;\n+                const statsHeight = stats && stats.tradeCount > 1 ? 80 : 0;\n+                return ROW_HEIGHT + baseHeight + statsHeight;\n+              }\n+              return ROW_HEIGHT;\n+            }}\n+            width=\"100%\"\n+          >\n+            {Row}\n+          </List>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+}\n"
                }
            ],
            "date": 1755347748751,
            "name": "Commit-0",
            "content": "import { useEffect, useState, useMemo, ReactNode, CSSProperties, useRef } from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport type { Trade } from '../../lib/types';\nimport { trades } from '../../lib/api';\nimport {\n  formatUsd,\n  formatAmount,\n  formatShortAddr,\n  formatCompactTime,\n  formatSmartAmount,\n  formatFetchMeta,\n  type FetchMeta,\n} from '../../lib/format';\nimport { addressUrl, txUrl } from '../../lib/explorer';\nimport '../../styles/trades.css';\n\nconst ROW_HEIGHT = 52;\n\ninterface Props {\n  pairId: string;\n  chain: string;\n  poolAddress: string;\n  tokenAddress: string;\n  baseSymbol?: string;\n  quoteSymbol?: string;\n}\n\ntype SortKey =\n  | 'time'\n  | 'side'\n  | 'price'\n  | 'total'\n  | 'amountBase'\n  | 'amountQuote'\n  | 'wallet'\n  | 'tx';\n\ninterface ColumnConfig {\n  key: SortKey;\n  header: string;\n  accessor: (t: Trade) => any;\n  render: (t: Trade) => ReactNode;\n  comparator?: (a: any, b: any) => number;\n  className?: string;\n}\n\nexport default function TradesOnlyView({\n  pairId,\n  chain,\n  poolAddress,\n  tokenAddress,\n  baseSymbol,\n  quoteSymbol,\n}: Props) {\n  const [rows, setRows] = useState<Trade[]>([]);\n  const [noTrades, setNoTrades] = useState(false);\n  const [meta, setMeta] = useState<FetchMeta | null>(null);\n  const [sortKey, setSortKey] = useState<SortKey>('time');\n  const [sortDir, setSortDir] = useState<'asc' | 'desc'>('desc');\n  const DEBUG = (import.meta as any).env?.DEBUG === 'true';\n  const sampleTradesLoggedRef = useRef(false);\n\n  useEffect(() => {\n    let cancelled = false;\n    trades({ pairId, chain, poolAddress, tokenAddress })\n      .then(({ data, meta }) => {\n        if (cancelled) return;\n        setRows(data.trades || []);\n        setNoTrades(!data.trades || data.trades.length === 0);\n        setMeta(meta);\n        if (!sampleTradesLoggedRef.current && DEBUG && data.trades?.length) {\n          console.log(\n            'sample trades',\n            data.trades.slice(0, 2).map((t) => ({\n              ts: t.ts,\n              side: t.side,\n              price: t.price,\n              amountBase: t.amountBase,\n              amountQuote: t.amountQuote,\n            }))\n          );\n          sampleTradesLoggedRef.current = true;\n        }\n      })\n      .catch(() => {\n        if (!cancelled) setNoTrades(true);\n      });\n    return () => {\n      cancelled = true;\n    };\n  }, [pairId, chain, poolAddress, tokenAddress]);\n\n  const columns: ColumnConfig[] = useMemo(\n    () => [\n      {\n        key: 'time',\n        header: 'Time',\n        accessor: (t) => t.ts,\n        render: (t) => (\n          <div className=\"time-cell\">\n            <div className=\"time-main\">{formatCompactTime(t.ts)}</div>\n            {t.blockNumber !== undefined && (\n              <div className=\"time-block\">#{t.blockNumber}</div>\n            )}\n          </div>\n        ),\n        comparator: (a: number, b: number) => a - b,\n      },\n      {\n        key: 'price',\n        header: 'Price',\n        accessor: (t) => t.price,\n        render: (t) => (\n          <div className=\"price-cell\">\n            <div>${formatSmartAmount(t.price)}</div>\n          </div>\n        ),\n        comparator: (a: number | undefined, b: number | undefined) =>\n          (a || 0) - (b || 0),\n      },\n      {\n        key: 'total',\n        header: 'Total',\n        accessor: (t) => (t.amountBase || 0) * (t.price || 0),\n        render: (t) => (\n          <div className=\"total-cell\">\n            <div>${formatSmartAmount((t.amountBase || 0) * (t.price || 0))}</div>\n          </div>\n        ),\n        comparator: (a: number, b: number) => a - b,\n      },\n      {\n        key: 'amountBase',\n        header: `${baseSymbol || 'Base'}`,\n        accessor: (t) => t.amountBase || 0,\n        render: (t) => (\n          <div className=\"amount-cell\">\n            <div>{formatSmartAmount(t.amountBase)}</div>\n          </div>\n        ),\n        comparator: (a: number, b: number) => a - b,\n      },\n      {\n        key: 'wallet',\n        header: 'Maker',\n        accessor: (t) => t.wallet || '',\n        render: (t) =>\n          t.wallet ? (\n            <div className=\"maker-cell\">\n              <span className=\"maker-addr\">{formatShortAddr(t.wallet)}</span>\n              <div className=\"maker-actions\">\n                <ContentCopyIcon \n                  className=\"action-icon copy-icon\" \n                  onClick={(e) => {\n                    e.stopPropagation();\n                    navigator.clipboard.writeText(t.wallet || '');\n                  }}\n                />\n                <a\n                  className=\"action-link\"\n                  href={addressUrl(chain as any, t.wallet)!}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <OpenInNewIcon className=\"action-icon\" />\n                </a>\n              </div>\n            </div>\n          ) : (\n            <span className=\"no-data\">-</span>\n          ),\n        comparator: (a: string, b: string) => a.localeCompare(b),\n        className: 'maker',\n      },\n      {\n        key: 'tx',\n        header: 'TX',\n        accessor: (t) => t.txHash || '',\n        render: (t) =>\n          t.txHash ? (\n            <div className=\"tx-cell\">\n              <a\n                className=\"action-link\"\n                href={txUrl(chain as any, t.txHash)!}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <OpenInNewIcon className=\"action-icon\" />\n              </a>\n            </div>\n          ) : (\n            <span className=\"no-data\">-</span>\n          ),\n        comparator: (a: string, b: string) => a.localeCompare(b),\n      },\n    ],\n    [baseSymbol, quoteSymbol, chain]\n  );\n\n  const sorted = useMemo(() => {\n    const col = columns.find((c) => c.key === sortKey);\n    if (!col) return rows;\n    const arr = [...rows].sort((a, b) => {\n      const av = col.accessor(a);\n      const bv = col.accessor(b);\n      const res = col.comparator\n        ? col.comparator(av, bv)\n        : av > bv\n        ? 1\n        : av < bv\n        ? -1\n        : 0;\n      return sortDir === 'asc' ? res : -res;\n    });\n    return arr;\n  }, [rows, sortKey, sortDir, columns]);\n\n  const handleSort = (key: SortKey) => {\n    if (sortKey === key) {\n      setSortDir((d) => (d === 'asc' ? 'desc' : 'asc'));\n    } else {\n      setSortKey(key);\n      setSortDir('asc');\n    }\n  };\n\n  const Row = ({ index, style }: { index: number; style: CSSProperties }) => {\n    const t = sorted[index];\n    const typeClass = t.side === 'buy' ? 'buy' : 'sell';\n    return (\n      <div \n        style={style} \n        className={`tr-row ${typeClass}`}\n        onMouseEnter={(e) => {\n          e.currentTarget.classList.add('hover');\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.classList.remove('hover');\n        }}\n        onClick={() => {\n          // Optional: Add click handler for row selection\n        }}\n      >\n        {columns.map((c) => (\n          <div key={c.key} className={`tr-cell${c.className ? ' ' + c.className : ''}`}>\n            {c.render(t)}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  if (rows.length === 0 && noTrades) {\n    return (\n      <div className=\"no-data-container\">\n        <div className=\"no-data-message\">No recent trades available</div>\n        <div className=\"no-data-subtitle\">Check back later for trading activity</div>\n        {meta && formatFetchMeta(meta) && (\n          <div className=\"fetch-meta\">{formatFetchMeta(meta)}</div>\n        )}\n      </div>\n    );\n  }\n\n  if (rows.length === 0) {\n    return <div>Loadingâ€¦</div>;\n  }\n\n  return (\n    <div className=\"trades-scroll\">\n      <div className=\"trades-table\">\n        <div className=\"trades-header\">\n          {columns.map((c) => (\n            <div\n              key={c.key}\n              className=\"tr-cell\"\n              onClick={() => handleSort(c.key)}\n            >\n              {c.header}\n            </div>\n          ))}\n        </div>\n        <List height={400} itemCount={sorted.length} itemSize={ROW_HEIGHT} width={910}>\n          {Row}\n        </List>\n      </div>\n    </div>\n  );\n}\n"
        }
    ]
}