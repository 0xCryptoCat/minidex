{
    "sourceFile": "src/lib/cache.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755434210882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755434210882,
            "name": "Commit-0",
            "content": "import type {\n  CacheSearchEntry,\n  SearchResponse,\n  CachePairsEntry,\n  PairsResponse,\n  CacheOHLCEntry,\n  OHLCResponse,\n  CacheTradesEntry,\n  TradesResponse,\n  CacheTokenEntry,\n  TokenResponse,\n  ApiResult,\n} from './types';\n\nconst searchCache = new Map<string, CacheSearchEntry>();\nconst pairsCache = new Map<string, CachePairsEntry>();\nconst ohlcCache = new Map<string, CacheOHLCEntry>();\nconst tradesCache = new Map<string, CacheTradesEntry>();\nconst tokenCache = new Map<string, CacheTokenEntry>();\n\n// Individual pool cache for detailed pool data\nconst poolDetailsCache = new Map<string, { response: any; ts: number }>();\n\nconst TTL_SECONDS = 30;\nconst MAX_ENTRIES = 50;\n\nfunction now(): number {\n  return Math.floor(Date.now() / 1000);\n}\n\nfunction getMapEntry<T>(map: Map<string, { response: T; ts: number }>, key: string): T | undefined {\n  let entry = map.get(key);\n  if (!entry && typeof sessionStorage !== 'undefined') {\n    const raw = sessionStorage.getItem(key);\n    if (raw) {\n      try {\n        entry = JSON.parse(raw) as { response: T; ts: number };\n        map.set(key, entry);\n      } catch {\n        sessionStorage.removeItem(key);\n      }\n    }\n  }\n  if (!entry) return undefined;\n  const age = now() - entry.ts;\n  if (age > TTL_SECONDS) {\n    map.delete(key);\n    if (typeof sessionStorage !== 'undefined') sessionStorage.removeItem(key);\n    return undefined;\n  }\n  return entry.response;\n}\n\nfunction setMapEntry<T>(map: Map<string, { response: T; ts: number }>, key: string, response: T) {\n  const entry = { response, ts: now() };\n  map.set(key, entry);\n  if (typeof sessionStorage !== 'undefined') {\n    try {\n      sessionStorage.setItem(key, JSON.stringify(entry));\n    } catch {\n      /* ignore */\n    }\n  }\n  if (map.size > MAX_ENTRIES) {\n    const oldestKey = map.keys().next().value as string | undefined;\n    if (oldestKey) {\n      map.delete(oldestKey);\n      if (typeof sessionStorage !== 'undefined') sessionStorage.removeItem(oldestKey);\n    }\n  }\n}\n\n// Search\nexport function getSearchCache(query: string): ApiResult<SearchResponse> | undefined {\n  return getMapEntry(searchCache, `search:${query}`);\n}\nexport function setSearchCache(query: string, response: ApiResult<SearchResponse>) {\n  setMapEntry(searchCache, `search:${query}`, response);\n}\n\n// Pairs\nexport function getPairsCache(key: string): ApiResult<PairsResponse> | undefined {\n  return getMapEntry(pairsCache, `pairs:${key}`);\n}\nexport function setPairsCache(key: string, response: ApiResult<PairsResponse>) {\n  setMapEntry(pairsCache, `pairs:${key}`, response);\n}\n\n// OHLC\nexport function getOHLCCache(key: string): ApiResult<OHLCResponse> | undefined {\n  return getMapEntry(ohlcCache, `ohlc:${key}`);\n}\nexport function setOHLCCache(key: string, response: ApiResult<OHLCResponse>) {\n  setMapEntry(ohlcCache, `ohlc:${key}`, response);\n}\n\n// Trades\nexport function getTradesCache(key: string): ApiResult<TradesResponse> | undefined {\n  return getMapEntry(tradesCache, `trades:${key}`);\n}\nexport function setTradesCache(key: string, response: ApiResult<TradesResponse>) {\n  setMapEntry(tradesCache, `trades:${key}`, response);\n}\n\n// Token metrics\nexport function getTokenCache(key: string): ApiResult<TokenResponse> | undefined {\n  return getMapEntry(tokenCache, `token:${key}`);\n}\nexport function setTokenCache(key: string, response: ApiResult<TokenResponse>) {\n  setMapEntry(tokenCache, `token:${key}`, response);\n}\n\n// Pool details cache\nexport function getPoolDetailsCache(pairId: string): any | undefined {\n  return getMapEntry(poolDetailsCache, `pool:${pairId}`);\n}\n\nexport function setPoolDetailsCache(pairId: string, data: any) {\n  setMapEntry(poolDetailsCache, `pool:${pairId}`, data);\n}\n\n"
        }
    ]
}