{
    "sourceFile": "src/lib/types.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755434210973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755456083087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n /* ---------- Core primitives ---------- */\n-export type Provider = 'gt' | 'ds' | 'cg' | 'synthetic';       // geckoterminal | dexscreener | coingecko | synthetic\n+export type Provider = 'gt' | 'ds' | 'cg' | 'synthetic' | 'none';       // geckoterminal | dexscreener | coingecko | synthetic | none\n export type ChainSlug =\n   | 'ethereum' | 'arbitrum' | 'polygon' | 'bsc' | 'base' | 'optimism' | 'avalanche'\n   | string; // keep open for many chains\n \n"
                },
                {
                    "date": 1755458526286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,9 @@\n   symbol: string;\n   name: string;\n   icon?: string;\n   priceUsd: number;\n+  priceChange24h?: number; // 24h price change percentage\n   liqUsd: number;\n   vol24hUsd: number;\n   chainIcons: string[]; // up to 3 chains by liquidity\n   poolCount: number;\n"
                }
            ],
            "date": 1755434210973,
            "name": "Commit-0",
            "content": "/* ---------- Core primitives ---------- */\nexport type Provider = 'gt' | 'ds' | 'cg' | 'synthetic';       // geckoterminal | dexscreener | coingecko | synthetic\nexport type ChainSlug =\n  | 'ethereum' | 'arbitrum' | 'polygon' | 'bsc' | 'base' | 'optimism' | 'avalanche'\n  | string; // keep open for many chains\n\nexport type Address = `0x${string}`;\nexport type TxHash = `0x${string}`;\nexport type PairId = string;                     // provider-specific stable id\nexport type UnixSeconds = number;                // always seconds (not ms)\nexport type FiatCode = 'USD';                    // MVP is USD-only (extensible)\n\n/* Timeframes supported by UI; provider may serve subset. */\nexport type Timeframe = '1m' | '5m' | '15m' | '1h' | '4h' | '1d';\n\n/* ---------- Shared meta ---------- */\nexport interface TokenMeta {\n  address: Address;\n  symbol: string;\n  name: string;\n  icon?: string;           // URL if available\n}\n\n/* Minimal finance snapshot used across pages. */\nexport interface CoreFinance {\n  priceUsd?: number;       // last price\n  fdvUsd?: number;         // fully diluted valuation\n  mcUsd?: number;          // market cap (if available)\n  liqUsd?: number;         // liquidity\n  vol24hUsd?: number;\n  priceChange1hPct?: number;\n  priceChange24hPct?: number;\n}\n\n/* Pool summary for switcher and lists. */\nexport interface PoolSummary {\n  pairId: PairId;\n  dex: string;             // e.g., \"uniswap\"\n  version?: string;        // e.g., \"v2\" | \"v3\"\n  base: string;            // base symbol (e.g., \"ABC\")\n  quote: string;           // quote symbol (e.g., \"WETH\")\n  chain: ChainSlug;\n  poolAddress?: Address;   // contract address for GeckoTerminal\n  pairAddress?: Address;   // pair contract address\n  liqUsd?: number;         // liquidity for default selection\n  gtSupported?: boolean;   // whether GT supports this pool\n  labels?: string[];       // e.g., [\"v2\"]\n  baseToken?: { address: Address; symbol: string; name: string };\n  quoteToken?: { address: Address; symbol: string; name: string };\n  info?: {                 // complete info object per pool\n    imageUrl?: string;\n    header?: string;\n    openGraph?: string;\n    description?: string;\n    websites?: { label: string; url: string }[];\n    socials?: { type: string; url: string }[];\n  };\n  priceUsd?: number;\n  priceNative?: number;\n  txns?: {\n    m5?: { buys: number; sells: number };\n    h1?: { buys: number; sells: number };\n    h6?: { buys: number; sells: number };\n    h24?: { buys: number; sells: number };\n  };\n  volume?: {\n    m5?: number;\n    h1?: number;\n    h6?: number;\n    h24?: number;\n  };\n  priceChange?: {\n    h1?: number;\n    h6?: number;\n    h24?: number;\n  };\n  liquidity?: {\n    usd?: number;\n    base?: number;\n    quote?: number;\n  };\n  fdv?: number;\n  marketCap?: number;\n  pairCreatedAt?: number;\n}\n\n/* ---------- /api/search ---------- */\nexport interface SearchTokenSummary {\n  address: Address;\n  symbol: string;\n  name: string;\n  icon?: string;\n  priceUsd: number;\n  liqUsd: number;\n  vol24hUsd: number;\n  chainIcons: string[]; // up to 3 chains by liquidity\n  poolCount: number;\n  gtSupported: boolean; // true if any pool is supported\n  provider: Provider;\n  chainCount?: number; // total distinct chains\n  pools?: PoolSummary[]; // underlying pools for navigation\n}\n\nexport interface SearchResponse {\n  query: string;           // original user input (address)\n  results: SearchTokenSummary[];\n}\n\n/* ---------- /api/pairs ---------- */\nexport interface PairsResponse {\n  token: TokenMeta;\n  pools: PoolSummary[];\n  provider: Provider;\n}\n\n/* ---------- /api/ohlc ---------- */\n/* Single candle (volume in base or quote as provided; we standardize to base if possible). */\nexport interface Candle {\n  t: UnixSeconds;\n  o: number; h: number; l: number; c: number;\n  v?: number;            // volume (unit: base token, when known)\n}\n\nexport interface OHLCResponse {\n  pairId: PairId;\n  tf: Timeframe;\n  candles: Candle[];\n  provider: Provider;\n  rollupHint?: 'client' | 'server' | 'none'; // if provider lacks requested tf\n  effectiveTf?: Timeframe; // actual timeframe served if different\n}\n\n/* ---------- /api/trades ---------- */\nexport type TradeSide = 'buy' | 'sell';\n\nexport interface Trade {\n  ts: UnixSeconds;\n  side: TradeSide;\n  price: number;            // price in USD (token-centric)\n  amountBase?: number;      // filled amount of token of interest\n  amountQuote?: number;     // filled amount of counter token\n  txHash?: TxHash;\n  wallet?: Address;\n  blockNumber?: number;\n}\n\nexport interface TradesResponse {\n  pairId: PairId;\n  trades: Trade[];\n  provider: Provider;\n  nextCursor?: string;      // reserved for future paging\n}\n\n/* ---------- /api/lists ---------- */\nexport type ListType = 'trending' | 'discovery' | 'leaderboard';\nexport type Window = '1h' | '1d' | '1w';\n\nexport interface ListItem {\n  pairId: PairId;\n  chain: ChainSlug;\n  token: Pick<TokenMeta, 'address' | 'symbol' | 'name'>;\n  priceUsd?: number;\n  liqUsd?: number;\n  volWindowUsd?: number;\n  priceChangePct?: number;\n  tradesWindow?: number;\n  createdAt?: UnixSeconds;   // pool or token creation timestamp\n  score?: number;            // normalized 0..1 for sorting in “trending”\n  promoted?: boolean;        // monetization flag (styling only in MVP)\n}\n\nexport interface ListsResponse {\n  chain: ChainSlug;\n  type: ListType;\n  window: Window;\n  items: ListItem[];\n  provider: Provider | 'none';\n}\n\n/* ---------- /api/token ---------- */\nexport interface TokenLinks {\n  website?: string;\n  explorer?: string;\n  twitter?: string;\n  telegram?: string;\n}\n\nexport interface PoolTxCount {\n  buys: number;\n  sells: number;\n}\n\nexport interface PoolDetail extends PoolSummary {\n  pairAddress?: Address;\n  pairUrl?: string;\n  baseToken: { address: Address; symbol: string; name: string };\n  quoteToken: { address: Address; symbol: string; name: string };\n  priceNative?: number;\n  priceUsd?: number;\n  liquidity?: { usd?: number; base?: number; quote?: number };\n  fdv?: number;\n  marketCap?: number;\n  txns?: { m5?: PoolTxCount; h1?: PoolTxCount; h6?: PoolTxCount; h24?: PoolTxCount };\n  volume?: { m5?: number; h1?: number; h6?: number; h24?: number };\n  priceChange?: { m5?: number; h1?: number; h6?: number; h24?: number };\n  pairCreatedAt?: number; // ms\n  gtSupported?: boolean;\n}\n\nexport interface TokenInfoBlock {\n  imageUrl?: string;\n  header?: string;\n  description?: string;\n  websites?: { label: string; url: string }[];\n  socials?: { type: string; url: string }[];\n}\n\nexport interface TokenKpis {\n  priceUsd?: number;\n  priceNative?: number;\n  liqUsd?: number;\n  fdvUsd?: number;\n  mcUsd?: number;\n  priceChange24hPct?: number;\n  age?: { days: number; hours: number };\n}\n\nexport interface TokenDetail {\n  info?: TokenInfoBlock;\n  kpis: TokenKpis;\n  pools: PoolDetail[];\n  provider: Provider;\n}\n\nexport type TokenResponse = TokenDetail;\n\n/* ---------- /api/explorer (optional) ---------- */\nexport interface ExplorerTxPreview {\n  chain: ChainSlug;\n  txHash: TxHash;\n  ts?: UnixSeconds;\n  from?: Address;\n  to?: Address;\n  status?: 'success' | 'failed' | 'pending';\n  valueNative?: string;     // string to preserve precision\n  feeNative?: string;\n  explorerUrl?: string;\n  provider: 'etherscan' | string;\n}\n\n/* ---------- Error envelope for all APIs ---------- */\nexport interface ApiError {\n  error: string;\n  provider: 'none' | Provider;\n}\n\n/* ---------- Response metadata ---------- */\nexport interface FetchMeta {\n  provider?: string | null;\n  tried?: string | null;\n  effectiveTf?: string | null;\n  remapped?: string | null;\n  items?: string | null;\n  token?: string | null;\n  priceSource?: string | null;\n  invalidPool?: string | null;\n  cgAuth?: string | null;\n}\n\nexport interface ApiResult<T> {\n  data: T;\n  meta: FetchMeta;\n}\n\n/* ---------- Client cache shapes ---------- */\nexport interface CacheSearchEntry {\n  response: ApiResult<SearchResponse>;\n  ts: UnixSeconds;\n}\nexport interface CachePairsEntry {\n  response: ApiResult<PairsResponse>;\n  ts: UnixSeconds;\n}\nexport interface CacheOHLCEntry {\n  response: ApiResult<OHLCResponse>;\n  ts: UnixSeconds;\n}\nexport interface CacheTradesEntry {\n  response: ApiResult<TradesResponse>;\n  ts: UnixSeconds;\n}\nexport interface CacheTokenEntry {\n  response: ApiResult<TokenResponse>;\n  ts: UnixSeconds;\n}\n\n/* ---------- Marker + metric types (UI) ---------- */\nexport interface TradeMarker {\n  ts: UnixSeconds;\n  side: TradeSide;          // color: lime (buy) / magenta (sell)\n  price: number;\n  size?: number;            // base\n  clusterSize?: number;     // number of trades aggregated into this marker\n  txHash?: TxHash;\n  walletShort?: string;     // UI convenience\n}\n\nexport type MetricKey =\n  | 'rollingVolumeBase'\n  | 'liquidityUsd'\n  | 'atrLite'\n  | 'returnsZScore'\n  | 'tradesPerInterval';\n\nexport interface MetricSeriesPoint { t: UnixSeconds; v: number; }\nexport interface MetricSeries { key: MetricKey; points: MetricSeriesPoint[]; unit?: string; }\n"
        }
    ]
}